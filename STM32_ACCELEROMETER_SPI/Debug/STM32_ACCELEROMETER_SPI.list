
STM32_ACCELEROMETER_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000863c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  080087cc  080087cc  000187cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008870  08008870  0002014c  2**0
                  CONTENTS
  4 .ARM          00000008  08008870  08008870  00018870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008878  08008878  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008878  08008878  00018878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800887c  0800887c  0001887c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000014c  20000000  08008880  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002014c  2**0
                  CONTENTS
 10 .bss          00001de4  2000014c  2000014c  0002014c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001f30  20001f30  0002014c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000fa90  00000000  00000000  000201bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002ebc  00000000  00000000  0002fc4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d60  00000000  00000000  00032b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000009f3  00000000  00000000  00033870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00022db1  00000000  00000000  00034263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000116ac  00000000  00000000  00057014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c5c03  00000000  00000000  000686c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003aec  00000000  00000000  0012e2c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  00131db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000014c 	.word	0x2000014c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080087b4 	.word	0x080087b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000150 	.word	0x20000150
 80001cc:	080087b4 	.word	0x080087b4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <write_acc>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */
void write_acc(uint8_t address,uint8_t data)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	460a      	mov	r2, r1
 8000586:	71fb      	strb	r3, [r7, #7]
 8000588:	4613      	mov	r3, r2
 800058a:	71bb      	strb	r3, [r7, #6]
	uint8_t l_address[2];
	l_address[0]=address;
 800058c:	79fb      	ldrb	r3, [r7, #7]
 800058e:	733b      	strb	r3, [r7, #12]
	l_address[1]=data;
 8000590:	79bb      	ldrb	r3, [r7, #6]
 8000592:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000594:	2200      	movs	r2, #0
 8000596:	2108      	movs	r1, #8
 8000598:	4809      	ldr	r0, [pc, #36]	; (80005c0 <write_acc+0x44>)
 800059a:	f000 fe5b 	bl	8001254 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, l_address, 2, 50);
 800059e:	f107 010c 	add.w	r1, r7, #12
 80005a2:	2332      	movs	r3, #50	; 0x32
 80005a4:	2202      	movs	r2, #2
 80005a6:	4807      	ldr	r0, [pc, #28]	; (80005c4 <write_acc+0x48>)
 80005a8:	f002 fdfd 	bl	80031a6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 80005ac:	2201      	movs	r2, #1
 80005ae:	2108      	movs	r1, #8
 80005b0:	4803      	ldr	r0, [pc, #12]	; (80005c0 <write_acc+0x44>)
 80005b2:	f000 fe4f 	bl	8001254 <HAL_GPIO_WritePin>

}
 80005b6:	bf00      	nop
 80005b8:	3710      	adds	r7, #16
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40021000 	.word	0x40021000
 80005c4:	20000168 	.word	0x20000168

080005c8 <read_acc>:
uint8_t read_acc(uint8_t address)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	71fb      	strb	r3, [r7, #7]
	uint8_t l_address[1];
	l_address[0]= address | 0x80;
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80005dc:	2200      	movs	r2, #0
 80005de:	2108      	movs	r1, #8
 80005e0:	480d      	ldr	r0, [pc, #52]	; (8000618 <read_acc+0x50>)
 80005e2:	f000 fe37 	bl	8001254 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, l_address, 1, 50);
 80005e6:	f107 010c 	add.w	r1, r7, #12
 80005ea:	2332      	movs	r3, #50	; 0x32
 80005ec:	2201      	movs	r2, #1
 80005ee:	480b      	ldr	r0, [pc, #44]	; (800061c <read_acc+0x54>)
 80005f0:	f002 fdd9 	bl	80031a6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, g_data, 1, 50);
 80005f4:	2332      	movs	r3, #50	; 0x32
 80005f6:	2201      	movs	r2, #1
 80005f8:	4909      	ldr	r1, [pc, #36]	; (8000620 <read_acc+0x58>)
 80005fa:	4808      	ldr	r0, [pc, #32]	; (800061c <read_acc+0x54>)
 80005fc:	f002 ff0f 	bl	800341e <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000600:	2201      	movs	r2, #1
 8000602:	2108      	movs	r1, #8
 8000604:	4804      	ldr	r0, [pc, #16]	; (8000618 <read_acc+0x50>)
 8000606:	f000 fe25 	bl	8001254 <HAL_GPIO_WritePin>
	return g_data[0];
 800060a:	4b05      	ldr	r3, [pc, #20]	; (8000620 <read_acc+0x58>)
 800060c:	781b      	ldrb	r3, [r3, #0]


}
 800060e:	4618      	mov	r0, r3
 8000610:	3710      	adds	r7, #16
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	40021000 	.word	0x40021000
 800061c:	20000168 	.word	0x20000168
 8000620:	200001c4 	.word	0x200001c4

08000624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000628:	f000 fad0 	bl	8000bcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062c:	f000 f828 	bl	8000680 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000630:	f000 f8c6 	bl	80007c0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000634:	f000 f88e 	bl	8000754 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000638:	f006 feea 	bl	8007410 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  write_acc(0x20, 0x17);
 800063c:	2117      	movs	r1, #23
 800063e:	2020      	movs	r0, #32
 8000640:	f7ff ff9c 	bl	800057c <write_acc>
  buffer=read_acc(0x20);
 8000644:	2020      	movs	r0, #32
 8000646:	f7ff ffbf 	bl	80005c8 <read_acc>
 800064a:	4603      	mov	r3, r0
 800064c:	461a      	mov	r2, r3
 800064e:	4b0a      	ldr	r3, [pc, #40]	; (8000678 <main+0x54>)
 8000650:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000652:	2201      	movs	r2, #1
 8000654:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000658:	4808      	ldr	r0, [pc, #32]	; (800067c <main+0x58>)
 800065a:	f000 fdfb 	bl	8001254 <HAL_GPIO_WritePin>
  write_acc(0x23, 0xC8);
 800065e:	21c8      	movs	r1, #200	; 0xc8
 8000660:	2023      	movs	r0, #35	; 0x23
 8000662:	f7ff ff8b 	bl	800057c <write_acc>
  buffer=read_acc(0x23);
 8000666:	2023      	movs	r0, #35	; 0x23
 8000668:	f7ff ffae 	bl	80005c8 <read_acc>
 800066c:	4603      	mov	r3, r0
 800066e:	461a      	mov	r2, r3
 8000670:	4b01      	ldr	r3, [pc, #4]	; (8000678 <main+0x54>)
 8000672:	701a      	strb	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000674:	e7fe      	b.n	8000674 <main+0x50>
 8000676:	bf00      	nop
 8000678:	200001c0 	.word	0x200001c0
 800067c:	40020c00 	.word	0x40020c00

08000680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b094      	sub	sp, #80	; 0x50
 8000684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000686:	f107 0320 	add.w	r3, r7, #32
 800068a:	2230      	movs	r2, #48	; 0x30
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f007 fc0c 	bl	8007eac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000694:	f107 030c 	add.w	r3, r7, #12
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
 80006a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a4:	2300      	movs	r3, #0
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	4b28      	ldr	r3, [pc, #160]	; (800074c <SystemClock_Config+0xcc>)
 80006aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ac:	4a27      	ldr	r2, [pc, #156]	; (800074c <SystemClock_Config+0xcc>)
 80006ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b2:	6413      	str	r3, [r2, #64]	; 0x40
 80006b4:	4b25      	ldr	r3, [pc, #148]	; (800074c <SystemClock_Config+0xcc>)
 80006b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006bc:	60bb      	str	r3, [r7, #8]
 80006be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c0:	2300      	movs	r3, #0
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	4b22      	ldr	r3, [pc, #136]	; (8000750 <SystemClock_Config+0xd0>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a21      	ldr	r2, [pc, #132]	; (8000750 <SystemClock_Config+0xd0>)
 80006ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ce:	6013      	str	r3, [r2, #0]
 80006d0:	4b1f      	ldr	r3, [pc, #124]	; (8000750 <SystemClock_Config+0xd0>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006dc:	2301      	movs	r3, #1
 80006de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e6:	2302      	movs	r3, #2
 80006e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006f0:	2304      	movs	r3, #4
 80006f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006f4:	23a8      	movs	r3, #168	; 0xa8
 80006f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f8:	2302      	movs	r3, #2
 80006fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006fc:	2307      	movs	r3, #7
 80006fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000700:	f107 0320 	add.w	r3, r7, #32
 8000704:	4618      	mov	r0, r3
 8000706:	f002 f855 	bl	80027b4 <HAL_RCC_OscConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000710:	f000 f938 	bl	8000984 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000714:	230f      	movs	r3, #15
 8000716:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000718:	2302      	movs	r3, #2
 800071a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000720:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000724:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000726:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800072a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800072c:	f107 030c 	add.w	r3, r7, #12
 8000730:	2105      	movs	r1, #5
 8000732:	4618      	mov	r0, r3
 8000734:	f002 fab6 	bl	8002ca4 <HAL_RCC_ClockConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800073e:	f000 f921 	bl	8000984 <Error_Handler>
  }
}
 8000742:	bf00      	nop
 8000744:	3750      	adds	r7, #80	; 0x50
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40023800 	.word	0x40023800
 8000750:	40007000 	.word	0x40007000

08000754 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000758:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <MX_SPI1_Init+0x64>)
 800075a:	4a18      	ldr	r2, [pc, #96]	; (80007bc <MX_SPI1_Init+0x68>)
 800075c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800075e:	4b16      	ldr	r3, [pc, #88]	; (80007b8 <MX_SPI1_Init+0x64>)
 8000760:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000764:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000766:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <MX_SPI1_Init+0x64>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800076c:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <MX_SPI1_Init+0x64>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000772:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <MX_SPI1_Init+0x64>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <MX_SPI1_Init+0x64>)
 800077a:	2200      	movs	r2, #0
 800077c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800077e:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <MX_SPI1_Init+0x64>)
 8000780:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000784:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000786:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <MX_SPI1_Init+0x64>)
 8000788:	2200      	movs	r2, #0
 800078a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800078c:	4b0a      	ldr	r3, [pc, #40]	; (80007b8 <MX_SPI1_Init+0x64>)
 800078e:	2200      	movs	r2, #0
 8000790:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000792:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <MX_SPI1_Init+0x64>)
 8000794:	2200      	movs	r2, #0
 8000796:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000798:	4b07      	ldr	r3, [pc, #28]	; (80007b8 <MX_SPI1_Init+0x64>)
 800079a:	2200      	movs	r2, #0
 800079c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800079e:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <MX_SPI1_Init+0x64>)
 80007a0:	220a      	movs	r2, #10
 80007a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007a4:	4804      	ldr	r0, [pc, #16]	; (80007b8 <MX_SPI1_Init+0x64>)
 80007a6:	f002 fc75 	bl	8003094 <HAL_SPI_Init>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007b0:	f000 f8e8 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	20000168 	.word	0x20000168
 80007bc:	40013000 	.word	0x40013000

080007c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08a      	sub	sp, #40	; 0x28
 80007c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c6:	f107 0314 	add.w	r3, r7, #20
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	60da      	str	r2, [r3, #12]
 80007d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	613b      	str	r3, [r7, #16]
 80007da:	4b3b      	ldr	r3, [pc, #236]	; (80008c8 <MX_GPIO_Init+0x108>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a3a      	ldr	r2, [pc, #232]	; (80008c8 <MX_GPIO_Init+0x108>)
 80007e0:	f043 0310 	orr.w	r3, r3, #16
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b38      	ldr	r3, [pc, #224]	; (80008c8 <MX_GPIO_Init+0x108>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0310 	and.w	r3, r3, #16
 80007ee:	613b      	str	r3, [r7, #16]
 80007f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	60fb      	str	r3, [r7, #12]
 80007f6:	4b34      	ldr	r3, [pc, #208]	; (80008c8 <MX_GPIO_Init+0x108>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a33      	ldr	r2, [pc, #204]	; (80008c8 <MX_GPIO_Init+0x108>)
 80007fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b31      	ldr	r3, [pc, #196]	; (80008c8 <MX_GPIO_Init+0x108>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	60bb      	str	r3, [r7, #8]
 8000812:	4b2d      	ldr	r3, [pc, #180]	; (80008c8 <MX_GPIO_Init+0x108>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a2c      	ldr	r2, [pc, #176]	; (80008c8 <MX_GPIO_Init+0x108>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b2a      	ldr	r3, [pc, #168]	; (80008c8 <MX_GPIO_Init+0x108>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	60bb      	str	r3, [r7, #8]
 8000828:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	607b      	str	r3, [r7, #4]
 800082e:	4b26      	ldr	r3, [pc, #152]	; (80008c8 <MX_GPIO_Init+0x108>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a25      	ldr	r2, [pc, #148]	; (80008c8 <MX_GPIO_Init+0x108>)
 8000834:	f043 0308 	orr.w	r3, r3, #8
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b23      	ldr	r3, [pc, #140]	; (80008c8 <MX_GPIO_Init+0x108>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0308 	and.w	r3, r3, #8
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000846:	2201      	movs	r2, #1
 8000848:	2108      	movs	r1, #8
 800084a:	4820      	ldr	r0, [pc, #128]	; (80008cc <MX_GPIO_Init+0x10c>)
 800084c:	f000 fd02 	bl	8001254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000850:	2200      	movs	r2, #0
 8000852:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000856:	481e      	ldr	r0, [pc, #120]	; (80008d0 <MX_GPIO_Init+0x110>)
 8000858:	f000 fcfc 	bl	8001254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800085c:	2308      	movs	r3, #8
 800085e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000860:	2301      	movs	r3, #1
 8000862:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000868:	2300      	movs	r3, #0
 800086a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	4619      	mov	r1, r3
 8000872:	4816      	ldr	r0, [pc, #88]	; (80008cc <MX_GPIO_Init+0x10c>)
 8000874:	f000 fb52 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000878:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800087c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087e:	2301      	movs	r3, #1
 8000880:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000886:	2300      	movs	r3, #0
 8000888:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800088a:	f107 0314 	add.w	r3, r7, #20
 800088e:	4619      	mov	r1, r3
 8000890:	480f      	ldr	r0, [pc, #60]	; (80008d0 <MX_GPIO_Init+0x110>)
 8000892:	f000 fb43 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000896:	2301      	movs	r3, #1
 8000898:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800089a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800089e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	4619      	mov	r1, r3
 80008aa:	4808      	ldr	r0, [pc, #32]	; (80008cc <MX_GPIO_Init+0x10c>)
 80008ac:	f000 fb36 	bl	8000f1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80008b0:	2200      	movs	r2, #0
 80008b2:	2100      	movs	r1, #0
 80008b4:	2006      	movs	r0, #6
 80008b6:	f000 fafa 	bl	8000eae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80008ba:	2006      	movs	r0, #6
 80008bc:	f000 fb13 	bl	8000ee6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008c0:	bf00      	nop
 80008c2:	3728      	adds	r7, #40	; 0x28
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40023800 	.word	0x40023800
 80008cc:	40021000 	.word	0x40021000
 80008d0:	40020c00 	.word	0x40020c00

080008d4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b09e      	sub	sp, #120	; 0x78
 80008d8:	af02      	add	r7, sp, #8
 80008da:	4603      	mov	r3, r0
 80008dc:	80fb      	strh	r3, [r7, #6]
	char veri[100];
	datax=read_acc(0x29);
 80008de:	2029      	movs	r0, #41	; 0x29
 80008e0:	f7ff fe72 	bl	80005c8 <read_acc>
 80008e4:	4603      	mov	r3, r0
 80008e6:	461a      	mov	r2, r3
 80008e8:	4b1f      	ldr	r3, [pc, #124]	; (8000968 <HAL_GPIO_EXTI_Callback+0x94>)
 80008ea:	701a      	strb	r2, [r3, #0]
	datay=read_acc(0x2B);
 80008ec:	202b      	movs	r0, #43	; 0x2b
 80008ee:	f7ff fe6b 	bl	80005c8 <read_acc>
 80008f2:	4603      	mov	r3, r0
 80008f4:	461a      	mov	r2, r3
 80008f6:	4b1d      	ldr	r3, [pc, #116]	; (800096c <HAL_GPIO_EXTI_Callback+0x98>)
 80008f8:	701a      	strb	r2, [r3, #0]
	dataz=read_acc(0x2D);
 80008fa:	202d      	movs	r0, #45	; 0x2d
 80008fc:	f7ff fe64 	bl	80005c8 <read_acc>
 8000900:	4603      	mov	r3, r0
 8000902:	461a      	mov	r2, r3
 8000904:	4b1a      	ldr	r3, [pc, #104]	; (8000970 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000906:	701a      	strb	r2, [r3, #0]
	x=datax;
 8000908:	4b17      	ldr	r3, [pc, #92]	; (8000968 <HAL_GPIO_EXTI_Callback+0x94>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	461a      	mov	r2, r3
 800090e:	4b19      	ldr	r3, [pc, #100]	; (8000974 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000910:	601a      	str	r2, [r3, #0]
	y=datay;
 8000912:	4b16      	ldr	r3, [pc, #88]	; (800096c <HAL_GPIO_EXTI_Callback+0x98>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	461a      	mov	r2, r3
 8000918:	4b17      	ldr	r3, [pc, #92]	; (8000978 <HAL_GPIO_EXTI_Callback+0xa4>)
 800091a:	601a      	str	r2, [r3, #0]
	z=dataz;
 800091c:	4b14      	ldr	r3, [pc, #80]	; (8000970 <HAL_GPIO_EXTI_Callback+0x9c>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	461a      	mov	r2, r3
 8000922:	4b16      	ldr	r3, [pc, #88]	; (800097c <HAL_GPIO_EXTI_Callback+0xa8>)
 8000924:	601a      	str	r2, [r3, #0]
	sniprintf(veri,sizeof(veri),"X: %d  Y: %d X: %d.\n",x,y,z);
 8000926:	4b13      	ldr	r3, [pc, #76]	; (8000974 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000928:	6819      	ldr	r1, [r3, #0]
 800092a:	4b13      	ldr	r3, [pc, #76]	; (8000978 <HAL_GPIO_EXTI_Callback+0xa4>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4a13      	ldr	r2, [pc, #76]	; (800097c <HAL_GPIO_EXTI_Callback+0xa8>)
 8000930:	6812      	ldr	r2, [r2, #0]
 8000932:	f107 000c 	add.w	r0, r7, #12
 8000936:	9201      	str	r2, [sp, #4]
 8000938:	9300      	str	r3, [sp, #0]
 800093a:	460b      	mov	r3, r1
 800093c:	4a10      	ldr	r2, [pc, #64]	; (8000980 <HAL_GPIO_EXTI_Callback+0xac>)
 800093e:	2164      	movs	r1, #100	; 0x64
 8000940:	f007 fa80 	bl	8007e44 <sniprintf>
	CDC_Transmit_FS(veri, strlen(veri));
 8000944:	f107 030c 	add.w	r3, r7, #12
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff fc41 	bl	80001d0 <strlen>
 800094e:	4603      	mov	r3, r0
 8000950:	b29a      	uxth	r2, r3
 8000952:	f107 030c 	add.w	r3, r7, #12
 8000956:	4611      	mov	r1, r2
 8000958:	4618      	mov	r0, r3
 800095a:	f006 fe17 	bl	800758c <CDC_Transmit_FS>

}
 800095e:	bf00      	nop
 8000960:	3770      	adds	r7, #112	; 0x70
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	200001c5 	.word	0x200001c5
 800096c:	200001c6 	.word	0x200001c6
 8000970:	200001c7 	.word	0x200001c7
 8000974:	200001c8 	.word	0x200001c8
 8000978:	200001cc 	.word	0x200001cc
 800097c:	200001d0 	.word	0x200001d0
 8000980:	080087cc 	.word	0x080087cc

08000984 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000988:	b672      	cpsid	i
}
 800098a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800098c:	e7fe      	b.n	800098c <Error_Handler+0x8>
	...

08000990 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	4b10      	ldr	r3, [pc, #64]	; (80009dc <HAL_MspInit+0x4c>)
 800099c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099e:	4a0f      	ldr	r2, [pc, #60]	; (80009dc <HAL_MspInit+0x4c>)
 80009a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a4:	6453      	str	r3, [r2, #68]	; 0x44
 80009a6:	4b0d      	ldr	r3, [pc, #52]	; (80009dc <HAL_MspInit+0x4c>)
 80009a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	603b      	str	r3, [r7, #0]
 80009b6:	4b09      	ldr	r3, [pc, #36]	; (80009dc <HAL_MspInit+0x4c>)
 80009b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ba:	4a08      	ldr	r2, [pc, #32]	; (80009dc <HAL_MspInit+0x4c>)
 80009bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c0:	6413      	str	r3, [r2, #64]	; 0x40
 80009c2:	4b06      	ldr	r3, [pc, #24]	; (80009dc <HAL_MspInit+0x4c>)
 80009c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ca:	603b      	str	r3, [r7, #0]
 80009cc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009ce:	2007      	movs	r0, #7
 80009d0:	f000 fa62 	bl	8000e98 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d4:	bf00      	nop
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40023800 	.word	0x40023800

080009e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08a      	sub	sp, #40	; 0x28
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e8:	f107 0314 	add.w	r3, r7, #20
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a19      	ldr	r2, [pc, #100]	; (8000a64 <HAL_SPI_MspInit+0x84>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d12b      	bne.n	8000a5a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	613b      	str	r3, [r7, #16]
 8000a06:	4b18      	ldr	r3, [pc, #96]	; (8000a68 <HAL_SPI_MspInit+0x88>)
 8000a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0a:	4a17      	ldr	r2, [pc, #92]	; (8000a68 <HAL_SPI_MspInit+0x88>)
 8000a0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a10:	6453      	str	r3, [r2, #68]	; 0x44
 8000a12:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <HAL_SPI_MspInit+0x88>)
 8000a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a1a:	613b      	str	r3, [r7, #16]
 8000a1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <HAL_SPI_MspInit+0x88>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a10      	ldr	r2, [pc, #64]	; (8000a68 <HAL_SPI_MspInit+0x88>)
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <HAL_SPI_MspInit+0x88>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000a3a:	23e0      	movs	r3, #224	; 0xe0
 8000a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a46:	2303      	movs	r3, #3
 8000a48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a4a:	2305      	movs	r3, #5
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4e:	f107 0314 	add.w	r3, r7, #20
 8000a52:	4619      	mov	r1, r3
 8000a54:	4805      	ldr	r0, [pc, #20]	; (8000a6c <HAL_SPI_MspInit+0x8c>)
 8000a56:	f000 fa61 	bl	8000f1c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a5a:	bf00      	nop
 8000a5c:	3728      	adds	r7, #40	; 0x28
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40013000 	.word	0x40013000
 8000a68:	40023800 	.word	0x40023800
 8000a6c:	40020000 	.word	0x40020000

08000a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <NMI_Handler+0x4>

08000a76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a7a:	e7fe      	b.n	8000a7a <HardFault_Handler+0x4>

08000a7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <MemManage_Handler+0x4>

08000a82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <BusFault_Handler+0x4>

08000a88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <UsageFault_Handler+0x4>

08000a8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr

08000aaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000abc:	f000 f8d8 	bl	8000c70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000ac8:	2001      	movs	r0, #1
 8000aca:	f000 fbdd 	bl	8001288 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
	...

08000ad4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000ad8:	4802      	ldr	r0, [pc, #8]	; (8000ae4 <OTG_FS_IRQHandler+0x10>)
 8000ada:	f000 fd3d 	bl	8001558 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	200016bc 	.word	0x200016bc

08000ae8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000af0:	4a14      	ldr	r2, [pc, #80]	; (8000b44 <_sbrk+0x5c>)
 8000af2:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <_sbrk+0x60>)
 8000af4:	1ad3      	subs	r3, r2, r3
 8000af6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000afc:	4b13      	ldr	r3, [pc, #76]	; (8000b4c <_sbrk+0x64>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d102      	bne.n	8000b0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b04:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <_sbrk+0x64>)
 8000b06:	4a12      	ldr	r2, [pc, #72]	; (8000b50 <_sbrk+0x68>)
 8000b08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b0a:	4b10      	ldr	r3, [pc, #64]	; (8000b4c <_sbrk+0x64>)
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4413      	add	r3, r2
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d207      	bcs.n	8000b28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b18:	f007 f9d0 	bl	8007ebc <__errno>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	220c      	movs	r2, #12
 8000b20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b22:	f04f 33ff 	mov.w	r3, #4294967295
 8000b26:	e009      	b.n	8000b3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b28:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <_sbrk+0x64>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b2e:	4b07      	ldr	r3, [pc, #28]	; (8000b4c <_sbrk+0x64>)
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4413      	add	r3, r2
 8000b36:	4a05      	ldr	r2, [pc, #20]	; (8000b4c <_sbrk+0x64>)
 8000b38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b3a:	68fb      	ldr	r3, [r7, #12]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3718      	adds	r7, #24
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20020000 	.word	0x20020000
 8000b48:	00000400 	.word	0x00000400
 8000b4c:	200001d4 	.word	0x200001d4
 8000b50:	20001f30 	.word	0x20001f30

08000b54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b58:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <SystemInit+0x20>)
 8000b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b5e:	4a05      	ldr	r2, [pc, #20]	; (8000b74 <SystemInit+0x20>)
 8000b60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bb0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b7c:	480d      	ldr	r0, [pc, #52]	; (8000bb4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b7e:	490e      	ldr	r1, [pc, #56]	; (8000bb8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b80:	4a0e      	ldr	r2, [pc, #56]	; (8000bbc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b84:	e002      	b.n	8000b8c <LoopCopyDataInit>

08000b86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b8a:	3304      	adds	r3, #4

08000b8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b90:	d3f9      	bcc.n	8000b86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b92:	4a0b      	ldr	r2, [pc, #44]	; (8000bc0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b94:	4c0b      	ldr	r4, [pc, #44]	; (8000bc4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b98:	e001      	b.n	8000b9e <LoopFillZerobss>

08000b9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b9c:	3204      	adds	r2, #4

08000b9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ba0:	d3fb      	bcc.n	8000b9a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ba2:	f7ff ffd7 	bl	8000b54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ba6:	f007 f98f 	bl	8007ec8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000baa:	f7ff fd3b 	bl	8000624 <main>
  bx  lr    
 8000bae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000bb0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bb8:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 8000bbc:	08008880 	.word	0x08008880
  ldr r2, =_sbss
 8000bc0:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8000bc4:	20001f30 	.word	0x20001f30

08000bc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bc8:	e7fe      	b.n	8000bc8 <ADC_IRQHandler>
	...

08000bcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bd0:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <HAL_Init+0x40>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a0d      	ldr	r2, [pc, #52]	; (8000c0c <HAL_Init+0x40>)
 8000bd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bdc:	4b0b      	ldr	r3, [pc, #44]	; (8000c0c <HAL_Init+0x40>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a0a      	ldr	r2, [pc, #40]	; (8000c0c <HAL_Init+0x40>)
 8000be2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000be6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000be8:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <HAL_Init+0x40>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a07      	ldr	r2, [pc, #28]	; (8000c0c <HAL_Init+0x40>)
 8000bee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bf2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf4:	2003      	movs	r0, #3
 8000bf6:	f000 f94f 	bl	8000e98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bfa:	2000      	movs	r0, #0
 8000bfc:	f000 f808 	bl	8000c10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c00:	f7ff fec6 	bl	8000990 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c04:	2300      	movs	r3, #0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40023c00 	.word	0x40023c00

08000c10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c18:	4b12      	ldr	r3, [pc, #72]	; (8000c64 <HAL_InitTick+0x54>)
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <HAL_InitTick+0x58>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	4619      	mov	r1, r3
 8000c22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f000 f967 	bl	8000f02 <HAL_SYSTICK_Config>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e00e      	b.n	8000c5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2b0f      	cmp	r3, #15
 8000c42:	d80a      	bhi.n	8000c5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c44:	2200      	movs	r2, #0
 8000c46:	6879      	ldr	r1, [r7, #4]
 8000c48:	f04f 30ff 	mov.w	r0, #4294967295
 8000c4c:	f000 f92f 	bl	8000eae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c50:	4a06      	ldr	r2, [pc, #24]	; (8000c6c <HAL_InitTick+0x5c>)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c56:	2300      	movs	r3, #0
 8000c58:	e000      	b.n	8000c5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20000000 	.word	0x20000000
 8000c68:	20000008 	.word	0x20000008
 8000c6c:	20000004 	.word	0x20000004

08000c70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c74:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <HAL_IncTick+0x20>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	461a      	mov	r2, r3
 8000c7a:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <HAL_IncTick+0x24>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4413      	add	r3, r2
 8000c80:	4a04      	ldr	r2, [pc, #16]	; (8000c94 <HAL_IncTick+0x24>)
 8000c82:	6013      	str	r3, [r2, #0]
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	20000008 	.word	0x20000008
 8000c94:	200001d8 	.word	0x200001d8

08000c98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c9c:	4b03      	ldr	r3, [pc, #12]	; (8000cac <HAL_GetTick+0x14>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	200001d8 	.word	0x200001d8

08000cb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cb8:	f7ff ffee 	bl	8000c98 <HAL_GetTick>
 8000cbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cc8:	d005      	beq.n	8000cd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cca:	4b0a      	ldr	r3, [pc, #40]	; (8000cf4 <HAL_Delay+0x44>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	461a      	mov	r2, r3
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cd6:	bf00      	nop
 8000cd8:	f7ff ffde 	bl	8000c98 <HAL_GetTick>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	68fa      	ldr	r2, [r7, #12]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d8f7      	bhi.n	8000cd8 <HAL_Delay+0x28>
  {
  }
}
 8000ce8:	bf00      	nop
 8000cea:	bf00      	nop
 8000cec:	3710      	adds	r7, #16
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000008 	.word	0x20000008

08000cf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b085      	sub	sp, #20
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	f003 0307 	and.w	r3, r3, #7
 8000d06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d08:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__NVIC_SetPriorityGrouping+0x44>)
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d0e:	68ba      	ldr	r2, [r7, #8]
 8000d10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d14:	4013      	ands	r3, r2
 8000d16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d2a:	4a04      	ldr	r2, [pc, #16]	; (8000d3c <__NVIC_SetPriorityGrouping+0x44>)
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	60d3      	str	r3, [r2, #12]
}
 8000d30:	bf00      	nop
 8000d32:	3714      	adds	r7, #20
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d44:	4b04      	ldr	r3, [pc, #16]	; (8000d58 <__NVIC_GetPriorityGrouping+0x18>)
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	0a1b      	lsrs	r3, r3, #8
 8000d4a:	f003 0307 	and.w	r3, r3, #7
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	db0b      	blt.n	8000d86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	f003 021f 	and.w	r2, r3, #31
 8000d74:	4907      	ldr	r1, [pc, #28]	; (8000d94 <__NVIC_EnableIRQ+0x38>)
 8000d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7a:	095b      	lsrs	r3, r3, #5
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d86:	bf00      	nop
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	e000e100 	.word	0xe000e100

08000d98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	6039      	str	r1, [r7, #0]
 8000da2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	db0a      	blt.n	8000dc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	b2da      	uxtb	r2, r3
 8000db0:	490c      	ldr	r1, [pc, #48]	; (8000de4 <__NVIC_SetPriority+0x4c>)
 8000db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db6:	0112      	lsls	r2, r2, #4
 8000db8:	b2d2      	uxtb	r2, r2
 8000dba:	440b      	add	r3, r1
 8000dbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dc0:	e00a      	b.n	8000dd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	4908      	ldr	r1, [pc, #32]	; (8000de8 <__NVIC_SetPriority+0x50>)
 8000dc8:	79fb      	ldrb	r3, [r7, #7]
 8000dca:	f003 030f 	and.w	r3, r3, #15
 8000dce:	3b04      	subs	r3, #4
 8000dd0:	0112      	lsls	r2, r2, #4
 8000dd2:	b2d2      	uxtb	r2, r2
 8000dd4:	440b      	add	r3, r1
 8000dd6:	761a      	strb	r2, [r3, #24]
}
 8000dd8:	bf00      	nop
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	e000e100 	.word	0xe000e100
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b089      	sub	sp, #36	; 0x24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	f003 0307 	and.w	r3, r3, #7
 8000dfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	f1c3 0307 	rsb	r3, r3, #7
 8000e06:	2b04      	cmp	r3, #4
 8000e08:	bf28      	it	cs
 8000e0a:	2304      	movcs	r3, #4
 8000e0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	3304      	adds	r3, #4
 8000e12:	2b06      	cmp	r3, #6
 8000e14:	d902      	bls.n	8000e1c <NVIC_EncodePriority+0x30>
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	3b03      	subs	r3, #3
 8000e1a:	e000      	b.n	8000e1e <NVIC_EncodePriority+0x32>
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e20:	f04f 32ff 	mov.w	r2, #4294967295
 8000e24:	69bb      	ldr	r3, [r7, #24]
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	43da      	mvns	r2, r3
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	401a      	ands	r2, r3
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e34:	f04f 31ff 	mov.w	r1, #4294967295
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e3e:	43d9      	mvns	r1, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e44:	4313      	orrs	r3, r2
         );
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3724      	adds	r7, #36	; 0x24
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
	...

08000e54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e64:	d301      	bcc.n	8000e6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e66:	2301      	movs	r3, #1
 8000e68:	e00f      	b.n	8000e8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e6a:	4a0a      	ldr	r2, [pc, #40]	; (8000e94 <SysTick_Config+0x40>)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e72:	210f      	movs	r1, #15
 8000e74:	f04f 30ff 	mov.w	r0, #4294967295
 8000e78:	f7ff ff8e 	bl	8000d98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e7c:	4b05      	ldr	r3, [pc, #20]	; (8000e94 <SysTick_Config+0x40>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e82:	4b04      	ldr	r3, [pc, #16]	; (8000e94 <SysTick_Config+0x40>)
 8000e84:	2207      	movs	r2, #7
 8000e86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	e000e010 	.word	0xe000e010

08000e98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f7ff ff29 	bl	8000cf8 <__NVIC_SetPriorityGrouping>
}
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b086      	sub	sp, #24
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	60b9      	str	r1, [r7, #8]
 8000eb8:	607a      	str	r2, [r7, #4]
 8000eba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ec0:	f7ff ff3e 	bl	8000d40 <__NVIC_GetPriorityGrouping>
 8000ec4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ec6:	687a      	ldr	r2, [r7, #4]
 8000ec8:	68b9      	ldr	r1, [r7, #8]
 8000eca:	6978      	ldr	r0, [r7, #20]
 8000ecc:	f7ff ff8e 	bl	8000dec <NVIC_EncodePriority>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ed6:	4611      	mov	r1, r2
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff ff5d 	bl	8000d98 <__NVIC_SetPriority>
}
 8000ede:	bf00      	nop
 8000ee0:	3718      	adds	r7, #24
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b082      	sub	sp, #8
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	4603      	mov	r3, r0
 8000eee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff ff31 	bl	8000d5c <__NVIC_EnableIRQ>
}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b082      	sub	sp, #8
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f7ff ffa2 	bl	8000e54 <SysTick_Config>
 8000f10:	4603      	mov	r3, r0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
	...

08000f1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b089      	sub	sp, #36	; 0x24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f26:	2300      	movs	r3, #0
 8000f28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f32:	2300      	movs	r3, #0
 8000f34:	61fb      	str	r3, [r7, #28]
 8000f36:	e16b      	b.n	8001210 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f38:	2201      	movs	r2, #1
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	697a      	ldr	r2, [r7, #20]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	f040 815a 	bne.w	800120a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f003 0303 	and.w	r3, r3, #3
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d005      	beq.n	8000f6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d130      	bne.n	8000fd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	2203      	movs	r2, #3
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	4013      	ands	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	68da      	ldr	r2, [r3, #12]
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	43db      	mvns	r3, r3
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	091b      	lsrs	r3, r3, #4
 8000fba:	f003 0201 	and.w	r2, r3, #1
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f003 0303 	and.w	r3, r3, #3
 8000fd8:	2b03      	cmp	r3, #3
 8000fda:	d017      	beq.n	800100c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	2203      	movs	r2, #3
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	689a      	ldr	r2, [r3, #8]
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4313      	orrs	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f003 0303 	and.w	r3, r3, #3
 8001014:	2b02      	cmp	r3, #2
 8001016:	d123      	bne.n	8001060 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	08da      	lsrs	r2, r3, #3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3208      	adds	r2, #8
 8001020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001024:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	f003 0307 	and.w	r3, r3, #7
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	220f      	movs	r2, #15
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	43db      	mvns	r3, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4013      	ands	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	691a      	ldr	r2, [r3, #16]
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	f003 0307 	and.w	r3, r3, #7
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	4313      	orrs	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	08da      	lsrs	r2, r3, #3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	3208      	adds	r2, #8
 800105a:	69b9      	ldr	r1, [r7, #24]
 800105c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	2203      	movs	r2, #3
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4013      	ands	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f003 0203 	and.w	r2, r3, #3
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4313      	orrs	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800109c:	2b00      	cmp	r3, #0
 800109e:	f000 80b4 	beq.w	800120a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	4b60      	ldr	r3, [pc, #384]	; (8001228 <HAL_GPIO_Init+0x30c>)
 80010a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010aa:	4a5f      	ldr	r2, [pc, #380]	; (8001228 <HAL_GPIO_Init+0x30c>)
 80010ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010b0:	6453      	str	r3, [r2, #68]	; 0x44
 80010b2:	4b5d      	ldr	r3, [pc, #372]	; (8001228 <HAL_GPIO_Init+0x30c>)
 80010b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010be:	4a5b      	ldr	r2, [pc, #364]	; (800122c <HAL_GPIO_Init+0x310>)
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	089b      	lsrs	r3, r3, #2
 80010c4:	3302      	adds	r3, #2
 80010c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	f003 0303 	and.w	r3, r3, #3
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	220f      	movs	r2, #15
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	43db      	mvns	r3, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4013      	ands	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a52      	ldr	r2, [pc, #328]	; (8001230 <HAL_GPIO_Init+0x314>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d02b      	beq.n	8001142 <HAL_GPIO_Init+0x226>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a51      	ldr	r2, [pc, #324]	; (8001234 <HAL_GPIO_Init+0x318>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d025      	beq.n	800113e <HAL_GPIO_Init+0x222>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a50      	ldr	r2, [pc, #320]	; (8001238 <HAL_GPIO_Init+0x31c>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d01f      	beq.n	800113a <HAL_GPIO_Init+0x21e>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a4f      	ldr	r2, [pc, #316]	; (800123c <HAL_GPIO_Init+0x320>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d019      	beq.n	8001136 <HAL_GPIO_Init+0x21a>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a4e      	ldr	r2, [pc, #312]	; (8001240 <HAL_GPIO_Init+0x324>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d013      	beq.n	8001132 <HAL_GPIO_Init+0x216>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a4d      	ldr	r2, [pc, #308]	; (8001244 <HAL_GPIO_Init+0x328>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d00d      	beq.n	800112e <HAL_GPIO_Init+0x212>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a4c      	ldr	r2, [pc, #304]	; (8001248 <HAL_GPIO_Init+0x32c>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d007      	beq.n	800112a <HAL_GPIO_Init+0x20e>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a4b      	ldr	r2, [pc, #300]	; (800124c <HAL_GPIO_Init+0x330>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d101      	bne.n	8001126 <HAL_GPIO_Init+0x20a>
 8001122:	2307      	movs	r3, #7
 8001124:	e00e      	b.n	8001144 <HAL_GPIO_Init+0x228>
 8001126:	2308      	movs	r3, #8
 8001128:	e00c      	b.n	8001144 <HAL_GPIO_Init+0x228>
 800112a:	2306      	movs	r3, #6
 800112c:	e00a      	b.n	8001144 <HAL_GPIO_Init+0x228>
 800112e:	2305      	movs	r3, #5
 8001130:	e008      	b.n	8001144 <HAL_GPIO_Init+0x228>
 8001132:	2304      	movs	r3, #4
 8001134:	e006      	b.n	8001144 <HAL_GPIO_Init+0x228>
 8001136:	2303      	movs	r3, #3
 8001138:	e004      	b.n	8001144 <HAL_GPIO_Init+0x228>
 800113a:	2302      	movs	r3, #2
 800113c:	e002      	b.n	8001144 <HAL_GPIO_Init+0x228>
 800113e:	2301      	movs	r3, #1
 8001140:	e000      	b.n	8001144 <HAL_GPIO_Init+0x228>
 8001142:	2300      	movs	r3, #0
 8001144:	69fa      	ldr	r2, [r7, #28]
 8001146:	f002 0203 	and.w	r2, r2, #3
 800114a:	0092      	lsls	r2, r2, #2
 800114c:	4093      	lsls	r3, r2
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	4313      	orrs	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001154:	4935      	ldr	r1, [pc, #212]	; (800122c <HAL_GPIO_Init+0x310>)
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	089b      	lsrs	r3, r3, #2
 800115a:	3302      	adds	r3, #2
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001162:	4b3b      	ldr	r3, [pc, #236]	; (8001250 <HAL_GPIO_Init+0x334>)
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	43db      	mvns	r3, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4013      	ands	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d003      	beq.n	8001186 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	4313      	orrs	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001186:	4a32      	ldr	r2, [pc, #200]	; (8001250 <HAL_GPIO_Init+0x334>)
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800118c:	4b30      	ldr	r3, [pc, #192]	; (8001250 <HAL_GPIO_Init+0x334>)
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	43db      	mvns	r3, r3
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4013      	ands	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d003      	beq.n	80011b0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011b0:	4a27      	ldr	r2, [pc, #156]	; (8001250 <HAL_GPIO_Init+0x334>)
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011b6:	4b26      	ldr	r3, [pc, #152]	; (8001250 <HAL_GPIO_Init+0x334>)
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	43db      	mvns	r3, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4013      	ands	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d003      	beq.n	80011da <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011da:	4a1d      	ldr	r2, [pc, #116]	; (8001250 <HAL_GPIO_Init+0x334>)
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011e0:	4b1b      	ldr	r3, [pc, #108]	; (8001250 <HAL_GPIO_Init+0x334>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	43db      	mvns	r3, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4013      	ands	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d003      	beq.n	8001204 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	4313      	orrs	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001204:	4a12      	ldr	r2, [pc, #72]	; (8001250 <HAL_GPIO_Init+0x334>)
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	3301      	adds	r3, #1
 800120e:	61fb      	str	r3, [r7, #28]
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	2b0f      	cmp	r3, #15
 8001214:	f67f ae90 	bls.w	8000f38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001218:	bf00      	nop
 800121a:	bf00      	nop
 800121c:	3724      	adds	r7, #36	; 0x24
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	40023800 	.word	0x40023800
 800122c:	40013800 	.word	0x40013800
 8001230:	40020000 	.word	0x40020000
 8001234:	40020400 	.word	0x40020400
 8001238:	40020800 	.word	0x40020800
 800123c:	40020c00 	.word	0x40020c00
 8001240:	40021000 	.word	0x40021000
 8001244:	40021400 	.word	0x40021400
 8001248:	40021800 	.word	0x40021800
 800124c:	40021c00 	.word	0x40021c00
 8001250:	40013c00 	.word	0x40013c00

08001254 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	460b      	mov	r3, r1
 800125e:	807b      	strh	r3, [r7, #2]
 8001260:	4613      	mov	r3, r2
 8001262:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001264:	787b      	ldrb	r3, [r7, #1]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d003      	beq.n	8001272 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800126a:	887a      	ldrh	r2, [r7, #2]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001270:	e003      	b.n	800127a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001272:	887b      	ldrh	r3, [r7, #2]
 8001274:	041a      	lsls	r2, r3, #16
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	619a      	str	r2, [r3, #24]
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
	...

08001288 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001292:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001294:	695a      	ldr	r2, [r3, #20]
 8001296:	88fb      	ldrh	r3, [r7, #6]
 8001298:	4013      	ands	r3, r2
 800129a:	2b00      	cmp	r3, #0
 800129c:	d006      	beq.n	80012ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800129e:	4a05      	ldr	r2, [pc, #20]	; (80012b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012a0:	88fb      	ldrh	r3, [r7, #6]
 80012a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012a4:	88fb      	ldrh	r3, [r7, #6]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff fb14 	bl	80008d4 <HAL_GPIO_EXTI_Callback>
  }
}
 80012ac:	bf00      	nop
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	40013c00 	.word	0x40013c00

080012b8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80012b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012ba:	b08f      	sub	sp, #60	; 0x3c
 80012bc:	af0a      	add	r7, sp, #40	; 0x28
 80012be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d101      	bne.n	80012ca <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e10f      	b.n	80014ea <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d106      	bne.n	80012ea <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2200      	movs	r2, #0
 80012e0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f006 fa99 	bl	800781c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2203      	movs	r2, #3
 80012ee:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d102      	bne.n	8001304 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2200      	movs	r2, #0
 8001302:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4618      	mov	r0, r3
 800130a:	f002 fd80 	bl	8003e0e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	603b      	str	r3, [r7, #0]
 8001314:	687e      	ldr	r6, [r7, #4]
 8001316:	466d      	mov	r5, sp
 8001318:	f106 0410 	add.w	r4, r6, #16
 800131c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800131e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001320:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001322:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001324:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001328:	e885 0003 	stmia.w	r5, {r0, r1}
 800132c:	1d33      	adds	r3, r6, #4
 800132e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001330:	6838      	ldr	r0, [r7, #0]
 8001332:	f002 fc57 	bl	8003be4 <USB_CoreInit>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d005      	beq.n	8001348 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2202      	movs	r2, #2
 8001340:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	e0d0      	b.n	80014ea <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2100      	movs	r1, #0
 800134e:	4618      	mov	r0, r3
 8001350:	f002 fd6e 	bl	8003e30 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001354:	2300      	movs	r3, #0
 8001356:	73fb      	strb	r3, [r7, #15]
 8001358:	e04a      	b.n	80013f0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800135a:	7bfa      	ldrb	r2, [r7, #15]
 800135c:	6879      	ldr	r1, [r7, #4]
 800135e:	4613      	mov	r3, r2
 8001360:	00db      	lsls	r3, r3, #3
 8001362:	4413      	add	r3, r2
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	440b      	add	r3, r1
 8001368:	333d      	adds	r3, #61	; 0x3d
 800136a:	2201      	movs	r2, #1
 800136c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800136e:	7bfa      	ldrb	r2, [r7, #15]
 8001370:	6879      	ldr	r1, [r7, #4]
 8001372:	4613      	mov	r3, r2
 8001374:	00db      	lsls	r3, r3, #3
 8001376:	4413      	add	r3, r2
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	440b      	add	r3, r1
 800137c:	333c      	adds	r3, #60	; 0x3c
 800137e:	7bfa      	ldrb	r2, [r7, #15]
 8001380:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001382:	7bfa      	ldrb	r2, [r7, #15]
 8001384:	7bfb      	ldrb	r3, [r7, #15]
 8001386:	b298      	uxth	r0, r3
 8001388:	6879      	ldr	r1, [r7, #4]
 800138a:	4613      	mov	r3, r2
 800138c:	00db      	lsls	r3, r3, #3
 800138e:	4413      	add	r3, r2
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	440b      	add	r3, r1
 8001394:	3344      	adds	r3, #68	; 0x44
 8001396:	4602      	mov	r2, r0
 8001398:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800139a:	7bfa      	ldrb	r2, [r7, #15]
 800139c:	6879      	ldr	r1, [r7, #4]
 800139e:	4613      	mov	r3, r2
 80013a0:	00db      	lsls	r3, r3, #3
 80013a2:	4413      	add	r3, r2
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	440b      	add	r3, r1
 80013a8:	3340      	adds	r3, #64	; 0x40
 80013aa:	2200      	movs	r2, #0
 80013ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80013ae:	7bfa      	ldrb	r2, [r7, #15]
 80013b0:	6879      	ldr	r1, [r7, #4]
 80013b2:	4613      	mov	r3, r2
 80013b4:	00db      	lsls	r3, r3, #3
 80013b6:	4413      	add	r3, r2
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	440b      	add	r3, r1
 80013bc:	3348      	adds	r3, #72	; 0x48
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80013c2:	7bfa      	ldrb	r2, [r7, #15]
 80013c4:	6879      	ldr	r1, [r7, #4]
 80013c6:	4613      	mov	r3, r2
 80013c8:	00db      	lsls	r3, r3, #3
 80013ca:	4413      	add	r3, r2
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	440b      	add	r3, r1
 80013d0:	334c      	adds	r3, #76	; 0x4c
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80013d6:	7bfa      	ldrb	r2, [r7, #15]
 80013d8:	6879      	ldr	r1, [r7, #4]
 80013da:	4613      	mov	r3, r2
 80013dc:	00db      	lsls	r3, r3, #3
 80013de:	4413      	add	r3, r2
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	440b      	add	r3, r1
 80013e4:	3354      	adds	r3, #84	; 0x54
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013ea:	7bfb      	ldrb	r3, [r7, #15]
 80013ec:	3301      	adds	r3, #1
 80013ee:	73fb      	strb	r3, [r7, #15]
 80013f0:	7bfa      	ldrb	r2, [r7, #15]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d3af      	bcc.n	800135a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013fa:	2300      	movs	r3, #0
 80013fc:	73fb      	strb	r3, [r7, #15]
 80013fe:	e044      	b.n	800148a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001400:	7bfa      	ldrb	r2, [r7, #15]
 8001402:	6879      	ldr	r1, [r7, #4]
 8001404:	4613      	mov	r3, r2
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	4413      	add	r3, r2
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	440b      	add	r3, r1
 800140e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001412:	2200      	movs	r2, #0
 8001414:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001416:	7bfa      	ldrb	r2, [r7, #15]
 8001418:	6879      	ldr	r1, [r7, #4]
 800141a:	4613      	mov	r3, r2
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	4413      	add	r3, r2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	440b      	add	r3, r1
 8001424:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001428:	7bfa      	ldrb	r2, [r7, #15]
 800142a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800142c:	7bfa      	ldrb	r2, [r7, #15]
 800142e:	6879      	ldr	r1, [r7, #4]
 8001430:	4613      	mov	r3, r2
 8001432:	00db      	lsls	r3, r3, #3
 8001434:	4413      	add	r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	440b      	add	r3, r1
 800143a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800143e:	2200      	movs	r2, #0
 8001440:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001442:	7bfa      	ldrb	r2, [r7, #15]
 8001444:	6879      	ldr	r1, [r7, #4]
 8001446:	4613      	mov	r3, r2
 8001448:	00db      	lsls	r3, r3, #3
 800144a:	4413      	add	r3, r2
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	440b      	add	r3, r1
 8001450:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001458:	7bfa      	ldrb	r2, [r7, #15]
 800145a:	6879      	ldr	r1, [r7, #4]
 800145c:	4613      	mov	r3, r2
 800145e:	00db      	lsls	r3, r3, #3
 8001460:	4413      	add	r3, r2
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	440b      	add	r3, r1
 8001466:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800146e:	7bfa      	ldrb	r2, [r7, #15]
 8001470:	6879      	ldr	r1, [r7, #4]
 8001472:	4613      	mov	r3, r2
 8001474:	00db      	lsls	r3, r3, #3
 8001476:	4413      	add	r3, r2
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	440b      	add	r3, r1
 800147c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001484:	7bfb      	ldrb	r3, [r7, #15]
 8001486:	3301      	adds	r3, #1
 8001488:	73fb      	strb	r3, [r7, #15]
 800148a:	7bfa      	ldrb	r2, [r7, #15]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	429a      	cmp	r2, r3
 8001492:	d3b5      	bcc.n	8001400 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	603b      	str	r3, [r7, #0]
 800149a:	687e      	ldr	r6, [r7, #4]
 800149c:	466d      	mov	r5, sp
 800149e:	f106 0410 	add.w	r4, r6, #16
 80014a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80014b2:	1d33      	adds	r3, r6, #4
 80014b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014b6:	6838      	ldr	r0, [r7, #0]
 80014b8:	f002 fd06 	bl	8003ec8 <USB_DevInit>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d005      	beq.n	80014ce <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2202      	movs	r2, #2
 80014c6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e00d      	b.n	80014ea <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2200      	movs	r2, #0
 80014d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2201      	movs	r2, #1
 80014da:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f003 fe55 	bl	8005192 <USB_DevDisconnect>

  return HAL_OK;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3714      	adds	r7, #20
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014f2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b084      	sub	sp, #16
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001506:	2b01      	cmp	r3, #1
 8001508:	d101      	bne.n	800150e <HAL_PCD_Start+0x1c>
 800150a:	2302      	movs	r3, #2
 800150c:	e020      	b.n	8001550 <HAL_PCD_Start+0x5e>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2201      	movs	r2, #1
 8001512:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800151a:	2b01      	cmp	r3, #1
 800151c:	d109      	bne.n	8001532 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001522:	2b01      	cmp	r3, #1
 8001524:	d005      	beq.n	8001532 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800152a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4618      	mov	r0, r3
 8001538:	f002 fc58 	bl	8003dec <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4618      	mov	r0, r3
 8001542:	f003 fe05 	bl	8005150 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2200      	movs	r2, #0
 800154a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800154e:	2300      	movs	r3, #0
}
 8001550:	4618      	mov	r0, r3
 8001552:	3710      	adds	r7, #16
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001558:	b590      	push	{r4, r7, lr}
 800155a:	b08d      	sub	sp, #52	; 0x34
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001566:	6a3b      	ldr	r3, [r7, #32]
 8001568:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4618      	mov	r0, r3
 8001570:	f003 fec3 	bl	80052fa <USB_GetMode>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	f040 848a 	bne.w	8001e90 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4618      	mov	r0, r3
 8001582:	f003 fe27 	bl	80051d4 <USB_ReadInterrupts>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	f000 8480 	beq.w	8001e8e <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	0a1b      	lsrs	r3, r3, #8
 8001598:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f003 fe14 	bl	80051d4 <USB_ReadInterrupts>
 80015ac:	4603      	mov	r3, r0
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d107      	bne.n	80015c6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	695a      	ldr	r2, [r3, #20]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f002 0202 	and.w	r2, r2, #2
 80015c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f003 fe02 	bl	80051d4 <USB_ReadInterrupts>
 80015d0:	4603      	mov	r3, r0
 80015d2:	f003 0310 	and.w	r3, r3, #16
 80015d6:	2b10      	cmp	r3, #16
 80015d8:	d161      	bne.n	800169e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	699a      	ldr	r2, [r3, #24]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f022 0210 	bic.w	r2, r2, #16
 80015e8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80015ea:	6a3b      	ldr	r3, [r7, #32]
 80015ec:	6a1b      	ldr	r3, [r3, #32]
 80015ee:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	f003 020f 	and.w	r2, r3, #15
 80015f6:	4613      	mov	r3, r2
 80015f8:	00db      	lsls	r3, r3, #3
 80015fa:	4413      	add	r3, r2
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	4413      	add	r3, r2
 8001606:	3304      	adds	r3, #4
 8001608:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	0c5b      	lsrs	r3, r3, #17
 800160e:	f003 030f 	and.w	r3, r3, #15
 8001612:	2b02      	cmp	r3, #2
 8001614:	d124      	bne.n	8001660 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800161c:	4013      	ands	r3, r2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d035      	beq.n	800168e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	091b      	lsrs	r3, r3, #4
 800162a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800162c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001630:	b29b      	uxth	r3, r3
 8001632:	461a      	mov	r2, r3
 8001634:	6a38      	ldr	r0, [r7, #32]
 8001636:	f003 fc39 	bl	8004eac <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	691a      	ldr	r2, [r3, #16]
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	091b      	lsrs	r3, r3, #4
 8001642:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001646:	441a      	add	r2, r3
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	6a1a      	ldr	r2, [r3, #32]
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	091b      	lsrs	r3, r3, #4
 8001654:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001658:	441a      	add	r2, r3
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	621a      	str	r2, [r3, #32]
 800165e:	e016      	b.n	800168e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	0c5b      	lsrs	r3, r3, #17
 8001664:	f003 030f 	and.w	r3, r3, #15
 8001668:	2b06      	cmp	r3, #6
 800166a:	d110      	bne.n	800168e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001672:	2208      	movs	r2, #8
 8001674:	4619      	mov	r1, r3
 8001676:	6a38      	ldr	r0, [r7, #32]
 8001678:	f003 fc18 	bl	8004eac <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	6a1a      	ldr	r2, [r3, #32]
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	091b      	lsrs	r3, r3, #4
 8001684:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001688:	441a      	add	r2, r3
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	699a      	ldr	r2, [r3, #24]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f042 0210 	orr.w	r2, r2, #16
 800169c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f003 fd96 	bl	80051d4 <USB_ReadInterrupts>
 80016a8:	4603      	mov	r3, r0
 80016aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016ae:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80016b2:	f040 80a7 	bne.w	8001804 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80016b6:	2300      	movs	r3, #0
 80016b8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4618      	mov	r0, r3
 80016c0:	f003 fd9b 	bl	80051fa <USB_ReadDevAllOutEpInterrupt>
 80016c4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80016c6:	e099      	b.n	80017fc <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80016c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	f000 808e 	beq.w	80017f0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016da:	b2d2      	uxtb	r2, r2
 80016dc:	4611      	mov	r1, r2
 80016de:	4618      	mov	r0, r3
 80016e0:	f003 fdbf 	bl	8005262 <USB_ReadDevOutEPInterrupt>
 80016e4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	f003 0301 	and.w	r3, r3, #1
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d00c      	beq.n	800170a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80016f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f2:	015a      	lsls	r2, r3, #5
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	4413      	add	r3, r2
 80016f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016fc:	461a      	mov	r2, r3
 80016fe:	2301      	movs	r3, #1
 8001700:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001702:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f000 fec3 	bl	8002490 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	f003 0308 	and.w	r3, r3, #8
 8001710:	2b00      	cmp	r3, #0
 8001712:	d00c      	beq.n	800172e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001716:	015a      	lsls	r2, r3, #5
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	4413      	add	r3, r2
 800171c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001720:	461a      	mov	r2, r3
 8001722:	2308      	movs	r3, #8
 8001724:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001726:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f000 ff99 	bl	8002660 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	f003 0310 	and.w	r3, r3, #16
 8001734:	2b00      	cmp	r3, #0
 8001736:	d008      	beq.n	800174a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173a:	015a      	lsls	r2, r3, #5
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	4413      	add	r3, r2
 8001740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001744:	461a      	mov	r2, r3
 8001746:	2310      	movs	r3, #16
 8001748:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	f003 0302 	and.w	r3, r3, #2
 8001750:	2b00      	cmp	r3, #0
 8001752:	d030      	beq.n	80017b6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001754:	6a3b      	ldr	r3, [r7, #32]
 8001756:	695b      	ldr	r3, [r3, #20]
 8001758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800175c:	2b80      	cmp	r3, #128	; 0x80
 800175e:	d109      	bne.n	8001774 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	69fa      	ldr	r2, [r7, #28]
 800176a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800176e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001772:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001774:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001776:	4613      	mov	r3, r2
 8001778:	00db      	lsls	r3, r3, #3
 800177a:	4413      	add	r3, r2
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	4413      	add	r3, r2
 8001786:	3304      	adds	r3, #4
 8001788:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	78db      	ldrb	r3, [r3, #3]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d108      	bne.n	80017a4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	2200      	movs	r2, #0
 8001796:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179a:	b2db      	uxtb	r3, r3
 800179c:	4619      	mov	r1, r3
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f006 f942 	bl	8007a28 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80017a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a6:	015a      	lsls	r2, r3, #5
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	4413      	add	r3, r2
 80017ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017b0:	461a      	mov	r2, r3
 80017b2:	2302      	movs	r3, #2
 80017b4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	f003 0320 	and.w	r3, r3, #32
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d008      	beq.n	80017d2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80017c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c2:	015a      	lsls	r2, r3, #5
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	4413      	add	r3, r2
 80017c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017cc:	461a      	mov	r2, r3
 80017ce:	2320      	movs	r3, #32
 80017d0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d009      	beq.n	80017f0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80017dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017de:	015a      	lsls	r2, r3, #5
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	4413      	add	r3, r2
 80017e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017e8:	461a      	mov	r2, r3
 80017ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017ee:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80017f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f2:	3301      	adds	r3, #1
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80017f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017f8:	085b      	lsrs	r3, r3, #1
 80017fa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80017fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017fe:	2b00      	cmp	r3, #0
 8001800:	f47f af62 	bne.w	80016c8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4618      	mov	r0, r3
 800180a:	f003 fce3 	bl	80051d4 <USB_ReadInterrupts>
 800180e:	4603      	mov	r3, r0
 8001810:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001814:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001818:	f040 80db 	bne.w	80019d2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4618      	mov	r0, r3
 8001822:	f003 fd04 	bl	800522e <USB_ReadDevAllInEpInterrupt>
 8001826:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001828:	2300      	movs	r3, #0
 800182a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800182c:	e0cd      	b.n	80019ca <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800182e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001830:	f003 0301 	and.w	r3, r3, #1
 8001834:	2b00      	cmp	r3, #0
 8001836:	f000 80c2 	beq.w	80019be <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001840:	b2d2      	uxtb	r2, r2
 8001842:	4611      	mov	r1, r2
 8001844:	4618      	mov	r0, r3
 8001846:	f003 fd2a 	bl	800529e <USB_ReadDevInEPInterrupt>
 800184a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	2b00      	cmp	r3, #0
 8001854:	d057      	beq.n	8001906 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001858:	f003 030f 	and.w	r3, r3, #15
 800185c:	2201      	movs	r2, #1
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800186a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	43db      	mvns	r3, r3
 8001870:	69f9      	ldr	r1, [r7, #28]
 8001872:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001876:	4013      	ands	r3, r2
 8001878:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800187a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187c:	015a      	lsls	r2, r3, #5
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	4413      	add	r3, r2
 8001882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001886:	461a      	mov	r2, r3
 8001888:	2301      	movs	r3, #1
 800188a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	691b      	ldr	r3, [r3, #16]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d132      	bne.n	80018fa <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001894:	6879      	ldr	r1, [r7, #4]
 8001896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001898:	4613      	mov	r3, r2
 800189a:	00db      	lsls	r3, r3, #3
 800189c:	4413      	add	r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	440b      	add	r3, r1
 80018a2:	334c      	adds	r3, #76	; 0x4c
 80018a4:	6819      	ldr	r1, [r3, #0]
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018aa:	4613      	mov	r3, r2
 80018ac:	00db      	lsls	r3, r3, #3
 80018ae:	4413      	add	r3, r2
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	4403      	add	r3, r0
 80018b4:	3348      	adds	r3, #72	; 0x48
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4419      	add	r1, r3
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018be:	4613      	mov	r3, r2
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	4413      	add	r3, r2
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	4403      	add	r3, r0
 80018c8:	334c      	adds	r3, #76	; 0x4c
 80018ca:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80018cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d113      	bne.n	80018fa <HAL_PCD_IRQHandler+0x3a2>
 80018d2:	6879      	ldr	r1, [r7, #4]
 80018d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018d6:	4613      	mov	r3, r2
 80018d8:	00db      	lsls	r3, r3, #3
 80018da:	4413      	add	r3, r2
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	440b      	add	r3, r1
 80018e0:	3354      	adds	r3, #84	; 0x54
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d108      	bne.n	80018fa <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6818      	ldr	r0, [r3, #0]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80018f2:	461a      	mov	r2, r3
 80018f4:	2101      	movs	r1, #1
 80018f6:	f003 fd31 	bl	800535c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80018fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	4619      	mov	r1, r3
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f006 f80c 	bl	800791e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	f003 0308 	and.w	r3, r3, #8
 800190c:	2b00      	cmp	r3, #0
 800190e:	d008      	beq.n	8001922 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001912:	015a      	lsls	r2, r3, #5
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	4413      	add	r3, r2
 8001918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800191c:	461a      	mov	r2, r3
 800191e:	2308      	movs	r3, #8
 8001920:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	f003 0310 	and.w	r3, r3, #16
 8001928:	2b00      	cmp	r3, #0
 800192a:	d008      	beq.n	800193e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800192c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192e:	015a      	lsls	r2, r3, #5
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	4413      	add	r3, r2
 8001934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001938:	461a      	mov	r2, r3
 800193a:	2310      	movs	r3, #16
 800193c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001944:	2b00      	cmp	r3, #0
 8001946:	d008      	beq.n	800195a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194a:	015a      	lsls	r2, r3, #5
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	4413      	add	r3, r2
 8001950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001954:	461a      	mov	r2, r3
 8001956:	2340      	movs	r3, #64	; 0x40
 8001958:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d023      	beq.n	80019ac <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001964:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001966:	6a38      	ldr	r0, [r7, #32]
 8001968:	f002 fc12 	bl	8004190 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800196c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800196e:	4613      	mov	r3, r2
 8001970:	00db      	lsls	r3, r3, #3
 8001972:	4413      	add	r3, r2
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	3338      	adds	r3, #56	; 0x38
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	4413      	add	r3, r2
 800197c:	3304      	adds	r3, #4
 800197e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	78db      	ldrb	r3, [r3, #3]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d108      	bne.n	800199a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	2200      	movs	r2, #0
 800198c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800198e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001990:	b2db      	uxtb	r3, r3
 8001992:	4619      	mov	r1, r3
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f006 f859 	bl	8007a4c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800199a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199c:	015a      	lsls	r2, r3, #5
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	4413      	add	r3, r2
 80019a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019a6:	461a      	mov	r2, r3
 80019a8:	2302      	movs	r3, #2
 80019aa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d003      	beq.n	80019be <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80019b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f000 fcdb 	bl	8002374 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80019be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c0:	3301      	adds	r3, #1
 80019c2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80019c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019c6:	085b      	lsrs	r3, r3, #1
 80019c8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80019ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	f47f af2e 	bne.w	800182e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f003 fbfc 	bl	80051d4 <USB_ReadInterrupts>
 80019dc:	4603      	mov	r3, r0
 80019de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80019e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80019e6:	d122      	bne.n	8001a2e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	69fa      	ldr	r2, [r7, #28]
 80019f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019f6:	f023 0301 	bic.w	r3, r3, #1
 80019fa:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d108      	bne.n	8001a18 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001a0e:	2100      	movs	r1, #0
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f000 fec3 	bl	800279c <HAL_PCDEx_LPM_Callback>
 8001a16:	e002      	b.n	8001a1e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f005 fff7 	bl	8007a0c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	695a      	ldr	r2, [r3, #20]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001a2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f003 fbce 	bl	80051d4 <USB_ReadInterrupts>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a42:	d112      	bne.n	8001a6a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f003 0301 	and.w	r3, r3, #1
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d102      	bne.n	8001a5a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f005 ffb3 	bl	80079c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	695a      	ldr	r2, [r3, #20]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001a68:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f003 fbb0 	bl	80051d4 <USB_ReadInterrupts>
 8001a74:	4603      	mov	r3, r0
 8001a76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a7e:	f040 80b7 	bne.w	8001bf0 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	69fa      	ldr	r2, [r7, #28]
 8001a8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a90:	f023 0301 	bic.w	r3, r3, #1
 8001a94:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2110      	movs	r1, #16
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f002 fb77 	bl	8004190 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001aa6:	e046      	b.n	8001b36 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aaa:	015a      	lsls	r2, r3, #5
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	4413      	add	r3, r2
 8001ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001aba:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001abe:	015a      	lsls	r2, r3, #5
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001acc:	0151      	lsls	r1, r2, #5
 8001ace:	69fa      	ldr	r2, [r7, #28]
 8001ad0:	440a      	add	r2, r1
 8001ad2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001ad6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001ada:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ade:	015a      	lsls	r2, r3, #5
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ae8:	461a      	mov	r2, r3
 8001aea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001aee:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001af2:	015a      	lsls	r2, r3, #5
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	4413      	add	r3, r2
 8001af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b00:	0151      	lsls	r1, r2, #5
 8001b02:	69fa      	ldr	r2, [r7, #28]
 8001b04:	440a      	add	r2, r1
 8001b06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001b0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001b0e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b12:	015a      	lsls	r2, r3, #5
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	4413      	add	r3, r2
 8001b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b20:	0151      	lsls	r1, r2, #5
 8001b22:	69fa      	ldr	r2, [r7, #28]
 8001b24:	440a      	add	r2, r1
 8001b26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001b2a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001b2e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b32:	3301      	adds	r3, #1
 8001b34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d3b3      	bcc.n	8001aa8 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b46:	69db      	ldr	r3, [r3, #28]
 8001b48:	69fa      	ldr	r2, [r7, #28]
 8001b4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b4e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001b52:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d016      	beq.n	8001b8a <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b66:	69fa      	ldr	r2, [r7, #28]
 8001b68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b6c:	f043 030b 	orr.w	r3, r3, #11
 8001b70:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7c:	69fa      	ldr	r2, [r7, #28]
 8001b7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b82:	f043 030b 	orr.w	r3, r3, #11
 8001b86:	6453      	str	r3, [r2, #68]	; 0x44
 8001b88:	e015      	b.n	8001bb6 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b90:	695b      	ldr	r3, [r3, #20]
 8001b92:	69fa      	ldr	r2, [r7, #28]
 8001b94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b98:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b9c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001ba0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ba8:	691b      	ldr	r3, [r3, #16]
 8001baa:	69fa      	ldr	r2, [r7, #28]
 8001bac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bb0:	f043 030b 	orr.w	r3, r3, #11
 8001bb4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	69fa      	ldr	r2, [r7, #28]
 8001bc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bc4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001bc8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6818      	ldr	r0, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001bda:	461a      	mov	r2, r3
 8001bdc:	f003 fbbe 	bl	800535c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	695a      	ldr	r2, [r3, #20]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001bee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f003 faed 	bl	80051d4 <USB_ReadInterrupts>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c04:	d124      	bne.n	8001c50 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f003 fb83 	bl	8005316 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f002 fb38 	bl	800428a <USB_GetDevSpeed>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681c      	ldr	r4, [r3, #0]
 8001c26:	f001 fa29 	bl	800307c <HAL_RCC_GetHCLKFreq>
 8001c2a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	461a      	mov	r2, r3
 8001c34:	4620      	mov	r0, r4
 8001c36:	f002 f837 	bl	8003ca8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f005 fe97 	bl	800796e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	695a      	ldr	r2, [r3, #20]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001c4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f003 fabd 	bl	80051d4 <USB_ReadInterrupts>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	f003 0308 	and.w	r3, r3, #8
 8001c60:	2b08      	cmp	r3, #8
 8001c62:	d10a      	bne.n	8001c7a <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f005 fe74 	bl	8007952 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	695a      	ldr	r2, [r3, #20]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f002 0208 	and.w	r2, r2, #8
 8001c78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f003 faa8 	bl	80051d4 <USB_ReadInterrupts>
 8001c84:	4603      	mov	r3, r0
 8001c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c8a:	2b80      	cmp	r3, #128	; 0x80
 8001c8c:	d122      	bne.n	8001cd4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001c8e:	6a3b      	ldr	r3, [r7, #32]
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c96:	6a3b      	ldr	r3, [r7, #32]
 8001c98:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c9e:	e014      	b.n	8001cca <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001ca0:	6879      	ldr	r1, [r7, #4]
 8001ca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	00db      	lsls	r3, r3, #3
 8001ca8:	4413      	add	r3, r2
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	440b      	add	r3, r1
 8001cae:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d105      	bne.n	8001cc4 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f000 fb27 	bl	8002312 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	627b      	str	r3, [r7, #36]	; 0x24
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d3e5      	bcc.n	8001ca0 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f003 fa7b 	bl	80051d4 <USB_ReadInterrupts>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ce4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ce8:	d13b      	bne.n	8001d62 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001cea:	2301      	movs	r3, #1
 8001cec:	627b      	str	r3, [r7, #36]	; 0x24
 8001cee:	e02b      	b.n	8001d48 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf2:	015a      	lsls	r2, r3, #5
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d00:	6879      	ldr	r1, [r7, #4]
 8001d02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d04:	4613      	mov	r3, r2
 8001d06:	00db      	lsls	r3, r3, #3
 8001d08:	4413      	add	r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	440b      	add	r3, r1
 8001d0e:	3340      	adds	r3, #64	; 0x40
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d115      	bne.n	8001d42 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001d16:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	da12      	bge.n	8001d42 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001d1c:	6879      	ldr	r1, [r7, #4]
 8001d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d20:	4613      	mov	r3, r2
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	4413      	add	r3, r2
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	440b      	add	r3, r1
 8001d2a:	333f      	adds	r3, #63	; 0x3f
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f000 fae8 	bl	8002312 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d44:	3301      	adds	r3, #1
 8001d46:	627b      	str	r3, [r7, #36]	; 0x24
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d3ce      	bcc.n	8001cf0 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	695a      	ldr	r2, [r3, #20]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001d60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f003 fa34 	bl	80051d4 <USB_ReadInterrupts>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001d76:	d155      	bne.n	8001e24 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d78:	2301      	movs	r3, #1
 8001d7a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d7c:	e045      	b.n	8001e0a <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d80:	015a      	lsls	r2, r3, #5
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	4413      	add	r3, r2
 8001d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d8e:	6879      	ldr	r1, [r7, #4]
 8001d90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d92:	4613      	mov	r3, r2
 8001d94:	00db      	lsls	r3, r3, #3
 8001d96:	4413      	add	r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	440b      	add	r3, r1
 8001d9c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d12e      	bne.n	8001e04 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001da6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	da2b      	bge.n	8001e04 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001db8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d121      	bne.n	8001e04 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001dc0:	6879      	ldr	r1, [r7, #4]
 8001dc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	4413      	add	r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	440b      	add	r3, r1
 8001dce:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001dd6:	6a3b      	ldr	r3, [r7, #32]
 8001dd8:	699b      	ldr	r3, [r3, #24]
 8001dda:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001dde:	6a3b      	ldr	r3, [r7, #32]
 8001de0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001de2:	6a3b      	ldr	r3, [r7, #32]
 8001de4:	695b      	ldr	r3, [r3, #20]
 8001de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d10a      	bne.n	8001e04 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	69fa      	ldr	r2, [r7, #28]
 8001df8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001dfc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e00:	6053      	str	r3, [r2, #4]
            break;
 8001e02:	e007      	b.n	8001e14 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e06:	3301      	adds	r3, #1
 8001e08:	627b      	str	r3, [r7, #36]	; 0x24
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d3b4      	bcc.n	8001d7e <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	695a      	ldr	r2, [r3, #20]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001e22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f003 f9d3 	bl	80051d4 <USB_ReadInterrupts>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001e34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e38:	d10a      	bne.n	8001e50 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f005 fe18 	bl	8007a70 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	695a      	ldr	r2, [r3, #20]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001e4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f003 f9bd 	bl	80051d4 <USB_ReadInterrupts>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	f003 0304 	and.w	r3, r3, #4
 8001e60:	2b04      	cmp	r3, #4
 8001e62:	d115      	bne.n	8001e90 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	f003 0304 	and.w	r3, r3, #4
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d002      	beq.n	8001e7c <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f005 fe08 	bl	8007a8c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	6859      	ldr	r1, [r3, #4]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	605a      	str	r2, [r3, #4]
 8001e8c:	e000      	b.n	8001e90 <HAL_PCD_IRQHandler+0x938>
      return;
 8001e8e:	bf00      	nop
    }
  }
}
 8001e90:	3734      	adds	r7, #52	; 0x34
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd90      	pop	{r4, r7, pc}

08001e96 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b082      	sub	sp, #8
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d101      	bne.n	8001eb0 <HAL_PCD_SetAddress+0x1a>
 8001eac:	2302      	movs	r3, #2
 8001eae:	e013      	b.n	8001ed8 <HAL_PCD_SetAddress+0x42>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	78fa      	ldrb	r2, [r7, #3]
 8001ebc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	78fa      	ldrb	r2, [r7, #3]
 8001ec6:	4611      	mov	r1, r2
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f003 f91b 	bl	8005104 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	4608      	mov	r0, r1
 8001eea:	4611      	mov	r1, r2
 8001eec:	461a      	mov	r2, r3
 8001eee:	4603      	mov	r3, r0
 8001ef0:	70fb      	strb	r3, [r7, #3]
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	803b      	strh	r3, [r7, #0]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001efa:	2300      	movs	r3, #0
 8001efc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001efe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	da0f      	bge.n	8001f26 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f06:	78fb      	ldrb	r3, [r7, #3]
 8001f08:	f003 020f 	and.w	r2, r3, #15
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	4413      	add	r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	3338      	adds	r3, #56	; 0x38
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	4413      	add	r3, r2
 8001f1a:	3304      	adds	r3, #4
 8001f1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2201      	movs	r2, #1
 8001f22:	705a      	strb	r2, [r3, #1]
 8001f24:	e00f      	b.n	8001f46 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f26:	78fb      	ldrb	r3, [r7, #3]
 8001f28:	f003 020f 	and.w	r2, r3, #15
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	4413      	add	r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	3304      	adds	r3, #4
 8001f3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2200      	movs	r2, #0
 8001f44:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001f46:	78fb      	ldrb	r3, [r7, #3]
 8001f48:	f003 030f 	and.w	r3, r3, #15
 8001f4c:	b2da      	uxtb	r2, r3
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001f52:	883a      	ldrh	r2, [r7, #0]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	78ba      	ldrb	r2, [r7, #2]
 8001f5c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	785b      	ldrb	r3, [r3, #1]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d004      	beq.n	8001f70 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001f70:	78bb      	ldrb	r3, [r7, #2]
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d102      	bne.n	8001f7c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d101      	bne.n	8001f8a <HAL_PCD_EP_Open+0xaa>
 8001f86:	2302      	movs	r3, #2
 8001f88:	e00e      	b.n	8001fa8 <HAL_PCD_EP_Open+0xc8>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68f9      	ldr	r1, [r7, #12]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f002 f99b 	bl	80042d4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001fa6:	7afb      	ldrb	r3, [r7, #11]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3710      	adds	r7, #16
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	460b      	mov	r3, r1
 8001fba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001fbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	da0f      	bge.n	8001fe4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fc4:	78fb      	ldrb	r3, [r7, #3]
 8001fc6:	f003 020f 	and.w	r2, r3, #15
 8001fca:	4613      	mov	r3, r2
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	4413      	add	r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	3338      	adds	r3, #56	; 0x38
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	3304      	adds	r3, #4
 8001fda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	705a      	strb	r2, [r3, #1]
 8001fe2:	e00f      	b.n	8002004 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fe4:	78fb      	ldrb	r3, [r7, #3]
 8001fe6:	f003 020f 	and.w	r2, r3, #15
 8001fea:	4613      	mov	r3, r2
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	4413      	add	r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	3304      	adds	r3, #4
 8001ffc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2200      	movs	r2, #0
 8002002:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002004:	78fb      	ldrb	r3, [r7, #3]
 8002006:	f003 030f 	and.w	r3, r3, #15
 800200a:	b2da      	uxtb	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002016:	2b01      	cmp	r3, #1
 8002018:	d101      	bne.n	800201e <HAL_PCD_EP_Close+0x6e>
 800201a:	2302      	movs	r3, #2
 800201c:	e00e      	b.n	800203c <HAL_PCD_EP_Close+0x8c>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2201      	movs	r2, #1
 8002022:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68f9      	ldr	r1, [r7, #12]
 800202c:	4618      	mov	r0, r3
 800202e:	f002 f9d9 	bl	80043e4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800203a:	2300      	movs	r3, #0
}
 800203c:	4618      	mov	r0, r3
 800203e:	3710      	adds	r7, #16
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	607a      	str	r2, [r7, #4]
 800204e:	603b      	str	r3, [r7, #0]
 8002050:	460b      	mov	r3, r1
 8002052:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002054:	7afb      	ldrb	r3, [r7, #11]
 8002056:	f003 020f 	and.w	r2, r3, #15
 800205a:	4613      	mov	r3, r2
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	4413      	add	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	4413      	add	r3, r2
 800206a:	3304      	adds	r3, #4
 800206c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	683a      	ldr	r2, [r7, #0]
 8002078:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	2200      	movs	r2, #0
 800207e:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	2200      	movs	r2, #0
 8002084:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002086:	7afb      	ldrb	r3, [r7, #11]
 8002088:	f003 030f 	and.w	r3, r3, #15
 800208c:	b2da      	uxtb	r2, r3
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d102      	bne.n	80020a0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020a0:	7afb      	ldrb	r3, [r7, #11]
 80020a2:	f003 030f 	and.w	r3, r3, #15
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d109      	bne.n	80020be <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6818      	ldr	r0, [r3, #0]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	461a      	mov	r2, r3
 80020b6:	6979      	ldr	r1, [r7, #20]
 80020b8:	f002 fcb8 	bl	8004a2c <USB_EP0StartXfer>
 80020bc:	e008      	b.n	80020d0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6818      	ldr	r0, [r3, #0]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	461a      	mov	r2, r3
 80020ca:	6979      	ldr	r1, [r7, #20]
 80020cc:	f002 fa66 	bl	800459c <USB_EPStartXfer>
  }

  return HAL_OK;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3718      	adds	r7, #24
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020da:	b480      	push	{r7}
 80020dc:	b083      	sub	sp, #12
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
 80020e2:	460b      	mov	r3, r1
 80020e4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80020e6:	78fb      	ldrb	r3, [r7, #3]
 80020e8:	f003 020f 	and.w	r2, r3, #15
 80020ec:	6879      	ldr	r1, [r7, #4]
 80020ee:	4613      	mov	r3, r2
 80020f0:	00db      	lsls	r3, r3, #3
 80020f2:	4413      	add	r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	440b      	add	r3, r1
 80020f8:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80020fc:	681b      	ldr	r3, [r3, #0]
}
 80020fe:	4618      	mov	r0, r3
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr

0800210a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b086      	sub	sp, #24
 800210e:	af00      	add	r7, sp, #0
 8002110:	60f8      	str	r0, [r7, #12]
 8002112:	607a      	str	r2, [r7, #4]
 8002114:	603b      	str	r3, [r7, #0]
 8002116:	460b      	mov	r3, r1
 8002118:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800211a:	7afb      	ldrb	r3, [r7, #11]
 800211c:	f003 020f 	and.w	r2, r3, #15
 8002120:	4613      	mov	r3, r2
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	4413      	add	r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	3338      	adds	r3, #56	; 0x38
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	4413      	add	r3, r2
 800212e:	3304      	adds	r3, #4
 8002130:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	683a      	ldr	r2, [r7, #0]
 800213c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	2200      	movs	r2, #0
 8002142:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	2201      	movs	r2, #1
 8002148:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800214a:	7afb      	ldrb	r3, [r7, #11]
 800214c:	f003 030f 	and.w	r3, r3, #15
 8002150:	b2da      	uxtb	r2, r3
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d102      	bne.n	8002164 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002164:	7afb      	ldrb	r3, [r7, #11]
 8002166:	f003 030f 	and.w	r3, r3, #15
 800216a:	2b00      	cmp	r3, #0
 800216c:	d109      	bne.n	8002182 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6818      	ldr	r0, [r3, #0]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	b2db      	uxtb	r3, r3
 8002178:	461a      	mov	r2, r3
 800217a:	6979      	ldr	r1, [r7, #20]
 800217c:	f002 fc56 	bl	8004a2c <USB_EP0StartXfer>
 8002180:	e008      	b.n	8002194 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6818      	ldr	r0, [r3, #0]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	b2db      	uxtb	r3, r3
 800218c:	461a      	mov	r2, r3
 800218e:	6979      	ldr	r1, [r7, #20]
 8002190:	f002 fa04 	bl	800459c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	3718      	adds	r7, #24
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b084      	sub	sp, #16
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
 80021a6:	460b      	mov	r3, r1
 80021a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80021aa:	78fb      	ldrb	r3, [r7, #3]
 80021ac:	f003 020f 	and.w	r2, r3, #15
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d901      	bls.n	80021bc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e050      	b.n	800225e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80021bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	da0f      	bge.n	80021e4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021c4:	78fb      	ldrb	r3, [r7, #3]
 80021c6:	f003 020f 	and.w	r2, r3, #15
 80021ca:	4613      	mov	r3, r2
 80021cc:	00db      	lsls	r3, r3, #3
 80021ce:	4413      	add	r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	3338      	adds	r3, #56	; 0x38
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	4413      	add	r3, r2
 80021d8:	3304      	adds	r3, #4
 80021da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2201      	movs	r2, #1
 80021e0:	705a      	strb	r2, [r3, #1]
 80021e2:	e00d      	b.n	8002200 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80021e4:	78fa      	ldrb	r2, [r7, #3]
 80021e6:	4613      	mov	r3, r2
 80021e8:	00db      	lsls	r3, r3, #3
 80021ea:	4413      	add	r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	4413      	add	r3, r2
 80021f6:	3304      	adds	r3, #4
 80021f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2200      	movs	r2, #0
 80021fe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2201      	movs	r2, #1
 8002204:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002206:	78fb      	ldrb	r3, [r7, #3]
 8002208:	f003 030f 	and.w	r3, r3, #15
 800220c:	b2da      	uxtb	r2, r3
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002218:	2b01      	cmp	r3, #1
 800221a:	d101      	bne.n	8002220 <HAL_PCD_EP_SetStall+0x82>
 800221c:	2302      	movs	r3, #2
 800221e:	e01e      	b.n	800225e <HAL_PCD_EP_SetStall+0xc0>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68f9      	ldr	r1, [r7, #12]
 800222e:	4618      	mov	r0, r3
 8002230:	f002 fe94 	bl	8004f5c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002234:	78fb      	ldrb	r3, [r7, #3]
 8002236:	f003 030f 	and.w	r3, r3, #15
 800223a:	2b00      	cmp	r3, #0
 800223c:	d10a      	bne.n	8002254 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6818      	ldr	r0, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	b2d9      	uxtb	r1, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800224e:	461a      	mov	r2, r3
 8002250:	f003 f884 	bl	800535c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3710      	adds	r7, #16
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b084      	sub	sp, #16
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
 800226e:	460b      	mov	r3, r1
 8002270:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002272:	78fb      	ldrb	r3, [r7, #3]
 8002274:	f003 020f 	and.w	r2, r3, #15
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	429a      	cmp	r2, r3
 800227e:	d901      	bls.n	8002284 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e042      	b.n	800230a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002284:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002288:	2b00      	cmp	r3, #0
 800228a:	da0f      	bge.n	80022ac <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800228c:	78fb      	ldrb	r3, [r7, #3]
 800228e:	f003 020f 	and.w	r2, r3, #15
 8002292:	4613      	mov	r3, r2
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	4413      	add	r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	3338      	adds	r3, #56	; 0x38
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	4413      	add	r3, r2
 80022a0:	3304      	adds	r3, #4
 80022a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2201      	movs	r2, #1
 80022a8:	705a      	strb	r2, [r3, #1]
 80022aa:	e00f      	b.n	80022cc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022ac:	78fb      	ldrb	r3, [r7, #3]
 80022ae:	f003 020f 	and.w	r2, r3, #15
 80022b2:	4613      	mov	r3, r2
 80022b4:	00db      	lsls	r3, r3, #3
 80022b6:	4413      	add	r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	4413      	add	r3, r2
 80022c2:	3304      	adds	r3, #4
 80022c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2200      	movs	r2, #0
 80022ca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2200      	movs	r2, #0
 80022d0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022d2:	78fb      	ldrb	r3, [r7, #3]
 80022d4:	f003 030f 	and.w	r3, r3, #15
 80022d8:	b2da      	uxtb	r2, r3
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d101      	bne.n	80022ec <HAL_PCD_EP_ClrStall+0x86>
 80022e8:	2302      	movs	r3, #2
 80022ea:	e00e      	b.n	800230a <HAL_PCD_EP_ClrStall+0xa4>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	68f9      	ldr	r1, [r7, #12]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f002 fe9c 	bl	8005038 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3710      	adds	r7, #16
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b084      	sub	sp, #16
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
 800231a:	460b      	mov	r3, r1
 800231c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800231e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002322:	2b00      	cmp	r3, #0
 8002324:	da0c      	bge.n	8002340 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002326:	78fb      	ldrb	r3, [r7, #3]
 8002328:	f003 020f 	and.w	r2, r3, #15
 800232c:	4613      	mov	r3, r2
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	4413      	add	r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	3338      	adds	r3, #56	; 0x38
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	4413      	add	r3, r2
 800233a:	3304      	adds	r3, #4
 800233c:	60fb      	str	r3, [r7, #12]
 800233e:	e00c      	b.n	800235a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002340:	78fb      	ldrb	r3, [r7, #3]
 8002342:	f003 020f 	and.w	r2, r3, #15
 8002346:	4613      	mov	r3, r2
 8002348:	00db      	lsls	r3, r3, #3
 800234a:	4413      	add	r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	4413      	add	r3, r2
 8002356:	3304      	adds	r3, #4
 8002358:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	68f9      	ldr	r1, [r7, #12]
 8002360:	4618      	mov	r0, r3
 8002362:	f002 fcbb 	bl	8004cdc <USB_EPStopXfer>
 8002366:	4603      	mov	r3, r0
 8002368:	72fb      	strb	r3, [r7, #11]

  return ret;
 800236a:	7afb      	ldrb	r3, [r7, #11]
}
 800236c:	4618      	mov	r0, r3
 800236e:	3710      	adds	r7, #16
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b08a      	sub	sp, #40	; 0x28
 8002378:	af02      	add	r7, sp, #8
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	4613      	mov	r3, r2
 800238c:	00db      	lsls	r3, r3, #3
 800238e:	4413      	add	r3, r2
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	3338      	adds	r3, #56	; 0x38
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	4413      	add	r3, r2
 8002398:	3304      	adds	r3, #4
 800239a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6a1a      	ldr	r2, [r3, #32]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d901      	bls.n	80023ac <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e06c      	b.n	8002486 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	699a      	ldr	r2, [r3, #24]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6a1b      	ldr	r3, [r3, #32]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	69fa      	ldr	r2, [r7, #28]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d902      	bls.n	80023c8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	3303      	adds	r3, #3
 80023cc:	089b      	lsrs	r3, r3, #2
 80023ce:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80023d0:	e02b      	b.n	800242a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	699a      	ldr	r2, [r3, #24]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6a1b      	ldr	r3, [r3, #32]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	69fa      	ldr	r2, [r7, #28]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d902      	bls.n	80023ee <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	3303      	adds	r3, #3
 80023f2:	089b      	lsrs	r3, r3, #2
 80023f4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6919      	ldr	r1, [r3, #16]
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	b2da      	uxtb	r2, r3
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002406:	b2db      	uxtb	r3, r3
 8002408:	9300      	str	r3, [sp, #0]
 800240a:	4603      	mov	r3, r0
 800240c:	6978      	ldr	r0, [r7, #20]
 800240e:	f002 fd0f 	bl	8004e30 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	691a      	ldr	r2, [r3, #16]
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	441a      	add	r2, r3
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6a1a      	ldr	r2, [r3, #32]
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	441a      	add	r2, r3
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	015a      	lsls	r2, r3, #5
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	4413      	add	r3, r2
 8002432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002436:	699b      	ldr	r3, [r3, #24]
 8002438:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	429a      	cmp	r2, r3
 800243e:	d809      	bhi.n	8002454 <PCD_WriteEmptyTxFifo+0xe0>
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6a1a      	ldr	r2, [r3, #32]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002448:	429a      	cmp	r2, r3
 800244a:	d203      	bcs.n	8002454 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d1be      	bne.n	80023d2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	699a      	ldr	r2, [r3, #24]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6a1b      	ldr	r3, [r3, #32]
 800245c:	429a      	cmp	r2, r3
 800245e:	d811      	bhi.n	8002484 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	f003 030f 	and.w	r3, r3, #15
 8002466:	2201      	movs	r2, #1
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002474:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	43db      	mvns	r3, r3
 800247a:	6939      	ldr	r1, [r7, #16]
 800247c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002480:	4013      	ands	r3, r2
 8002482:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3720      	adds	r7, #32
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
	...

08002490 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b088      	sub	sp, #32
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	333c      	adds	r3, #60	; 0x3c
 80024a8:	3304      	adds	r3, #4
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	015a      	lsls	r2, r3, #5
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	4413      	add	r3, r2
 80024b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d17b      	bne.n	80025be <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	f003 0308 	and.w	r3, r3, #8
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d015      	beq.n	80024fc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	4a61      	ldr	r2, [pc, #388]	; (8002658 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	f240 80b9 	bls.w	800264c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	f000 80b3 	beq.w	800264c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	015a      	lsls	r2, r3, #5
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	4413      	add	r3, r2
 80024ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024f2:	461a      	mov	r2, r3
 80024f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024f8:	6093      	str	r3, [r2, #8]
 80024fa:	e0a7      	b.n	800264c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	f003 0320 	and.w	r3, r3, #32
 8002502:	2b00      	cmp	r3, #0
 8002504:	d009      	beq.n	800251a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	015a      	lsls	r2, r3, #5
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	4413      	add	r3, r2
 800250e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002512:	461a      	mov	r2, r3
 8002514:	2320      	movs	r3, #32
 8002516:	6093      	str	r3, [r2, #8]
 8002518:	e098      	b.n	800264c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002520:	2b00      	cmp	r3, #0
 8002522:	f040 8093 	bne.w	800264c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	4a4b      	ldr	r2, [pc, #300]	; (8002658 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d90f      	bls.n	800254e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002534:	2b00      	cmp	r3, #0
 8002536:	d00a      	beq.n	800254e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	015a      	lsls	r2, r3, #5
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	4413      	add	r3, r2
 8002540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002544:	461a      	mov	r2, r3
 8002546:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800254a:	6093      	str	r3, [r2, #8]
 800254c:	e07e      	b.n	800264c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800254e:	683a      	ldr	r2, [r7, #0]
 8002550:	4613      	mov	r3, r2
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	4413      	add	r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	4413      	add	r3, r2
 8002560:	3304      	adds	r3, #4
 8002562:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	69da      	ldr	r2, [r3, #28]
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	0159      	lsls	r1, r3, #5
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	440b      	add	r3, r1
 8002570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800257a:	1ad2      	subs	r2, r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d114      	bne.n	80025b0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d109      	bne.n	80025a2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6818      	ldr	r0, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002598:	461a      	mov	r2, r3
 800259a:	2101      	movs	r1, #1
 800259c:	f002 fede 	bl	800535c <USB_EP0_OutStart>
 80025a0:	e006      	b.n	80025b0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	691a      	ldr	r2, [r3, #16]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	441a      	add	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	4619      	mov	r1, r3
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f005 f996 	bl	80078e8 <HAL_PCD_DataOutStageCallback>
 80025bc:	e046      	b.n	800264c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	4a26      	ldr	r2, [pc, #152]	; (800265c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d124      	bne.n	8002610 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d00a      	beq.n	80025e6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	015a      	lsls	r2, r3, #5
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	4413      	add	r3, r2
 80025d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025dc:	461a      	mov	r2, r3
 80025de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025e2:	6093      	str	r3, [r2, #8]
 80025e4:	e032      	b.n	800264c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	f003 0320 	and.w	r3, r3, #32
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d008      	beq.n	8002602 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	015a      	lsls	r2, r3, #5
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	4413      	add	r3, r2
 80025f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025fc:	461a      	mov	r2, r3
 80025fe:	2320      	movs	r3, #32
 8002600:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	b2db      	uxtb	r3, r3
 8002606:	4619      	mov	r1, r3
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f005 f96d 	bl	80078e8 <HAL_PCD_DataOutStageCallback>
 800260e:	e01d      	b.n	800264c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d114      	bne.n	8002640 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002616:	6879      	ldr	r1, [r7, #4]
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	4613      	mov	r3, r2
 800261c:	00db      	lsls	r3, r3, #3
 800261e:	4413      	add	r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	440b      	add	r3, r1
 8002624:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d108      	bne.n	8002640 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6818      	ldr	r0, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002638:	461a      	mov	r2, r3
 800263a:	2100      	movs	r1, #0
 800263c:	f002 fe8e 	bl	800535c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	b2db      	uxtb	r3, r3
 8002644:	4619      	mov	r1, r3
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f005 f94e 	bl	80078e8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3720      	adds	r7, #32
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	4f54300a 	.word	0x4f54300a
 800265c:	4f54310a 	.word	0x4f54310a

08002660 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	333c      	adds	r3, #60	; 0x3c
 8002678:	3304      	adds	r3, #4
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	015a      	lsls	r2, r3, #5
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	4413      	add	r3, r2
 8002686:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	4a15      	ldr	r2, [pc, #84]	; (80026e8 <PCD_EP_OutSetupPacket_int+0x88>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d90e      	bls.n	80026b4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800269c:	2b00      	cmp	r3, #0
 800269e:	d009      	beq.n	80026b4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	015a      	lsls	r2, r3, #5
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	4413      	add	r3, r2
 80026a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026ac:	461a      	mov	r2, r3
 80026ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026b2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f005 f905 	bl	80078c4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	4a0a      	ldr	r2, [pc, #40]	; (80026e8 <PCD_EP_OutSetupPacket_int+0x88>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d90c      	bls.n	80026dc <PCD_EP_OutSetupPacket_int+0x7c>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d108      	bne.n	80026dc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6818      	ldr	r0, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80026d4:	461a      	mov	r2, r3
 80026d6:	2101      	movs	r1, #1
 80026d8:	f002 fe40 	bl	800535c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3718      	adds	r7, #24
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	4f54300a 	.word	0x4f54300a

080026ec <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	460b      	mov	r3, r1
 80026f6:	70fb      	strb	r3, [r7, #3]
 80026f8:	4613      	mov	r3, r2
 80026fa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002702:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002704:	78fb      	ldrb	r3, [r7, #3]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d107      	bne.n	800271a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800270a:	883b      	ldrh	r3, [r7, #0]
 800270c:	0419      	lsls	r1, r3, #16
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68ba      	ldr	r2, [r7, #8]
 8002714:	430a      	orrs	r2, r1
 8002716:	629a      	str	r2, [r3, #40]	; 0x28
 8002718:	e028      	b.n	800276c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002720:	0c1b      	lsrs	r3, r3, #16
 8002722:	68ba      	ldr	r2, [r7, #8]
 8002724:	4413      	add	r3, r2
 8002726:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002728:	2300      	movs	r3, #0
 800272a:	73fb      	strb	r3, [r7, #15]
 800272c:	e00d      	b.n	800274a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	7bfb      	ldrb	r3, [r7, #15]
 8002734:	3340      	adds	r3, #64	; 0x40
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	4413      	add	r3, r2
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	0c1b      	lsrs	r3, r3, #16
 800273e:	68ba      	ldr	r2, [r7, #8]
 8002740:	4413      	add	r3, r2
 8002742:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002744:	7bfb      	ldrb	r3, [r7, #15]
 8002746:	3301      	adds	r3, #1
 8002748:	73fb      	strb	r3, [r7, #15]
 800274a:	7bfa      	ldrb	r2, [r7, #15]
 800274c:	78fb      	ldrb	r3, [r7, #3]
 800274e:	3b01      	subs	r3, #1
 8002750:	429a      	cmp	r2, r3
 8002752:	d3ec      	bcc.n	800272e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002754:	883b      	ldrh	r3, [r7, #0]
 8002756:	0418      	lsls	r0, r3, #16
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6819      	ldr	r1, [r3, #0]
 800275c:	78fb      	ldrb	r3, [r7, #3]
 800275e:	3b01      	subs	r3, #1
 8002760:	68ba      	ldr	r2, [r7, #8]
 8002762:	4302      	orrs	r2, r0
 8002764:	3340      	adds	r3, #64	; 0x40
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	440b      	add	r3, r1
 800276a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3714      	adds	r7, #20
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr

0800277a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800277a:	b480      	push	{r7}
 800277c:	b083      	sub	sp, #12
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
 8002782:	460b      	mov	r3, r1
 8002784:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	887a      	ldrh	r2, [r7, #2]
 800278c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	460b      	mov	r3, r1
 80027a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b086      	sub	sp, #24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d101      	bne.n	80027c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e267      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d075      	beq.n	80028be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027d2:	4b88      	ldr	r3, [pc, #544]	; (80029f4 <HAL_RCC_OscConfig+0x240>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f003 030c 	and.w	r3, r3, #12
 80027da:	2b04      	cmp	r3, #4
 80027dc:	d00c      	beq.n	80027f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027de:	4b85      	ldr	r3, [pc, #532]	; (80029f4 <HAL_RCC_OscConfig+0x240>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027e6:	2b08      	cmp	r3, #8
 80027e8:	d112      	bne.n	8002810 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027ea:	4b82      	ldr	r3, [pc, #520]	; (80029f4 <HAL_RCC_OscConfig+0x240>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027f6:	d10b      	bne.n	8002810 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027f8:	4b7e      	ldr	r3, [pc, #504]	; (80029f4 <HAL_RCC_OscConfig+0x240>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d05b      	beq.n	80028bc <HAL_RCC_OscConfig+0x108>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d157      	bne.n	80028bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e242      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002818:	d106      	bne.n	8002828 <HAL_RCC_OscConfig+0x74>
 800281a:	4b76      	ldr	r3, [pc, #472]	; (80029f4 <HAL_RCC_OscConfig+0x240>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a75      	ldr	r2, [pc, #468]	; (80029f4 <HAL_RCC_OscConfig+0x240>)
 8002820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002824:	6013      	str	r3, [r2, #0]
 8002826:	e01d      	b.n	8002864 <HAL_RCC_OscConfig+0xb0>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002830:	d10c      	bne.n	800284c <HAL_RCC_OscConfig+0x98>
 8002832:	4b70      	ldr	r3, [pc, #448]	; (80029f4 <HAL_RCC_OscConfig+0x240>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a6f      	ldr	r2, [pc, #444]	; (80029f4 <HAL_RCC_OscConfig+0x240>)
 8002838:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800283c:	6013      	str	r3, [r2, #0]
 800283e:	4b6d      	ldr	r3, [pc, #436]	; (80029f4 <HAL_RCC_OscConfig+0x240>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a6c      	ldr	r2, [pc, #432]	; (80029f4 <HAL_RCC_OscConfig+0x240>)
 8002844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002848:	6013      	str	r3, [r2, #0]
 800284a:	e00b      	b.n	8002864 <HAL_RCC_OscConfig+0xb0>
 800284c:	4b69      	ldr	r3, [pc, #420]	; (80029f4 <HAL_RCC_OscConfig+0x240>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a68      	ldr	r2, [pc, #416]	; (80029f4 <HAL_RCC_OscConfig+0x240>)
 8002852:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002856:	6013      	str	r3, [r2, #0]
 8002858:	4b66      	ldr	r3, [pc, #408]	; (80029f4 <HAL_RCC_OscConfig+0x240>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a65      	ldr	r2, [pc, #404]	; (80029f4 <HAL_RCC_OscConfig+0x240>)
 800285e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002862:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d013      	beq.n	8002894 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800286c:	f7fe fa14 	bl	8000c98 <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002874:	f7fe fa10 	bl	8000c98 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b64      	cmp	r3, #100	; 0x64
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e207      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002886:	4b5b      	ldr	r3, [pc, #364]	; (80029f4 <HAL_RCC_OscConfig+0x240>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d0f0      	beq.n	8002874 <HAL_RCC_OscConfig+0xc0>
 8002892:	e014      	b.n	80028be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002894:	f7fe fa00 	bl	8000c98 <HAL_GetTick>
 8002898:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800289a:	e008      	b.n	80028ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800289c:	f7fe f9fc 	bl	8000c98 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b64      	cmp	r3, #100	; 0x64
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e1f3      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ae:	4b51      	ldr	r3, [pc, #324]	; (80029f4 <HAL_RCC_OscConfig+0x240>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1f0      	bne.n	800289c <HAL_RCC_OscConfig+0xe8>
 80028ba:	e000      	b.n	80028be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d063      	beq.n	8002992 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028ca:	4b4a      	ldr	r3, [pc, #296]	; (80029f4 <HAL_RCC_OscConfig+0x240>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 030c 	and.w	r3, r3, #12
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00b      	beq.n	80028ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028d6:	4b47      	ldr	r3, [pc, #284]	; (80029f4 <HAL_RCC_OscConfig+0x240>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028de:	2b08      	cmp	r3, #8
 80028e0:	d11c      	bne.n	800291c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028e2:	4b44      	ldr	r3, [pc, #272]	; (80029f4 <HAL_RCC_OscConfig+0x240>)
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d116      	bne.n	800291c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ee:	4b41      	ldr	r3, [pc, #260]	; (80029f4 <HAL_RCC_OscConfig+0x240>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d005      	beq.n	8002906 <HAL_RCC_OscConfig+0x152>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d001      	beq.n	8002906 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e1c7      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002906:	4b3b      	ldr	r3, [pc, #236]	; (80029f4 <HAL_RCC_OscConfig+0x240>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	00db      	lsls	r3, r3, #3
 8002914:	4937      	ldr	r1, [pc, #220]	; (80029f4 <HAL_RCC_OscConfig+0x240>)
 8002916:	4313      	orrs	r3, r2
 8002918:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800291a:	e03a      	b.n	8002992 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d020      	beq.n	8002966 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002924:	4b34      	ldr	r3, [pc, #208]	; (80029f8 <HAL_RCC_OscConfig+0x244>)
 8002926:	2201      	movs	r2, #1
 8002928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292a:	f7fe f9b5 	bl	8000c98 <HAL_GetTick>
 800292e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002930:	e008      	b.n	8002944 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002932:	f7fe f9b1 	bl	8000c98 <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	2b02      	cmp	r3, #2
 800293e:	d901      	bls.n	8002944 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e1a8      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002944:	4b2b      	ldr	r3, [pc, #172]	; (80029f4 <HAL_RCC_OscConfig+0x240>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0302 	and.w	r3, r3, #2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d0f0      	beq.n	8002932 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002950:	4b28      	ldr	r3, [pc, #160]	; (80029f4 <HAL_RCC_OscConfig+0x240>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	4925      	ldr	r1, [pc, #148]	; (80029f4 <HAL_RCC_OscConfig+0x240>)
 8002960:	4313      	orrs	r3, r2
 8002962:	600b      	str	r3, [r1, #0]
 8002964:	e015      	b.n	8002992 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002966:	4b24      	ldr	r3, [pc, #144]	; (80029f8 <HAL_RCC_OscConfig+0x244>)
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800296c:	f7fe f994 	bl	8000c98 <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002974:	f7fe f990 	bl	8000c98 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e187      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002986:	4b1b      	ldr	r3, [pc, #108]	; (80029f4 <HAL_RCC_OscConfig+0x240>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1f0      	bne.n	8002974 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0308 	and.w	r3, r3, #8
 800299a:	2b00      	cmp	r3, #0
 800299c:	d036      	beq.n	8002a0c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	695b      	ldr	r3, [r3, #20]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d016      	beq.n	80029d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029a6:	4b15      	ldr	r3, [pc, #84]	; (80029fc <HAL_RCC_OscConfig+0x248>)
 80029a8:	2201      	movs	r2, #1
 80029aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ac:	f7fe f974 	bl	8000c98 <HAL_GetTick>
 80029b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029b2:	e008      	b.n	80029c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029b4:	f7fe f970 	bl	8000c98 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e167      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029c6:	4b0b      	ldr	r3, [pc, #44]	; (80029f4 <HAL_RCC_OscConfig+0x240>)
 80029c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d0f0      	beq.n	80029b4 <HAL_RCC_OscConfig+0x200>
 80029d2:	e01b      	b.n	8002a0c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029d4:	4b09      	ldr	r3, [pc, #36]	; (80029fc <HAL_RCC_OscConfig+0x248>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029da:	f7fe f95d 	bl	8000c98 <HAL_GetTick>
 80029de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029e0:	e00e      	b.n	8002a00 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029e2:	f7fe f959 	bl	8000c98 <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d907      	bls.n	8002a00 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e150      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
 80029f4:	40023800 	.word	0x40023800
 80029f8:	42470000 	.word	0x42470000
 80029fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a00:	4b88      	ldr	r3, [pc, #544]	; (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002a02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1ea      	bne.n	80029e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0304 	and.w	r3, r3, #4
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	f000 8097 	beq.w	8002b48 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a1e:	4b81      	ldr	r3, [pc, #516]	; (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d10f      	bne.n	8002a4a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60bb      	str	r3, [r7, #8]
 8002a2e:	4b7d      	ldr	r3, [pc, #500]	; (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a32:	4a7c      	ldr	r2, [pc, #496]	; (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a38:	6413      	str	r3, [r2, #64]	; 0x40
 8002a3a:	4b7a      	ldr	r3, [pc, #488]	; (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a42:	60bb      	str	r3, [r7, #8]
 8002a44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a46:	2301      	movs	r3, #1
 8002a48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a4a:	4b77      	ldr	r3, [pc, #476]	; (8002c28 <HAL_RCC_OscConfig+0x474>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d118      	bne.n	8002a88 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a56:	4b74      	ldr	r3, [pc, #464]	; (8002c28 <HAL_RCC_OscConfig+0x474>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a73      	ldr	r2, [pc, #460]	; (8002c28 <HAL_RCC_OscConfig+0x474>)
 8002a5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a62:	f7fe f919 	bl	8000c98 <HAL_GetTick>
 8002a66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a68:	e008      	b.n	8002a7c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a6a:	f7fe f915 	bl	8000c98 <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d901      	bls.n	8002a7c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e10c      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a7c:	4b6a      	ldr	r3, [pc, #424]	; (8002c28 <HAL_RCC_OscConfig+0x474>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d0f0      	beq.n	8002a6a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d106      	bne.n	8002a9e <HAL_RCC_OscConfig+0x2ea>
 8002a90:	4b64      	ldr	r3, [pc, #400]	; (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a94:	4a63      	ldr	r2, [pc, #396]	; (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002a96:	f043 0301 	orr.w	r3, r3, #1
 8002a9a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a9c:	e01c      	b.n	8002ad8 <HAL_RCC_OscConfig+0x324>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	2b05      	cmp	r3, #5
 8002aa4:	d10c      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x30c>
 8002aa6:	4b5f      	ldr	r3, [pc, #380]	; (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aaa:	4a5e      	ldr	r2, [pc, #376]	; (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002aac:	f043 0304 	orr.w	r3, r3, #4
 8002ab0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ab2:	4b5c      	ldr	r3, [pc, #368]	; (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab6:	4a5b      	ldr	r2, [pc, #364]	; (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002ab8:	f043 0301 	orr.w	r3, r3, #1
 8002abc:	6713      	str	r3, [r2, #112]	; 0x70
 8002abe:	e00b      	b.n	8002ad8 <HAL_RCC_OscConfig+0x324>
 8002ac0:	4b58      	ldr	r3, [pc, #352]	; (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac4:	4a57      	ldr	r2, [pc, #348]	; (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002ac6:	f023 0301 	bic.w	r3, r3, #1
 8002aca:	6713      	str	r3, [r2, #112]	; 0x70
 8002acc:	4b55      	ldr	r3, [pc, #340]	; (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad0:	4a54      	ldr	r2, [pc, #336]	; (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002ad2:	f023 0304 	bic.w	r3, r3, #4
 8002ad6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d015      	beq.n	8002b0c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ae0:	f7fe f8da 	bl	8000c98 <HAL_GetTick>
 8002ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ae6:	e00a      	b.n	8002afe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ae8:	f7fe f8d6 	bl	8000c98 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e0cb      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002afe:	4b49      	ldr	r3, [pc, #292]	; (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d0ee      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x334>
 8002b0a:	e014      	b.n	8002b36 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b0c:	f7fe f8c4 	bl	8000c98 <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b12:	e00a      	b.n	8002b2a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b14:	f7fe f8c0 	bl	8000c98 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e0b5      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b2a:	4b3e      	ldr	r3, [pc, #248]	; (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1ee      	bne.n	8002b14 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b36:	7dfb      	ldrb	r3, [r7, #23]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d105      	bne.n	8002b48 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b3c:	4b39      	ldr	r3, [pc, #228]	; (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b40:	4a38      	ldr	r2, [pc, #224]	; (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002b42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b46:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	f000 80a1 	beq.w	8002c94 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b52:	4b34      	ldr	r3, [pc, #208]	; (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f003 030c 	and.w	r3, r3, #12
 8002b5a:	2b08      	cmp	r3, #8
 8002b5c:	d05c      	beq.n	8002c18 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d141      	bne.n	8002bea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b66:	4b31      	ldr	r3, [pc, #196]	; (8002c2c <HAL_RCC_OscConfig+0x478>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b6c:	f7fe f894 	bl	8000c98 <HAL_GetTick>
 8002b70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b72:	e008      	b.n	8002b86 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b74:	f7fe f890 	bl	8000c98 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e087      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b86:	4b27      	ldr	r3, [pc, #156]	; (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1f0      	bne.n	8002b74 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	69da      	ldr	r2, [r3, #28]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a1b      	ldr	r3, [r3, #32]
 8002b9a:	431a      	orrs	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba0:	019b      	lsls	r3, r3, #6
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba8:	085b      	lsrs	r3, r3, #1
 8002baa:	3b01      	subs	r3, #1
 8002bac:	041b      	lsls	r3, r3, #16
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb4:	061b      	lsls	r3, r3, #24
 8002bb6:	491b      	ldr	r1, [pc, #108]	; (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bbc:	4b1b      	ldr	r3, [pc, #108]	; (8002c2c <HAL_RCC_OscConfig+0x478>)
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc2:	f7fe f869 	bl	8000c98 <HAL_GetTick>
 8002bc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bc8:	e008      	b.n	8002bdc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bca:	f7fe f865 	bl	8000c98 <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d901      	bls.n	8002bdc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e05c      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bdc:	4b11      	ldr	r3, [pc, #68]	; (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d0f0      	beq.n	8002bca <HAL_RCC_OscConfig+0x416>
 8002be8:	e054      	b.n	8002c94 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bea:	4b10      	ldr	r3, [pc, #64]	; (8002c2c <HAL_RCC_OscConfig+0x478>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf0:	f7fe f852 	bl	8000c98 <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bf8:	f7fe f84e 	bl	8000c98 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e045      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c0a:	4b06      	ldr	r3, [pc, #24]	; (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1f0      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x444>
 8002c16:	e03d      	b.n	8002c94 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d107      	bne.n	8002c30 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e038      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
 8002c24:	40023800 	.word	0x40023800
 8002c28:	40007000 	.word	0x40007000
 8002c2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c30:	4b1b      	ldr	r3, [pc, #108]	; (8002ca0 <HAL_RCC_OscConfig+0x4ec>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d028      	beq.n	8002c90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d121      	bne.n	8002c90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d11a      	bne.n	8002c90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c60:	4013      	ands	r3, r2
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d111      	bne.n	8002c90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c76:	085b      	lsrs	r3, r3, #1
 8002c78:	3b01      	subs	r3, #1
 8002c7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d107      	bne.n	8002c90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d001      	beq.n	8002c94 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e000      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3718      	adds	r7, #24
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	40023800 	.word	0x40023800

08002ca4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d101      	bne.n	8002cb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e0cc      	b.n	8002e52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cb8:	4b68      	ldr	r3, [pc, #416]	; (8002e5c <HAL_RCC_ClockConfig+0x1b8>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0307 	and.w	r3, r3, #7
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d90c      	bls.n	8002ce0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cc6:	4b65      	ldr	r3, [pc, #404]	; (8002e5c <HAL_RCC_ClockConfig+0x1b8>)
 8002cc8:	683a      	ldr	r2, [r7, #0]
 8002cca:	b2d2      	uxtb	r2, r2
 8002ccc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cce:	4b63      	ldr	r3, [pc, #396]	; (8002e5c <HAL_RCC_ClockConfig+0x1b8>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0307 	and.w	r3, r3, #7
 8002cd6:	683a      	ldr	r2, [r7, #0]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d001      	beq.n	8002ce0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e0b8      	b.n	8002e52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0302 	and.w	r3, r3, #2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d020      	beq.n	8002d2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0304 	and.w	r3, r3, #4
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d005      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cf8:	4b59      	ldr	r3, [pc, #356]	; (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	4a58      	ldr	r2, [pc, #352]	; (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0308 	and.w	r3, r3, #8
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d005      	beq.n	8002d1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d10:	4b53      	ldr	r3, [pc, #332]	; (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	4a52      	ldr	r2, [pc, #328]	; (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002d16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d1c:	4b50      	ldr	r3, [pc, #320]	; (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	494d      	ldr	r1, [pc, #308]	; (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d044      	beq.n	8002dc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d107      	bne.n	8002d52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d42:	4b47      	ldr	r3, [pc, #284]	; (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d119      	bne.n	8002d82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e07f      	b.n	8002e52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d003      	beq.n	8002d62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d5e:	2b03      	cmp	r3, #3
 8002d60:	d107      	bne.n	8002d72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d62:	4b3f      	ldr	r3, [pc, #252]	; (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d109      	bne.n	8002d82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e06f      	b.n	8002e52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d72:	4b3b      	ldr	r3, [pc, #236]	; (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e067      	b.n	8002e52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d82:	4b37      	ldr	r3, [pc, #220]	; (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f023 0203 	bic.w	r2, r3, #3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	4934      	ldr	r1, [pc, #208]	; (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d94:	f7fd ff80 	bl	8000c98 <HAL_GetTick>
 8002d98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d9a:	e00a      	b.n	8002db2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d9c:	f7fd ff7c 	bl	8000c98 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e04f      	b.n	8002e52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002db2:	4b2b      	ldr	r3, [pc, #172]	; (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f003 020c 	and.w	r2, r3, #12
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d1eb      	bne.n	8002d9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dc4:	4b25      	ldr	r3, [pc, #148]	; (8002e5c <HAL_RCC_ClockConfig+0x1b8>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0307 	and.w	r3, r3, #7
 8002dcc:	683a      	ldr	r2, [r7, #0]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d20c      	bcs.n	8002dec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dd2:	4b22      	ldr	r3, [pc, #136]	; (8002e5c <HAL_RCC_ClockConfig+0x1b8>)
 8002dd4:	683a      	ldr	r2, [r7, #0]
 8002dd6:	b2d2      	uxtb	r2, r2
 8002dd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dda:	4b20      	ldr	r3, [pc, #128]	; (8002e5c <HAL_RCC_ClockConfig+0x1b8>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0307 	and.w	r3, r3, #7
 8002de2:	683a      	ldr	r2, [r7, #0]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d001      	beq.n	8002dec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e032      	b.n	8002e52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0304 	and.w	r3, r3, #4
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d008      	beq.n	8002e0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002df8:	4b19      	ldr	r3, [pc, #100]	; (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	4916      	ldr	r1, [pc, #88]	; (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0308 	and.w	r3, r3, #8
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d009      	beq.n	8002e2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e16:	4b12      	ldr	r3, [pc, #72]	; (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	490e      	ldr	r1, [pc, #56]	; (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e2a:	f000 f821 	bl	8002e70 <HAL_RCC_GetSysClockFreq>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	4b0b      	ldr	r3, [pc, #44]	; (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	091b      	lsrs	r3, r3, #4
 8002e36:	f003 030f 	and.w	r3, r3, #15
 8002e3a:	490a      	ldr	r1, [pc, #40]	; (8002e64 <HAL_RCC_ClockConfig+0x1c0>)
 8002e3c:	5ccb      	ldrb	r3, [r1, r3]
 8002e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e42:	4a09      	ldr	r2, [pc, #36]	; (8002e68 <HAL_RCC_ClockConfig+0x1c4>)
 8002e44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e46:	4b09      	ldr	r3, [pc, #36]	; (8002e6c <HAL_RCC_ClockConfig+0x1c8>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7fd fee0 	bl	8000c10 <HAL_InitTick>

  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3710      	adds	r7, #16
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	40023c00 	.word	0x40023c00
 8002e60:	40023800 	.word	0x40023800
 8002e64:	0800882c 	.word	0x0800882c
 8002e68:	20000000 	.word	0x20000000
 8002e6c:	20000004 	.word	0x20000004

08002e70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e74:	b094      	sub	sp, #80	; 0x50
 8002e76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	647b      	str	r3, [r7, #68]	; 0x44
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e80:	2300      	movs	r3, #0
 8002e82:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002e84:	2300      	movs	r3, #0
 8002e86:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e88:	4b79      	ldr	r3, [pc, #484]	; (8003070 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f003 030c 	and.w	r3, r3, #12
 8002e90:	2b08      	cmp	r3, #8
 8002e92:	d00d      	beq.n	8002eb0 <HAL_RCC_GetSysClockFreq+0x40>
 8002e94:	2b08      	cmp	r3, #8
 8002e96:	f200 80e1 	bhi.w	800305c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d002      	beq.n	8002ea4 <HAL_RCC_GetSysClockFreq+0x34>
 8002e9e:	2b04      	cmp	r3, #4
 8002ea0:	d003      	beq.n	8002eaa <HAL_RCC_GetSysClockFreq+0x3a>
 8002ea2:	e0db      	b.n	800305c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ea4:	4b73      	ldr	r3, [pc, #460]	; (8003074 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ea6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002ea8:	e0db      	b.n	8003062 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002eaa:	4b73      	ldr	r3, [pc, #460]	; (8003078 <HAL_RCC_GetSysClockFreq+0x208>)
 8002eac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002eae:	e0d8      	b.n	8003062 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002eb0:	4b6f      	ldr	r3, [pc, #444]	; (8003070 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002eb8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002eba:	4b6d      	ldr	r3, [pc, #436]	; (8003070 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d063      	beq.n	8002f8e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ec6:	4b6a      	ldr	r3, [pc, #424]	; (8003070 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	099b      	lsrs	r3, r3, #6
 8002ecc:	2200      	movs	r2, #0
 8002ece:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ed0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ed4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ed8:	633b      	str	r3, [r7, #48]	; 0x30
 8002eda:	2300      	movs	r3, #0
 8002edc:	637b      	str	r3, [r7, #52]	; 0x34
 8002ede:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002ee2:	4622      	mov	r2, r4
 8002ee4:	462b      	mov	r3, r5
 8002ee6:	f04f 0000 	mov.w	r0, #0
 8002eea:	f04f 0100 	mov.w	r1, #0
 8002eee:	0159      	lsls	r1, r3, #5
 8002ef0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ef4:	0150      	lsls	r0, r2, #5
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	460b      	mov	r3, r1
 8002efa:	4621      	mov	r1, r4
 8002efc:	1a51      	subs	r1, r2, r1
 8002efe:	6139      	str	r1, [r7, #16]
 8002f00:	4629      	mov	r1, r5
 8002f02:	eb63 0301 	sbc.w	r3, r3, r1
 8002f06:	617b      	str	r3, [r7, #20]
 8002f08:	f04f 0200 	mov.w	r2, #0
 8002f0c:	f04f 0300 	mov.w	r3, #0
 8002f10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f14:	4659      	mov	r1, fp
 8002f16:	018b      	lsls	r3, r1, #6
 8002f18:	4651      	mov	r1, sl
 8002f1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f1e:	4651      	mov	r1, sl
 8002f20:	018a      	lsls	r2, r1, #6
 8002f22:	4651      	mov	r1, sl
 8002f24:	ebb2 0801 	subs.w	r8, r2, r1
 8002f28:	4659      	mov	r1, fp
 8002f2a:	eb63 0901 	sbc.w	r9, r3, r1
 8002f2e:	f04f 0200 	mov.w	r2, #0
 8002f32:	f04f 0300 	mov.w	r3, #0
 8002f36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f42:	4690      	mov	r8, r2
 8002f44:	4699      	mov	r9, r3
 8002f46:	4623      	mov	r3, r4
 8002f48:	eb18 0303 	adds.w	r3, r8, r3
 8002f4c:	60bb      	str	r3, [r7, #8]
 8002f4e:	462b      	mov	r3, r5
 8002f50:	eb49 0303 	adc.w	r3, r9, r3
 8002f54:	60fb      	str	r3, [r7, #12]
 8002f56:	f04f 0200 	mov.w	r2, #0
 8002f5a:	f04f 0300 	mov.w	r3, #0
 8002f5e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f62:	4629      	mov	r1, r5
 8002f64:	024b      	lsls	r3, r1, #9
 8002f66:	4621      	mov	r1, r4
 8002f68:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f6c:	4621      	mov	r1, r4
 8002f6e:	024a      	lsls	r2, r1, #9
 8002f70:	4610      	mov	r0, r2
 8002f72:	4619      	mov	r1, r3
 8002f74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f76:	2200      	movs	r2, #0
 8002f78:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f7c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f80:	f7fd f97e 	bl	8000280 <__aeabi_uldivmod>
 8002f84:	4602      	mov	r2, r0
 8002f86:	460b      	mov	r3, r1
 8002f88:	4613      	mov	r3, r2
 8002f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f8c:	e058      	b.n	8003040 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f8e:	4b38      	ldr	r3, [pc, #224]	; (8003070 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	099b      	lsrs	r3, r3, #6
 8002f94:	2200      	movs	r2, #0
 8002f96:	4618      	mov	r0, r3
 8002f98:	4611      	mov	r1, r2
 8002f9a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f9e:	623b      	str	r3, [r7, #32]
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	627b      	str	r3, [r7, #36]	; 0x24
 8002fa4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002fa8:	4642      	mov	r2, r8
 8002faa:	464b      	mov	r3, r9
 8002fac:	f04f 0000 	mov.w	r0, #0
 8002fb0:	f04f 0100 	mov.w	r1, #0
 8002fb4:	0159      	lsls	r1, r3, #5
 8002fb6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fba:	0150      	lsls	r0, r2, #5
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	4641      	mov	r1, r8
 8002fc2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002fc6:	4649      	mov	r1, r9
 8002fc8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002fcc:	f04f 0200 	mov.w	r2, #0
 8002fd0:	f04f 0300 	mov.w	r3, #0
 8002fd4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002fd8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002fdc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002fe0:	ebb2 040a 	subs.w	r4, r2, sl
 8002fe4:	eb63 050b 	sbc.w	r5, r3, fp
 8002fe8:	f04f 0200 	mov.w	r2, #0
 8002fec:	f04f 0300 	mov.w	r3, #0
 8002ff0:	00eb      	lsls	r3, r5, #3
 8002ff2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ff6:	00e2      	lsls	r2, r4, #3
 8002ff8:	4614      	mov	r4, r2
 8002ffa:	461d      	mov	r5, r3
 8002ffc:	4643      	mov	r3, r8
 8002ffe:	18e3      	adds	r3, r4, r3
 8003000:	603b      	str	r3, [r7, #0]
 8003002:	464b      	mov	r3, r9
 8003004:	eb45 0303 	adc.w	r3, r5, r3
 8003008:	607b      	str	r3, [r7, #4]
 800300a:	f04f 0200 	mov.w	r2, #0
 800300e:	f04f 0300 	mov.w	r3, #0
 8003012:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003016:	4629      	mov	r1, r5
 8003018:	028b      	lsls	r3, r1, #10
 800301a:	4621      	mov	r1, r4
 800301c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003020:	4621      	mov	r1, r4
 8003022:	028a      	lsls	r2, r1, #10
 8003024:	4610      	mov	r0, r2
 8003026:	4619      	mov	r1, r3
 8003028:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800302a:	2200      	movs	r2, #0
 800302c:	61bb      	str	r3, [r7, #24]
 800302e:	61fa      	str	r2, [r7, #28]
 8003030:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003034:	f7fd f924 	bl	8000280 <__aeabi_uldivmod>
 8003038:	4602      	mov	r2, r0
 800303a:	460b      	mov	r3, r1
 800303c:	4613      	mov	r3, r2
 800303e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003040:	4b0b      	ldr	r3, [pc, #44]	; (8003070 <HAL_RCC_GetSysClockFreq+0x200>)
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	0c1b      	lsrs	r3, r3, #16
 8003046:	f003 0303 	and.w	r3, r3, #3
 800304a:	3301      	adds	r3, #1
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003050:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003052:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003054:	fbb2 f3f3 	udiv	r3, r2, r3
 8003058:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800305a:	e002      	b.n	8003062 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800305c:	4b05      	ldr	r3, [pc, #20]	; (8003074 <HAL_RCC_GetSysClockFreq+0x204>)
 800305e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003060:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003062:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003064:	4618      	mov	r0, r3
 8003066:	3750      	adds	r7, #80	; 0x50
 8003068:	46bd      	mov	sp, r7
 800306a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800306e:	bf00      	nop
 8003070:	40023800 	.word	0x40023800
 8003074:	00f42400 	.word	0x00f42400
 8003078:	007a1200 	.word	0x007a1200

0800307c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003080:	4b03      	ldr	r3, [pc, #12]	; (8003090 <HAL_RCC_GetHCLKFreq+0x14>)
 8003082:	681b      	ldr	r3, [r3, #0]
}
 8003084:	4618      	mov	r0, r3
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	20000000 	.word	0x20000000

08003094 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d101      	bne.n	80030a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e07b      	b.n	800319e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d108      	bne.n	80030c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030b6:	d009      	beq.n	80030cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	61da      	str	r2, [r3, #28]
 80030be:	e005      	b.n	80030cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d106      	bne.n	80030ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f7fd fc7a 	bl	80009e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2202      	movs	r2, #2
 80030f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003102:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003114:	431a      	orrs	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800311e:	431a      	orrs	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	f003 0302 	and.w	r3, r3, #2
 8003128:	431a      	orrs	r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	431a      	orrs	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800313c:	431a      	orrs	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	69db      	ldr	r3, [r3, #28]
 8003142:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003146:	431a      	orrs	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a1b      	ldr	r3, [r3, #32]
 800314c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003150:	ea42 0103 	orr.w	r1, r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003158:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	430a      	orrs	r2, r1
 8003162:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	0c1b      	lsrs	r3, r3, #16
 800316a:	f003 0104 	and.w	r1, r3, #4
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003172:	f003 0210 	and.w	r2, r3, #16
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	430a      	orrs	r2, r1
 800317c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	69da      	ldr	r2, [r3, #28]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800318c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b088      	sub	sp, #32
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	60f8      	str	r0, [r7, #12]
 80031ae:	60b9      	str	r1, [r7, #8]
 80031b0:	603b      	str	r3, [r7, #0]
 80031b2:	4613      	mov	r3, r2
 80031b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80031b6:	2300      	movs	r3, #0
 80031b8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d101      	bne.n	80031c8 <HAL_SPI_Transmit+0x22>
 80031c4:	2302      	movs	r3, #2
 80031c6:	e126      	b.n	8003416 <HAL_SPI_Transmit+0x270>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031d0:	f7fd fd62 	bl	8000c98 <HAL_GetTick>
 80031d4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80031d6:	88fb      	ldrh	r3, [r7, #6]
 80031d8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d002      	beq.n	80031ec <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80031e6:	2302      	movs	r3, #2
 80031e8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80031ea:	e10b      	b.n	8003404 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d002      	beq.n	80031f8 <HAL_SPI_Transmit+0x52>
 80031f2:	88fb      	ldrh	r3, [r7, #6]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d102      	bne.n	80031fe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80031fc:	e102      	b.n	8003404 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2203      	movs	r2, #3
 8003202:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2200      	movs	r2, #0
 800320a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	68ba      	ldr	r2, [r7, #8]
 8003210:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	88fa      	ldrh	r2, [r7, #6]
 8003216:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	88fa      	ldrh	r2, [r7, #6]
 800321c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2200      	movs	r2, #0
 8003234:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2200      	movs	r2, #0
 800323a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003244:	d10f      	bne.n	8003266 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003254:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003264:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003270:	2b40      	cmp	r3, #64	; 0x40
 8003272:	d007      	beq.n	8003284 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003282:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800328c:	d14b      	bne.n	8003326 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d002      	beq.n	800329c <HAL_SPI_Transmit+0xf6>
 8003296:	8afb      	ldrh	r3, [r7, #22]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d13e      	bne.n	800331a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a0:	881a      	ldrh	r2, [r3, #0]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ac:	1c9a      	adds	r2, r3, #2
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	3b01      	subs	r3, #1
 80032ba:	b29a      	uxth	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80032c0:	e02b      	b.n	800331a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f003 0302 	and.w	r3, r3, #2
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d112      	bne.n	80032f6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d4:	881a      	ldrh	r2, [r3, #0]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e0:	1c9a      	adds	r2, r3, #2
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	3b01      	subs	r3, #1
 80032ee:	b29a      	uxth	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	86da      	strh	r2, [r3, #54]	; 0x36
 80032f4:	e011      	b.n	800331a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032f6:	f7fd fccf 	bl	8000c98 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	683a      	ldr	r2, [r7, #0]
 8003302:	429a      	cmp	r2, r3
 8003304:	d803      	bhi.n	800330e <HAL_SPI_Transmit+0x168>
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800330c:	d102      	bne.n	8003314 <HAL_SPI_Transmit+0x16e>
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d102      	bne.n	800331a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003318:	e074      	b.n	8003404 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800331e:	b29b      	uxth	r3, r3
 8003320:	2b00      	cmp	r3, #0
 8003322:	d1ce      	bne.n	80032c2 <HAL_SPI_Transmit+0x11c>
 8003324:	e04c      	b.n	80033c0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d002      	beq.n	8003334 <HAL_SPI_Transmit+0x18e>
 800332e:	8afb      	ldrh	r3, [r7, #22]
 8003330:	2b01      	cmp	r3, #1
 8003332:	d140      	bne.n	80033b6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	330c      	adds	r3, #12
 800333e:	7812      	ldrb	r2, [r2, #0]
 8003340:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003346:	1c5a      	adds	r2, r3, #1
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003350:	b29b      	uxth	r3, r3
 8003352:	3b01      	subs	r3, #1
 8003354:	b29a      	uxth	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800335a:	e02c      	b.n	80033b6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b02      	cmp	r3, #2
 8003368:	d113      	bne.n	8003392 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	330c      	adds	r3, #12
 8003374:	7812      	ldrb	r2, [r2, #0]
 8003376:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337c:	1c5a      	adds	r2, r3, #1
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003386:	b29b      	uxth	r3, r3
 8003388:	3b01      	subs	r3, #1
 800338a:	b29a      	uxth	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003390:	e011      	b.n	80033b6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003392:	f7fd fc81 	bl	8000c98 <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	683a      	ldr	r2, [r7, #0]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d803      	bhi.n	80033aa <HAL_SPI_Transmit+0x204>
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a8:	d102      	bne.n	80033b0 <HAL_SPI_Transmit+0x20a>
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d102      	bne.n	80033b6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80033b4:	e026      	b.n	8003404 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d1cd      	bne.n	800335c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	6839      	ldr	r1, [r7, #0]
 80033c4:	68f8      	ldr	r0, [r7, #12]
 80033c6:	f000 fbcb 	bl	8003b60 <SPI_EndRxTxTransaction>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d002      	beq.n	80033d6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2220      	movs	r2, #32
 80033d4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10a      	bne.n	80033f4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033de:	2300      	movs	r3, #0
 80033e0:	613b      	str	r3, [r7, #16]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	613b      	str	r3, [r7, #16]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	613b      	str	r3, [r7, #16]
 80033f2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d002      	beq.n	8003402 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	77fb      	strb	r3, [r7, #31]
 8003400:	e000      	b.n	8003404 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003402:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003414:	7ffb      	ldrb	r3, [r7, #31]
}
 8003416:	4618      	mov	r0, r3
 8003418:	3720      	adds	r7, #32
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}

0800341e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800341e:	b580      	push	{r7, lr}
 8003420:	b088      	sub	sp, #32
 8003422:	af02      	add	r7, sp, #8
 8003424:	60f8      	str	r0, [r7, #12]
 8003426:	60b9      	str	r1, [r7, #8]
 8003428:	603b      	str	r3, [r7, #0]
 800342a:	4613      	mov	r3, r2
 800342c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800342e:	2300      	movs	r3, #0
 8003430:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800343a:	d112      	bne.n	8003462 <HAL_SPI_Receive+0x44>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d10e      	bne.n	8003462 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2204      	movs	r2, #4
 8003448:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800344c:	88fa      	ldrh	r2, [r7, #6]
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	9300      	str	r3, [sp, #0]
 8003452:	4613      	mov	r3, r2
 8003454:	68ba      	ldr	r2, [r7, #8]
 8003456:	68b9      	ldr	r1, [r7, #8]
 8003458:	68f8      	ldr	r0, [r7, #12]
 800345a:	f000 f8f1 	bl	8003640 <HAL_SPI_TransmitReceive>
 800345e:	4603      	mov	r3, r0
 8003460:	e0ea      	b.n	8003638 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003468:	2b01      	cmp	r3, #1
 800346a:	d101      	bne.n	8003470 <HAL_SPI_Receive+0x52>
 800346c:	2302      	movs	r3, #2
 800346e:	e0e3      	b.n	8003638 <HAL_SPI_Receive+0x21a>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003478:	f7fd fc0e 	bl	8000c98 <HAL_GetTick>
 800347c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b01      	cmp	r3, #1
 8003488:	d002      	beq.n	8003490 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800348a:	2302      	movs	r3, #2
 800348c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800348e:	e0ca      	b.n	8003626 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d002      	beq.n	800349c <HAL_SPI_Receive+0x7e>
 8003496:	88fb      	ldrh	r3, [r7, #6]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d102      	bne.n	80034a2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	75fb      	strb	r3, [r7, #23]
    goto error;
 80034a0:	e0c1      	b.n	8003626 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2204      	movs	r2, #4
 80034a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2200      	movs	r2, #0
 80034ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	68ba      	ldr	r2, [r7, #8]
 80034b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	88fa      	ldrh	r2, [r7, #6]
 80034ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	88fa      	ldrh	r2, [r7, #6]
 80034c0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2200      	movs	r2, #0
 80034de:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034e8:	d10f      	bne.n	800350a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034f8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003508:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003514:	2b40      	cmp	r3, #64	; 0x40
 8003516:	d007      	beq.n	8003528 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003526:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d162      	bne.n	80035f6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003530:	e02e      	b.n	8003590 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f003 0301 	and.w	r3, r3, #1
 800353c:	2b01      	cmp	r3, #1
 800353e:	d115      	bne.n	800356c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f103 020c 	add.w	r2, r3, #12
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800354c:	7812      	ldrb	r2, [r2, #0]
 800354e:	b2d2      	uxtb	r2, r2
 8003550:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003556:	1c5a      	adds	r2, r3, #1
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003560:	b29b      	uxth	r3, r3
 8003562:	3b01      	subs	r3, #1
 8003564:	b29a      	uxth	r2, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	87da      	strh	r2, [r3, #62]	; 0x3e
 800356a:	e011      	b.n	8003590 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800356c:	f7fd fb94 	bl	8000c98 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	683a      	ldr	r2, [r7, #0]
 8003578:	429a      	cmp	r2, r3
 800357a:	d803      	bhi.n	8003584 <HAL_SPI_Receive+0x166>
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003582:	d102      	bne.n	800358a <HAL_SPI_Receive+0x16c>
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d102      	bne.n	8003590 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800358e:	e04a      	b.n	8003626 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003594:	b29b      	uxth	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1cb      	bne.n	8003532 <HAL_SPI_Receive+0x114>
 800359a:	e031      	b.n	8003600 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d113      	bne.n	80035d2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	68da      	ldr	r2, [r3, #12]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b4:	b292      	uxth	r2, r2
 80035b6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035bc:	1c9a      	adds	r2, r3, #2
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	3b01      	subs	r3, #1
 80035ca:	b29a      	uxth	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80035d0:	e011      	b.n	80035f6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035d2:	f7fd fb61 	bl	8000c98 <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	683a      	ldr	r2, [r7, #0]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d803      	bhi.n	80035ea <HAL_SPI_Receive+0x1cc>
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e8:	d102      	bne.n	80035f0 <HAL_SPI_Receive+0x1d2>
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d102      	bne.n	80035f6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80035f4:	e017      	b.n	8003626 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d1cd      	bne.n	800359c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	6839      	ldr	r1, [r7, #0]
 8003604:	68f8      	ldr	r0, [r7, #12]
 8003606:	f000 fa45 	bl	8003a94 <SPI_EndRxTransaction>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d002      	beq.n	8003616 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2220      	movs	r2, #32
 8003614:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800361a:	2b00      	cmp	r3, #0
 800361c:	d002      	beq.n	8003624 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	75fb      	strb	r3, [r7, #23]
 8003622:	e000      	b.n	8003626 <HAL_SPI_Receive+0x208>
  }

error :
 8003624:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2201      	movs	r2, #1
 800362a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003636:	7dfb      	ldrb	r3, [r7, #23]
}
 8003638:	4618      	mov	r0, r3
 800363a:	3718      	adds	r7, #24
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b08c      	sub	sp, #48	; 0x30
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]
 800364c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800364e:	2301      	movs	r3, #1
 8003650:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003652:	2300      	movs	r3, #0
 8003654:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800365e:	2b01      	cmp	r3, #1
 8003660:	d101      	bne.n	8003666 <HAL_SPI_TransmitReceive+0x26>
 8003662:	2302      	movs	r3, #2
 8003664:	e18a      	b.n	800397c <HAL_SPI_TransmitReceive+0x33c>
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2201      	movs	r2, #1
 800366a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800366e:	f7fd fb13 	bl	8000c98 <HAL_GetTick>
 8003672:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800367a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003684:	887b      	ldrh	r3, [r7, #2]
 8003686:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003688:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800368c:	2b01      	cmp	r3, #1
 800368e:	d00f      	beq.n	80036b0 <HAL_SPI_TransmitReceive+0x70>
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003696:	d107      	bne.n	80036a8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d103      	bne.n	80036a8 <HAL_SPI_TransmitReceive+0x68>
 80036a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80036a4:	2b04      	cmp	r3, #4
 80036a6:	d003      	beq.n	80036b0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80036a8:	2302      	movs	r3, #2
 80036aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80036ae:	e15b      	b.n	8003968 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d005      	beq.n	80036c2 <HAL_SPI_TransmitReceive+0x82>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d002      	beq.n	80036c2 <HAL_SPI_TransmitReceive+0x82>
 80036bc:	887b      	ldrh	r3, [r7, #2]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d103      	bne.n	80036ca <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80036c8:	e14e      	b.n	8003968 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b04      	cmp	r3, #4
 80036d4:	d003      	beq.n	80036de <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2205      	movs	r2, #5
 80036da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	887a      	ldrh	r2, [r7, #2]
 80036ee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	887a      	ldrh	r2, [r7, #2]
 80036f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	68ba      	ldr	r2, [r7, #8]
 80036fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	887a      	ldrh	r2, [r7, #2]
 8003700:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	887a      	ldrh	r2, [r7, #2]
 8003706:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2200      	movs	r2, #0
 800370c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800371e:	2b40      	cmp	r3, #64	; 0x40
 8003720:	d007      	beq.n	8003732 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003730:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800373a:	d178      	bne.n	800382e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d002      	beq.n	800374a <HAL_SPI_TransmitReceive+0x10a>
 8003744:	8b7b      	ldrh	r3, [r7, #26]
 8003746:	2b01      	cmp	r3, #1
 8003748:	d166      	bne.n	8003818 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374e:	881a      	ldrh	r2, [r3, #0]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375a:	1c9a      	adds	r2, r3, #2
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003764:	b29b      	uxth	r3, r3
 8003766:	3b01      	subs	r3, #1
 8003768:	b29a      	uxth	r2, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800376e:	e053      	b.n	8003818 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b02      	cmp	r3, #2
 800377c:	d11b      	bne.n	80037b6 <HAL_SPI_TransmitReceive+0x176>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003782:	b29b      	uxth	r3, r3
 8003784:	2b00      	cmp	r3, #0
 8003786:	d016      	beq.n	80037b6 <HAL_SPI_TransmitReceive+0x176>
 8003788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800378a:	2b01      	cmp	r3, #1
 800378c:	d113      	bne.n	80037b6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003792:	881a      	ldrh	r2, [r3, #0]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379e:	1c9a      	adds	r2, r3, #2
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	3b01      	subs	r3, #1
 80037ac:	b29a      	uxth	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80037b2:	2300      	movs	r3, #0
 80037b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f003 0301 	and.w	r3, r3, #1
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d119      	bne.n	80037f8 <HAL_SPI_TransmitReceive+0x1b8>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d014      	beq.n	80037f8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68da      	ldr	r2, [r3, #12]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d8:	b292      	uxth	r2, r2
 80037da:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e0:	1c9a      	adds	r2, r3, #2
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	3b01      	subs	r3, #1
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80037f4:	2301      	movs	r3, #1
 80037f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80037f8:	f7fd fa4e 	bl	8000c98 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003804:	429a      	cmp	r2, r3
 8003806:	d807      	bhi.n	8003818 <HAL_SPI_TransmitReceive+0x1d8>
 8003808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800380a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800380e:	d003      	beq.n	8003818 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003816:	e0a7      	b.n	8003968 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800381c:	b29b      	uxth	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1a6      	bne.n	8003770 <HAL_SPI_TransmitReceive+0x130>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003826:	b29b      	uxth	r3, r3
 8003828:	2b00      	cmp	r3, #0
 800382a:	d1a1      	bne.n	8003770 <HAL_SPI_TransmitReceive+0x130>
 800382c:	e07c      	b.n	8003928 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d002      	beq.n	800383c <HAL_SPI_TransmitReceive+0x1fc>
 8003836:	8b7b      	ldrh	r3, [r7, #26]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d16b      	bne.n	8003914 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	330c      	adds	r3, #12
 8003846:	7812      	ldrb	r2, [r2, #0]
 8003848:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384e:	1c5a      	adds	r2, r3, #1
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003858:	b29b      	uxth	r3, r3
 800385a:	3b01      	subs	r3, #1
 800385c:	b29a      	uxth	r2, r3
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003862:	e057      	b.n	8003914 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	2b02      	cmp	r3, #2
 8003870:	d11c      	bne.n	80038ac <HAL_SPI_TransmitReceive+0x26c>
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003876:	b29b      	uxth	r3, r3
 8003878:	2b00      	cmp	r3, #0
 800387a:	d017      	beq.n	80038ac <HAL_SPI_TransmitReceive+0x26c>
 800387c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800387e:	2b01      	cmp	r3, #1
 8003880:	d114      	bne.n	80038ac <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	330c      	adds	r3, #12
 800388c:	7812      	ldrb	r2, [r2, #0]
 800388e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003894:	1c5a      	adds	r2, r3, #1
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800389e:	b29b      	uxth	r3, r3
 80038a0:	3b01      	subs	r3, #1
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038a8:	2300      	movs	r3, #0
 80038aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d119      	bne.n	80038ee <HAL_SPI_TransmitReceive+0x2ae>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038be:	b29b      	uxth	r3, r3
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d014      	beq.n	80038ee <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68da      	ldr	r2, [r3, #12]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ce:	b2d2      	uxtb	r2, r2
 80038d0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d6:	1c5a      	adds	r2, r3, #1
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	3b01      	subs	r3, #1
 80038e4:	b29a      	uxth	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80038ea:	2301      	movs	r3, #1
 80038ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80038ee:	f7fd f9d3 	bl	8000c98 <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d803      	bhi.n	8003906 <HAL_SPI_TransmitReceive+0x2c6>
 80038fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003904:	d102      	bne.n	800390c <HAL_SPI_TransmitReceive+0x2cc>
 8003906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003908:	2b00      	cmp	r3, #0
 800390a:	d103      	bne.n	8003914 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003912:	e029      	b.n	8003968 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003918:	b29b      	uxth	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1a2      	bne.n	8003864 <HAL_SPI_TransmitReceive+0x224>
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003922:	b29b      	uxth	r3, r3
 8003924:	2b00      	cmp	r3, #0
 8003926:	d19d      	bne.n	8003864 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800392a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800392c:	68f8      	ldr	r0, [r7, #12]
 800392e:	f000 f917 	bl	8003b60 <SPI_EndRxTxTransaction>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d006      	beq.n	8003946 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2220      	movs	r2, #32
 8003942:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003944:	e010      	b.n	8003968 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d10b      	bne.n	8003966 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800394e:	2300      	movs	r3, #0
 8003950:	617b      	str	r3, [r7, #20]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	617b      	str	r3, [r7, #20]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	617b      	str	r3, [r7, #20]
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	e000      	b.n	8003968 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003966:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003978:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800397c:	4618      	mov	r0, r3
 800397e:	3730      	adds	r7, #48	; 0x30
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b088      	sub	sp, #32
 8003988:	af00      	add	r7, sp, #0
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	603b      	str	r3, [r7, #0]
 8003990:	4613      	mov	r3, r2
 8003992:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003994:	f7fd f980 	bl	8000c98 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800399c:	1a9b      	subs	r3, r3, r2
 800399e:	683a      	ldr	r2, [r7, #0]
 80039a0:	4413      	add	r3, r2
 80039a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80039a4:	f7fd f978 	bl	8000c98 <HAL_GetTick>
 80039a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80039aa:	4b39      	ldr	r3, [pc, #228]	; (8003a90 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	015b      	lsls	r3, r3, #5
 80039b0:	0d1b      	lsrs	r3, r3, #20
 80039b2:	69fa      	ldr	r2, [r7, #28]
 80039b4:	fb02 f303 	mul.w	r3, r2, r3
 80039b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80039ba:	e054      	b.n	8003a66 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039c2:	d050      	beq.n	8003a66 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80039c4:	f7fd f968 	bl	8000c98 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	69fa      	ldr	r2, [r7, #28]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d902      	bls.n	80039da <SPI_WaitFlagStateUntilTimeout+0x56>
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d13d      	bne.n	8003a56 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	685a      	ldr	r2, [r3, #4]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80039e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039f2:	d111      	bne.n	8003a18 <SPI_WaitFlagStateUntilTimeout+0x94>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039fc:	d004      	beq.n	8003a08 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a06:	d107      	bne.n	8003a18 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a16:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a20:	d10f      	bne.n	8003a42 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a30:	601a      	str	r2, [r3, #0]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a40:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2201      	movs	r2, #1
 8003a46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e017      	b.n	8003a86 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d101      	bne.n	8003a60 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	3b01      	subs	r3, #1
 8003a64:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	689a      	ldr	r2, [r3, #8]
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	4013      	ands	r3, r2
 8003a70:	68ba      	ldr	r2, [r7, #8]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	bf0c      	ite	eq
 8003a76:	2301      	moveq	r3, #1
 8003a78:	2300      	movne	r3, #0
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	79fb      	ldrb	r3, [r7, #7]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d19b      	bne.n	80039bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3720      	adds	r7, #32
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	20000000 	.word	0x20000000

08003a94 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b086      	sub	sp, #24
 8003a98:	af02      	add	r7, sp, #8
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003aa8:	d111      	bne.n	8003ace <SPI_EndRxTransaction+0x3a>
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ab2:	d004      	beq.n	8003abe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003abc:	d107      	bne.n	8003ace <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003acc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ad6:	d12a      	bne.n	8003b2e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ae0:	d012      	beq.n	8003b08 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	9300      	str	r3, [sp, #0]
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	2180      	movs	r1, #128	; 0x80
 8003aec:	68f8      	ldr	r0, [r7, #12]
 8003aee:	f7ff ff49 	bl	8003984 <SPI_WaitFlagStateUntilTimeout>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d02d      	beq.n	8003b54 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003afc:	f043 0220 	orr.w	r2, r3, #32
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e026      	b.n	8003b56 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	9300      	str	r3, [sp, #0]
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	2101      	movs	r1, #1
 8003b12:	68f8      	ldr	r0, [r7, #12]
 8003b14:	f7ff ff36 	bl	8003984 <SPI_WaitFlagStateUntilTimeout>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d01a      	beq.n	8003b54 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b22:	f043 0220 	orr.w	r2, r3, #32
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e013      	b.n	8003b56 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	9300      	str	r3, [sp, #0]
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	2200      	movs	r2, #0
 8003b36:	2101      	movs	r1, #1
 8003b38:	68f8      	ldr	r0, [r7, #12]
 8003b3a:	f7ff ff23 	bl	8003984 <SPI_WaitFlagStateUntilTimeout>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d007      	beq.n	8003b54 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b48:	f043 0220 	orr.w	r2, r3, #32
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	e000      	b.n	8003b56 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
	...

08003b60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b088      	sub	sp, #32
 8003b64:	af02      	add	r7, sp, #8
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003b6c:	4b1b      	ldr	r3, [pc, #108]	; (8003bdc <SPI_EndRxTxTransaction+0x7c>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a1b      	ldr	r2, [pc, #108]	; (8003be0 <SPI_EndRxTxTransaction+0x80>)
 8003b72:	fba2 2303 	umull	r2, r3, r2, r3
 8003b76:	0d5b      	lsrs	r3, r3, #21
 8003b78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003b7c:	fb02 f303 	mul.w	r3, r2, r3
 8003b80:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b8a:	d112      	bne.n	8003bb2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	9300      	str	r3, [sp, #0]
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	2200      	movs	r2, #0
 8003b94:	2180      	movs	r1, #128	; 0x80
 8003b96:	68f8      	ldr	r0, [r7, #12]
 8003b98:	f7ff fef4 	bl	8003984 <SPI_WaitFlagStateUntilTimeout>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d016      	beq.n	8003bd0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ba6:	f043 0220 	orr.w	r2, r3, #32
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e00f      	b.n	8003bd2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00a      	beq.n	8003bce <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bc8:	2b80      	cmp	r3, #128	; 0x80
 8003bca:	d0f2      	beq.n	8003bb2 <SPI_EndRxTxTransaction+0x52>
 8003bcc:	e000      	b.n	8003bd0 <SPI_EndRxTxTransaction+0x70>
        break;
 8003bce:	bf00      	nop
  }

  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3718      	adds	r7, #24
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	20000000 	.word	0x20000000
 8003be0:	165e9f81 	.word	0x165e9f81

08003be4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003be4:	b084      	sub	sp, #16
 8003be6:	b580      	push	{r7, lr}
 8003be8:	b084      	sub	sp, #16
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
 8003bee:	f107 001c 	add.w	r0, r7, #28
 8003bf2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d122      	bne.n	8003c42 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c00:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003c10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003c24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d105      	bne.n	8003c36 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f001 fbee 	bl	8005418 <USB_CoreReset>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	73fb      	strb	r3, [r7, #15]
 8003c40:	e01a      	b.n	8003c78 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f001 fbe2 	bl	8005418 <USB_CoreReset>
 8003c54:	4603      	mov	r3, r0
 8003c56:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003c58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d106      	bne.n	8003c6c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c62:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	639a      	str	r2, [r3, #56]	; 0x38
 8003c6a:	e005      	b.n	8003c78 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c70:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d10b      	bne.n	8003c96 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f043 0206 	orr.w	r2, r3, #6
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f043 0220 	orr.w	r2, r3, #32
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3710      	adds	r7, #16
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ca2:	b004      	add	sp, #16
 8003ca4:	4770      	bx	lr
	...

08003ca8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b087      	sub	sp, #28
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003cb6:	79fb      	ldrb	r3, [r7, #7]
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d165      	bne.n	8003d88 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	4a41      	ldr	r2, [pc, #260]	; (8003dc4 <USB_SetTurnaroundTime+0x11c>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d906      	bls.n	8003cd2 <USB_SetTurnaroundTime+0x2a>
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	4a40      	ldr	r2, [pc, #256]	; (8003dc8 <USB_SetTurnaroundTime+0x120>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d202      	bcs.n	8003cd2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003ccc:	230f      	movs	r3, #15
 8003cce:	617b      	str	r3, [r7, #20]
 8003cd0:	e062      	b.n	8003d98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	4a3c      	ldr	r2, [pc, #240]	; (8003dc8 <USB_SetTurnaroundTime+0x120>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d306      	bcc.n	8003ce8 <USB_SetTurnaroundTime+0x40>
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	4a3b      	ldr	r2, [pc, #236]	; (8003dcc <USB_SetTurnaroundTime+0x124>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d202      	bcs.n	8003ce8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003ce2:	230e      	movs	r3, #14
 8003ce4:	617b      	str	r3, [r7, #20]
 8003ce6:	e057      	b.n	8003d98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	4a38      	ldr	r2, [pc, #224]	; (8003dcc <USB_SetTurnaroundTime+0x124>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d306      	bcc.n	8003cfe <USB_SetTurnaroundTime+0x56>
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	4a37      	ldr	r2, [pc, #220]	; (8003dd0 <USB_SetTurnaroundTime+0x128>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d202      	bcs.n	8003cfe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003cf8:	230d      	movs	r3, #13
 8003cfa:	617b      	str	r3, [r7, #20]
 8003cfc:	e04c      	b.n	8003d98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	4a33      	ldr	r2, [pc, #204]	; (8003dd0 <USB_SetTurnaroundTime+0x128>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d306      	bcc.n	8003d14 <USB_SetTurnaroundTime+0x6c>
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	4a32      	ldr	r2, [pc, #200]	; (8003dd4 <USB_SetTurnaroundTime+0x12c>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d802      	bhi.n	8003d14 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003d0e:	230c      	movs	r3, #12
 8003d10:	617b      	str	r3, [r7, #20]
 8003d12:	e041      	b.n	8003d98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	4a2f      	ldr	r2, [pc, #188]	; (8003dd4 <USB_SetTurnaroundTime+0x12c>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d906      	bls.n	8003d2a <USB_SetTurnaroundTime+0x82>
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	4a2e      	ldr	r2, [pc, #184]	; (8003dd8 <USB_SetTurnaroundTime+0x130>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d802      	bhi.n	8003d2a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003d24:	230b      	movs	r3, #11
 8003d26:	617b      	str	r3, [r7, #20]
 8003d28:	e036      	b.n	8003d98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	4a2a      	ldr	r2, [pc, #168]	; (8003dd8 <USB_SetTurnaroundTime+0x130>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d906      	bls.n	8003d40 <USB_SetTurnaroundTime+0x98>
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	4a29      	ldr	r2, [pc, #164]	; (8003ddc <USB_SetTurnaroundTime+0x134>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d802      	bhi.n	8003d40 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003d3a:	230a      	movs	r3, #10
 8003d3c:	617b      	str	r3, [r7, #20]
 8003d3e:	e02b      	b.n	8003d98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	4a26      	ldr	r2, [pc, #152]	; (8003ddc <USB_SetTurnaroundTime+0x134>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d906      	bls.n	8003d56 <USB_SetTurnaroundTime+0xae>
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	4a25      	ldr	r2, [pc, #148]	; (8003de0 <USB_SetTurnaroundTime+0x138>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d202      	bcs.n	8003d56 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003d50:	2309      	movs	r3, #9
 8003d52:	617b      	str	r3, [r7, #20]
 8003d54:	e020      	b.n	8003d98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	4a21      	ldr	r2, [pc, #132]	; (8003de0 <USB_SetTurnaroundTime+0x138>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d306      	bcc.n	8003d6c <USB_SetTurnaroundTime+0xc4>
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	4a20      	ldr	r2, [pc, #128]	; (8003de4 <USB_SetTurnaroundTime+0x13c>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d802      	bhi.n	8003d6c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003d66:	2308      	movs	r3, #8
 8003d68:	617b      	str	r3, [r7, #20]
 8003d6a:	e015      	b.n	8003d98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	4a1d      	ldr	r2, [pc, #116]	; (8003de4 <USB_SetTurnaroundTime+0x13c>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d906      	bls.n	8003d82 <USB_SetTurnaroundTime+0xda>
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	4a1c      	ldr	r2, [pc, #112]	; (8003de8 <USB_SetTurnaroundTime+0x140>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d202      	bcs.n	8003d82 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003d7c:	2307      	movs	r3, #7
 8003d7e:	617b      	str	r3, [r7, #20]
 8003d80:	e00a      	b.n	8003d98 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003d82:	2306      	movs	r3, #6
 8003d84:	617b      	str	r3, [r7, #20]
 8003d86:	e007      	b.n	8003d98 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003d88:	79fb      	ldrb	r3, [r7, #7]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d102      	bne.n	8003d94 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003d8e:	2309      	movs	r3, #9
 8003d90:	617b      	str	r3, [r7, #20]
 8003d92:	e001      	b.n	8003d98 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003d94:	2309      	movs	r3, #9
 8003d96:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	68da      	ldr	r2, [r3, #12]
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	029b      	lsls	r3, r3, #10
 8003dac:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003db0:	431a      	orrs	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	371c      	adds	r7, #28
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr
 8003dc4:	00d8acbf 	.word	0x00d8acbf
 8003dc8:	00e4e1c0 	.word	0x00e4e1c0
 8003dcc:	00f42400 	.word	0x00f42400
 8003dd0:	01067380 	.word	0x01067380
 8003dd4:	011a499f 	.word	0x011a499f
 8003dd8:	01312cff 	.word	0x01312cff
 8003ddc:	014ca43f 	.word	0x014ca43f
 8003de0:	016e3600 	.word	0x016e3600
 8003de4:	01a6ab1f 	.word	0x01a6ab1f
 8003de8:	01e84800 	.word	0x01e84800

08003dec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f043 0201 	orr.w	r2, r3, #1
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	370c      	adds	r7, #12
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr

08003e0e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e0e:	b480      	push	{r7}
 8003e10:	b083      	sub	sp, #12
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f023 0201 	bic.w	r2, r3, #1
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e22:	2300      	movs	r3, #0
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	460b      	mov	r3, r1
 8003e3a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003e4c:	78fb      	ldrb	r3, [r7, #3]
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d115      	bne.n	8003e7e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003e5e:	2001      	movs	r0, #1
 8003e60:	f7fc ff26 	bl	8000cb0 <HAL_Delay>
      ms++;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	3301      	adds	r3, #1
 8003e68:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f001 fa45 	bl	80052fa <USB_GetMode>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d01e      	beq.n	8003eb4 <USB_SetCurrentMode+0x84>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2b31      	cmp	r3, #49	; 0x31
 8003e7a:	d9f0      	bls.n	8003e5e <USB_SetCurrentMode+0x2e>
 8003e7c:	e01a      	b.n	8003eb4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003e7e:	78fb      	ldrb	r3, [r7, #3]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d115      	bne.n	8003eb0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003e90:	2001      	movs	r0, #1
 8003e92:	f7fc ff0d 	bl	8000cb0 <HAL_Delay>
      ms++;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	3301      	adds	r3, #1
 8003e9a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f001 fa2c 	bl	80052fa <USB_GetMode>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d005      	beq.n	8003eb4 <USB_SetCurrentMode+0x84>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2b31      	cmp	r3, #49	; 0x31
 8003eac:	d9f0      	bls.n	8003e90 <USB_SetCurrentMode+0x60>
 8003eae:	e001      	b.n	8003eb4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e005      	b.n	8003ec0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2b32      	cmp	r3, #50	; 0x32
 8003eb8:	d101      	bne.n	8003ebe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e000      	b.n	8003ec0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003ebe:	2300      	movs	r3, #0
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3710      	adds	r7, #16
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ec8:	b084      	sub	sp, #16
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	b086      	sub	sp, #24
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
 8003ed2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003ed6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003eda:	2300      	movs	r3, #0
 8003edc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	613b      	str	r3, [r7, #16]
 8003ee6:	e009      	b.n	8003efc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	3340      	adds	r3, #64	; 0x40
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	4413      	add	r3, r2
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	3301      	adds	r3, #1
 8003efa:	613b      	str	r3, [r7, #16]
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	2b0e      	cmp	r3, #14
 8003f00:	d9f2      	bls.n	8003ee8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003f02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d11c      	bne.n	8003f42 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f16:	f043 0302 	orr.w	r3, r3, #2
 8003f1a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f20:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f2c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f38:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	639a      	str	r2, [r3, #56]	; 0x38
 8003f40:	e00b      	b.n	8003f5a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f46:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f52:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003f60:	461a      	mov	r2, r3
 8003f62:	2300      	movs	r3, #0
 8003f64:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f74:	461a      	mov	r2, r3
 8003f76:	680b      	ldr	r3, [r1, #0]
 8003f78:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d10c      	bne.n	8003f9a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d104      	bne.n	8003f90 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003f86:	2100      	movs	r1, #0
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f000 f965 	bl	8004258 <USB_SetDevSpeed>
 8003f8e:	e008      	b.n	8003fa2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003f90:	2101      	movs	r1, #1
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 f960 	bl	8004258 <USB_SetDevSpeed>
 8003f98:	e003      	b.n	8003fa2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003f9a:	2103      	movs	r1, #3
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f000 f95b 	bl	8004258 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003fa2:	2110      	movs	r1, #16
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f000 f8f3 	bl	8004190 <USB_FlushTxFifo>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d001      	beq.n	8003fb4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f000 f91f 	bl	80041f8 <USB_FlushRxFifo>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d001      	beq.n	8003fc4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fca:	461a      	mov	r2, r3
 8003fcc:	2300      	movs	r3, #0
 8003fce:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	2300      	movs	r3, #0
 8003fda:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003fe8:	2300      	movs	r3, #0
 8003fea:	613b      	str	r3, [r7, #16]
 8003fec:	e043      	b.n	8004076 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	015a      	lsls	r2, r3, #5
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004000:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004004:	d118      	bne.n	8004038 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d10a      	bne.n	8004022 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	015a      	lsls	r2, r3, #5
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	4413      	add	r3, r2
 8004014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004018:	461a      	mov	r2, r3
 800401a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800401e:	6013      	str	r3, [r2, #0]
 8004020:	e013      	b.n	800404a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	015a      	lsls	r2, r3, #5
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	4413      	add	r3, r2
 800402a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800402e:	461a      	mov	r2, r3
 8004030:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004034:	6013      	str	r3, [r2, #0]
 8004036:	e008      	b.n	800404a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	015a      	lsls	r2, r3, #5
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	4413      	add	r3, r2
 8004040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004044:	461a      	mov	r2, r3
 8004046:	2300      	movs	r3, #0
 8004048:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	015a      	lsls	r2, r3, #5
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	4413      	add	r3, r2
 8004052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004056:	461a      	mov	r2, r3
 8004058:	2300      	movs	r3, #0
 800405a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	015a      	lsls	r2, r3, #5
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	4413      	add	r3, r2
 8004064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004068:	461a      	mov	r2, r3
 800406a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800406e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	3301      	adds	r3, #1
 8004074:	613b      	str	r3, [r7, #16]
 8004076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004078:	693a      	ldr	r2, [r7, #16]
 800407a:	429a      	cmp	r2, r3
 800407c:	d3b7      	bcc.n	8003fee <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800407e:	2300      	movs	r3, #0
 8004080:	613b      	str	r3, [r7, #16]
 8004082:	e043      	b.n	800410c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	015a      	lsls	r2, r3, #5
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	4413      	add	r3, r2
 800408c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004096:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800409a:	d118      	bne.n	80040ce <USB_DevInit+0x206>
    {
      if (i == 0U)
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10a      	bne.n	80040b8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	015a      	lsls	r2, r3, #5
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	4413      	add	r3, r2
 80040aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ae:	461a      	mov	r2, r3
 80040b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80040b4:	6013      	str	r3, [r2, #0]
 80040b6:	e013      	b.n	80040e0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	015a      	lsls	r2, r3, #5
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	4413      	add	r3, r2
 80040c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040c4:	461a      	mov	r2, r3
 80040c6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80040ca:	6013      	str	r3, [r2, #0]
 80040cc:	e008      	b.n	80040e0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	015a      	lsls	r2, r3, #5
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	4413      	add	r3, r2
 80040d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040da:	461a      	mov	r2, r3
 80040dc:	2300      	movs	r3, #0
 80040de:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	015a      	lsls	r2, r3, #5
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	4413      	add	r3, r2
 80040e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ec:	461a      	mov	r2, r3
 80040ee:	2300      	movs	r3, #0
 80040f0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	015a      	lsls	r2, r3, #5
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	4413      	add	r3, r2
 80040fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040fe:	461a      	mov	r2, r3
 8004100:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004104:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	3301      	adds	r3, #1
 800410a:	613b      	str	r3, [r7, #16]
 800410c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410e:	693a      	ldr	r2, [r7, #16]
 8004110:	429a      	cmp	r2, r3
 8004112:	d3b7      	bcc.n	8004084 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	68fa      	ldr	r2, [r7, #12]
 800411e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004122:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004126:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004134:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004138:	2b00      	cmp	r3, #0
 800413a:	d105      	bne.n	8004148 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	f043 0210 	orr.w	r2, r3, #16
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	699a      	ldr	r2, [r3, #24]
 800414c:	4b0f      	ldr	r3, [pc, #60]	; (800418c <USB_DevInit+0x2c4>)
 800414e:	4313      	orrs	r3, r2
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004156:	2b00      	cmp	r3, #0
 8004158:	d005      	beq.n	8004166 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	f043 0208 	orr.w	r2, r3, #8
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004166:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004168:	2b01      	cmp	r3, #1
 800416a:	d107      	bne.n	800417c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004174:	f043 0304 	orr.w	r3, r3, #4
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800417c:	7dfb      	ldrb	r3, [r7, #23]
}
 800417e:	4618      	mov	r0, r3
 8004180:	3718      	adds	r7, #24
 8004182:	46bd      	mov	sp, r7
 8004184:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004188:	b004      	add	sp, #16
 800418a:	4770      	bx	lr
 800418c:	803c3800 	.word	0x803c3800

08004190 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004190:	b480      	push	{r7}
 8004192:	b085      	sub	sp, #20
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800419a:	2300      	movs	r3, #0
 800419c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	3301      	adds	r3, #1
 80041a2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	4a13      	ldr	r2, [pc, #76]	; (80041f4 <USB_FlushTxFifo+0x64>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d901      	bls.n	80041b0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80041ac:	2303      	movs	r3, #3
 80041ae:	e01b      	b.n	80041e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	daf2      	bge.n	800419e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80041b8:	2300      	movs	r3, #0
 80041ba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	019b      	lsls	r3, r3, #6
 80041c0:	f043 0220 	orr.w	r2, r3, #32
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	3301      	adds	r3, #1
 80041cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	4a08      	ldr	r2, [pc, #32]	; (80041f4 <USB_FlushTxFifo+0x64>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d901      	bls.n	80041da <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e006      	b.n	80041e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	f003 0320 	and.w	r3, r3, #32
 80041e2:	2b20      	cmp	r3, #32
 80041e4:	d0f0      	beq.n	80041c8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3714      	adds	r7, #20
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr
 80041f4:	00030d40 	.word	0x00030d40

080041f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004200:	2300      	movs	r3, #0
 8004202:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	3301      	adds	r3, #1
 8004208:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	4a11      	ldr	r2, [pc, #68]	; (8004254 <USB_FlushRxFifo+0x5c>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d901      	bls.n	8004216 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e018      	b.n	8004248 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	2b00      	cmp	r3, #0
 800421c:	daf2      	bge.n	8004204 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800421e:	2300      	movs	r3, #0
 8004220:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2210      	movs	r2, #16
 8004226:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	3301      	adds	r3, #1
 800422c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	4a08      	ldr	r2, [pc, #32]	; (8004254 <USB_FlushRxFifo+0x5c>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d901      	bls.n	800423a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e006      	b.n	8004248 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	f003 0310 	and.w	r3, r3, #16
 8004242:	2b10      	cmp	r3, #16
 8004244:	d0f0      	beq.n	8004228 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004246:	2300      	movs	r3, #0
}
 8004248:	4618      	mov	r0, r3
 800424a:	3714      	adds	r7, #20
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr
 8004254:	00030d40 	.word	0x00030d40

08004258 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004258:	b480      	push	{r7}
 800425a:	b085      	sub	sp, #20
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	460b      	mov	r3, r1
 8004262:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	78fb      	ldrb	r3, [r7, #3]
 8004272:	68f9      	ldr	r1, [r7, #12]
 8004274:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004278:	4313      	orrs	r3, r2
 800427a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	3714      	adds	r7, #20
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr

0800428a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800428a:	b480      	push	{r7}
 800428c:	b087      	sub	sp, #28
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f003 0306 	and.w	r3, r3, #6
 80042a2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d102      	bne.n	80042b0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80042aa:	2300      	movs	r3, #0
 80042ac:	75fb      	strb	r3, [r7, #23]
 80042ae:	e00a      	b.n	80042c6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d002      	beq.n	80042bc <USB_GetDevSpeed+0x32>
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2b06      	cmp	r3, #6
 80042ba:	d102      	bne.n	80042c2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80042bc:	2302      	movs	r3, #2
 80042be:	75fb      	strb	r3, [r7, #23]
 80042c0:	e001      	b.n	80042c6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80042c2:	230f      	movs	r3, #15
 80042c4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80042c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	371c      	adds	r7, #28
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	785b      	ldrb	r3, [r3, #1]
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d13a      	bne.n	8004366 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042f6:	69da      	ldr	r2, [r3, #28]
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	f003 030f 	and.w	r3, r3, #15
 8004300:	2101      	movs	r1, #1
 8004302:	fa01 f303 	lsl.w	r3, r1, r3
 8004306:	b29b      	uxth	r3, r3
 8004308:	68f9      	ldr	r1, [r7, #12]
 800430a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800430e:	4313      	orrs	r3, r2
 8004310:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	015a      	lsls	r2, r3, #5
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	4413      	add	r3, r2
 800431a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d155      	bne.n	80043d4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	015a      	lsls	r2, r3, #5
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	4413      	add	r3, r2
 8004330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	791b      	ldrb	r3, [r3, #4]
 8004342:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004344:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	059b      	lsls	r3, r3, #22
 800434a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800434c:	4313      	orrs	r3, r2
 800434e:	68ba      	ldr	r2, [r7, #8]
 8004350:	0151      	lsls	r1, r2, #5
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	440a      	add	r2, r1
 8004356:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800435a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800435e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004362:	6013      	str	r3, [r2, #0]
 8004364:	e036      	b.n	80043d4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800436c:	69da      	ldr	r2, [r3, #28]
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	f003 030f 	and.w	r3, r3, #15
 8004376:	2101      	movs	r1, #1
 8004378:	fa01 f303 	lsl.w	r3, r1, r3
 800437c:	041b      	lsls	r3, r3, #16
 800437e:	68f9      	ldr	r1, [r7, #12]
 8004380:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004384:	4313      	orrs	r3, r2
 8004386:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	015a      	lsls	r2, r3, #5
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	4413      	add	r3, r2
 8004390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d11a      	bne.n	80043d4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	015a      	lsls	r2, r3, #5
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	4413      	add	r3, r2
 80043a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	791b      	ldrb	r3, [r3, #4]
 80043b8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80043ba:	430b      	orrs	r3, r1
 80043bc:	4313      	orrs	r3, r2
 80043be:	68ba      	ldr	r2, [r7, #8]
 80043c0:	0151      	lsls	r1, r2, #5
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	440a      	add	r2, r1
 80043c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043d2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3714      	adds	r7, #20
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
	...

080043e4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b085      	sub	sp, #20
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	785b      	ldrb	r3, [r3, #1]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d161      	bne.n	80044c4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	015a      	lsls	r2, r3, #5
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	4413      	add	r3, r2
 8004408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004412:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004416:	d11f      	bne.n	8004458 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	015a      	lsls	r2, r3, #5
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	4413      	add	r3, r2
 8004420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68ba      	ldr	r2, [r7, #8]
 8004428:	0151      	lsls	r1, r2, #5
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	440a      	add	r2, r1
 800442e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004432:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004436:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	015a      	lsls	r2, r3, #5
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	4413      	add	r3, r2
 8004440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68ba      	ldr	r2, [r7, #8]
 8004448:	0151      	lsls	r1, r2, #5
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	440a      	add	r2, r1
 800444e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004452:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004456:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800445e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	f003 030f 	and.w	r3, r3, #15
 8004468:	2101      	movs	r1, #1
 800446a:	fa01 f303 	lsl.w	r3, r1, r3
 800446e:	b29b      	uxth	r3, r3
 8004470:	43db      	mvns	r3, r3
 8004472:	68f9      	ldr	r1, [r7, #12]
 8004474:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004478:	4013      	ands	r3, r2
 800447a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004482:	69da      	ldr	r2, [r3, #28]
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	f003 030f 	and.w	r3, r3, #15
 800448c:	2101      	movs	r1, #1
 800448e:	fa01 f303 	lsl.w	r3, r1, r3
 8004492:	b29b      	uxth	r3, r3
 8004494:	43db      	mvns	r3, r3
 8004496:	68f9      	ldr	r1, [r7, #12]
 8004498:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800449c:	4013      	ands	r3, r2
 800449e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	015a      	lsls	r2, r3, #5
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	4413      	add	r3, r2
 80044a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	0159      	lsls	r1, r3, #5
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	440b      	add	r3, r1
 80044b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ba:	4619      	mov	r1, r3
 80044bc:	4b35      	ldr	r3, [pc, #212]	; (8004594 <USB_DeactivateEndpoint+0x1b0>)
 80044be:	4013      	ands	r3, r2
 80044c0:	600b      	str	r3, [r1, #0]
 80044c2:	e060      	b.n	8004586 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	015a      	lsls	r2, r3, #5
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	4413      	add	r3, r2
 80044cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044da:	d11f      	bne.n	800451c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	015a      	lsls	r2, r3, #5
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	4413      	add	r3, r2
 80044e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	68ba      	ldr	r2, [r7, #8]
 80044ec:	0151      	lsls	r1, r2, #5
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	440a      	add	r2, r1
 80044f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80044fa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	015a      	lsls	r2, r3, #5
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	4413      	add	r3, r2
 8004504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68ba      	ldr	r2, [r7, #8]
 800450c:	0151      	lsls	r1, r2, #5
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	440a      	add	r2, r1
 8004512:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004516:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800451a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004522:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	f003 030f 	and.w	r3, r3, #15
 800452c:	2101      	movs	r1, #1
 800452e:	fa01 f303 	lsl.w	r3, r1, r3
 8004532:	041b      	lsls	r3, r3, #16
 8004534:	43db      	mvns	r3, r3
 8004536:	68f9      	ldr	r1, [r7, #12]
 8004538:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800453c:	4013      	ands	r3, r2
 800453e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004546:	69da      	ldr	r2, [r3, #28]
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	f003 030f 	and.w	r3, r3, #15
 8004550:	2101      	movs	r1, #1
 8004552:	fa01 f303 	lsl.w	r3, r1, r3
 8004556:	041b      	lsls	r3, r3, #16
 8004558:	43db      	mvns	r3, r3
 800455a:	68f9      	ldr	r1, [r7, #12]
 800455c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004560:	4013      	ands	r3, r2
 8004562:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	015a      	lsls	r2, r3, #5
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	4413      	add	r3, r2
 800456c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	0159      	lsls	r1, r3, #5
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	440b      	add	r3, r1
 800457a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800457e:	4619      	mov	r1, r3
 8004580:	4b05      	ldr	r3, [pc, #20]	; (8004598 <USB_DeactivateEndpoint+0x1b4>)
 8004582:	4013      	ands	r3, r2
 8004584:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	3714      	adds	r7, #20
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr
 8004594:	ec337800 	.word	0xec337800
 8004598:	eff37800 	.word	0xeff37800

0800459c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b08a      	sub	sp, #40	; 0x28
 80045a0:	af02      	add	r7, sp, #8
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	4613      	mov	r3, r2
 80045a8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	785b      	ldrb	r3, [r3, #1]
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	f040 815c 	bne.w	8004876 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	699b      	ldr	r3, [r3, #24]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d132      	bne.n	800462c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	015a      	lsls	r2, r3, #5
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	4413      	add	r3, r2
 80045ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	69ba      	ldr	r2, [r7, #24]
 80045d6:	0151      	lsls	r1, r2, #5
 80045d8:	69fa      	ldr	r2, [r7, #28]
 80045da:	440a      	add	r2, r1
 80045dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045e0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80045e4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80045e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	015a      	lsls	r2, r3, #5
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	4413      	add	r3, r2
 80045f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	69ba      	ldr	r2, [r7, #24]
 80045fa:	0151      	lsls	r1, r2, #5
 80045fc:	69fa      	ldr	r2, [r7, #28]
 80045fe:	440a      	add	r2, r1
 8004600:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004604:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004608:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	015a      	lsls	r2, r3, #5
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	4413      	add	r3, r2
 8004612:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	69ba      	ldr	r2, [r7, #24]
 800461a:	0151      	lsls	r1, r2, #5
 800461c:	69fa      	ldr	r2, [r7, #28]
 800461e:	440a      	add	r2, r1
 8004620:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004624:	0cdb      	lsrs	r3, r3, #19
 8004626:	04db      	lsls	r3, r3, #19
 8004628:	6113      	str	r3, [r2, #16]
 800462a:	e074      	b.n	8004716 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	015a      	lsls	r2, r3, #5
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	4413      	add	r3, r2
 8004634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	69ba      	ldr	r2, [r7, #24]
 800463c:	0151      	lsls	r1, r2, #5
 800463e:	69fa      	ldr	r2, [r7, #28]
 8004640:	440a      	add	r2, r1
 8004642:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004646:	0cdb      	lsrs	r3, r3, #19
 8004648:	04db      	lsls	r3, r3, #19
 800464a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	015a      	lsls	r2, r3, #5
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	4413      	add	r3, r2
 8004654:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	69ba      	ldr	r2, [r7, #24]
 800465c:	0151      	lsls	r1, r2, #5
 800465e:	69fa      	ldr	r2, [r7, #28]
 8004660:	440a      	add	r2, r1
 8004662:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004666:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800466a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800466e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	015a      	lsls	r2, r3, #5
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	4413      	add	r3, r2
 8004678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800467c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	6999      	ldr	r1, [r3, #24]
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	440b      	add	r3, r1
 8004688:	1e59      	subs	r1, r3, #1
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004692:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004694:	4b9d      	ldr	r3, [pc, #628]	; (800490c <USB_EPStartXfer+0x370>)
 8004696:	400b      	ands	r3, r1
 8004698:	69b9      	ldr	r1, [r7, #24]
 800469a:	0148      	lsls	r0, r1, #5
 800469c:	69f9      	ldr	r1, [r7, #28]
 800469e:	4401      	add	r1, r0
 80046a0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80046a4:	4313      	orrs	r3, r2
 80046a6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	015a      	lsls	r2, r3, #5
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	4413      	add	r3, r2
 80046b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046b4:	691a      	ldr	r2, [r3, #16]
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	699b      	ldr	r3, [r3, #24]
 80046ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046be:	69b9      	ldr	r1, [r7, #24]
 80046c0:	0148      	lsls	r0, r1, #5
 80046c2:	69f9      	ldr	r1, [r7, #28]
 80046c4:	4401      	add	r1, r0
 80046c6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80046ca:	4313      	orrs	r3, r2
 80046cc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	791b      	ldrb	r3, [r3, #4]
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d11f      	bne.n	8004716 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	015a      	lsls	r2, r3, #5
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	4413      	add	r3, r2
 80046de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	69ba      	ldr	r2, [r7, #24]
 80046e6:	0151      	lsls	r1, r2, #5
 80046e8:	69fa      	ldr	r2, [r7, #28]
 80046ea:	440a      	add	r2, r1
 80046ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046f0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80046f4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	015a      	lsls	r2, r3, #5
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	4413      	add	r3, r2
 80046fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004702:	691b      	ldr	r3, [r3, #16]
 8004704:	69ba      	ldr	r2, [r7, #24]
 8004706:	0151      	lsls	r1, r2, #5
 8004708:	69fa      	ldr	r2, [r7, #28]
 800470a:	440a      	add	r2, r1
 800470c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004710:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004714:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004716:	79fb      	ldrb	r3, [r7, #7]
 8004718:	2b01      	cmp	r3, #1
 800471a:	d14b      	bne.n	80047b4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	695b      	ldr	r3, [r3, #20]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d009      	beq.n	8004738 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	015a      	lsls	r2, r3, #5
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	4413      	add	r3, r2
 800472c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004730:	461a      	mov	r2, r3
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	791b      	ldrb	r3, [r3, #4]
 800473c:	2b01      	cmp	r3, #1
 800473e:	d128      	bne.n	8004792 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800474c:	2b00      	cmp	r3, #0
 800474e:	d110      	bne.n	8004772 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	015a      	lsls	r2, r3, #5
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	4413      	add	r3, r2
 8004758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	69ba      	ldr	r2, [r7, #24]
 8004760:	0151      	lsls	r1, r2, #5
 8004762:	69fa      	ldr	r2, [r7, #28]
 8004764:	440a      	add	r2, r1
 8004766:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800476a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800476e:	6013      	str	r3, [r2, #0]
 8004770:	e00f      	b.n	8004792 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	015a      	lsls	r2, r3, #5
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	4413      	add	r3, r2
 800477a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	69ba      	ldr	r2, [r7, #24]
 8004782:	0151      	lsls	r1, r2, #5
 8004784:	69fa      	ldr	r2, [r7, #28]
 8004786:	440a      	add	r2, r1
 8004788:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800478c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004790:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	015a      	lsls	r2, r3, #5
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	4413      	add	r3, r2
 800479a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	69ba      	ldr	r2, [r7, #24]
 80047a2:	0151      	lsls	r1, r2, #5
 80047a4:	69fa      	ldr	r2, [r7, #28]
 80047a6:	440a      	add	r2, r1
 80047a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80047b0:	6013      	str	r3, [r2, #0]
 80047b2:	e133      	b.n	8004a1c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	015a      	lsls	r2, r3, #5
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	4413      	add	r3, r2
 80047bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	69ba      	ldr	r2, [r7, #24]
 80047c4:	0151      	lsls	r1, r2, #5
 80047c6:	69fa      	ldr	r2, [r7, #28]
 80047c8:	440a      	add	r2, r1
 80047ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80047d2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	791b      	ldrb	r3, [r3, #4]
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d015      	beq.n	8004808 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	699b      	ldr	r3, [r3, #24]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	f000 811b 	beq.w	8004a1c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	f003 030f 	and.w	r3, r3, #15
 80047f6:	2101      	movs	r1, #1
 80047f8:	fa01 f303 	lsl.w	r3, r1, r3
 80047fc:	69f9      	ldr	r1, [r7, #28]
 80047fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004802:	4313      	orrs	r3, r2
 8004804:	634b      	str	r3, [r1, #52]	; 0x34
 8004806:	e109      	b.n	8004a1c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004814:	2b00      	cmp	r3, #0
 8004816:	d110      	bne.n	800483a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	015a      	lsls	r2, r3, #5
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	4413      	add	r3, r2
 8004820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	69ba      	ldr	r2, [r7, #24]
 8004828:	0151      	lsls	r1, r2, #5
 800482a:	69fa      	ldr	r2, [r7, #28]
 800482c:	440a      	add	r2, r1
 800482e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004832:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004836:	6013      	str	r3, [r2, #0]
 8004838:	e00f      	b.n	800485a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	015a      	lsls	r2, r3, #5
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	4413      	add	r3, r2
 8004842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	69ba      	ldr	r2, [r7, #24]
 800484a:	0151      	lsls	r1, r2, #5
 800484c:	69fa      	ldr	r2, [r7, #28]
 800484e:	440a      	add	r2, r1
 8004850:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004858:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	6919      	ldr	r1, [r3, #16]
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	781a      	ldrb	r2, [r3, #0]
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	b298      	uxth	r0, r3
 8004868:	79fb      	ldrb	r3, [r7, #7]
 800486a:	9300      	str	r3, [sp, #0]
 800486c:	4603      	mov	r3, r0
 800486e:	68f8      	ldr	r0, [r7, #12]
 8004870:	f000 fade 	bl	8004e30 <USB_WritePacket>
 8004874:	e0d2      	b.n	8004a1c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	015a      	lsls	r2, r3, #5
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	4413      	add	r3, r2
 800487e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	69ba      	ldr	r2, [r7, #24]
 8004886:	0151      	lsls	r1, r2, #5
 8004888:	69fa      	ldr	r2, [r7, #28]
 800488a:	440a      	add	r2, r1
 800488c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004890:	0cdb      	lsrs	r3, r3, #19
 8004892:	04db      	lsls	r3, r3, #19
 8004894:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	015a      	lsls	r2, r3, #5
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	4413      	add	r3, r2
 800489e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	69ba      	ldr	r2, [r7, #24]
 80048a6:	0151      	lsls	r1, r2, #5
 80048a8:	69fa      	ldr	r2, [r7, #28]
 80048aa:	440a      	add	r2, r1
 80048ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80048b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80048b8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d126      	bne.n	8004910 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	015a      	lsls	r2, r3, #5
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	4413      	add	r3, r2
 80048ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ce:	691a      	ldr	r2, [r3, #16]
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048d8:	69b9      	ldr	r1, [r7, #24]
 80048da:	0148      	lsls	r0, r1, #5
 80048dc:	69f9      	ldr	r1, [r7, #28]
 80048de:	4401      	add	r1, r0
 80048e0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80048e4:	4313      	orrs	r3, r2
 80048e6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	015a      	lsls	r2, r3, #5
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	4413      	add	r3, r2
 80048f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	69ba      	ldr	r2, [r7, #24]
 80048f8:	0151      	lsls	r1, r2, #5
 80048fa:	69fa      	ldr	r2, [r7, #28]
 80048fc:	440a      	add	r2, r1
 80048fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004902:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004906:	6113      	str	r3, [r2, #16]
 8004908:	e03a      	b.n	8004980 <USB_EPStartXfer+0x3e4>
 800490a:	bf00      	nop
 800490c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	699a      	ldr	r2, [r3, #24]
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	4413      	add	r3, r2
 800491a:	1e5a      	subs	r2, r3, #1
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	fbb2 f3f3 	udiv	r3, r2, r3
 8004924:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	8afa      	ldrh	r2, [r7, #22]
 800492c:	fb03 f202 	mul.w	r2, r3, r2
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	015a      	lsls	r2, r3, #5
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	4413      	add	r3, r2
 800493c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004940:	691a      	ldr	r2, [r3, #16]
 8004942:	8afb      	ldrh	r3, [r7, #22]
 8004944:	04d9      	lsls	r1, r3, #19
 8004946:	4b38      	ldr	r3, [pc, #224]	; (8004a28 <USB_EPStartXfer+0x48c>)
 8004948:	400b      	ands	r3, r1
 800494a:	69b9      	ldr	r1, [r7, #24]
 800494c:	0148      	lsls	r0, r1, #5
 800494e:	69f9      	ldr	r1, [r7, #28]
 8004950:	4401      	add	r1, r0
 8004952:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004956:	4313      	orrs	r3, r2
 8004958:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	015a      	lsls	r2, r3, #5
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	4413      	add	r3, r2
 8004962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004966:	691a      	ldr	r2, [r3, #16]
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	69db      	ldr	r3, [r3, #28]
 800496c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004970:	69b9      	ldr	r1, [r7, #24]
 8004972:	0148      	lsls	r0, r1, #5
 8004974:	69f9      	ldr	r1, [r7, #28]
 8004976:	4401      	add	r1, r0
 8004978:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800497c:	4313      	orrs	r3, r2
 800497e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004980:	79fb      	ldrb	r3, [r7, #7]
 8004982:	2b01      	cmp	r3, #1
 8004984:	d10d      	bne.n	80049a2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d009      	beq.n	80049a2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	6919      	ldr	r1, [r3, #16]
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	015a      	lsls	r2, r3, #5
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	4413      	add	r3, r2
 800499a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800499e:	460a      	mov	r2, r1
 80049a0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	791b      	ldrb	r3, [r3, #4]
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d128      	bne.n	80049fc <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d110      	bne.n	80049dc <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	015a      	lsls	r2, r3, #5
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	4413      	add	r3, r2
 80049c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	69ba      	ldr	r2, [r7, #24]
 80049ca:	0151      	lsls	r1, r2, #5
 80049cc:	69fa      	ldr	r2, [r7, #28]
 80049ce:	440a      	add	r2, r1
 80049d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80049d8:	6013      	str	r3, [r2, #0]
 80049da:	e00f      	b.n	80049fc <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	015a      	lsls	r2, r3, #5
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	4413      	add	r3, r2
 80049e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	69ba      	ldr	r2, [r7, #24]
 80049ec:	0151      	lsls	r1, r2, #5
 80049ee:	69fa      	ldr	r2, [r7, #28]
 80049f0:	440a      	add	r2, r1
 80049f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049fa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	015a      	lsls	r2, r3, #5
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	4413      	add	r3, r2
 8004a04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	69ba      	ldr	r2, [r7, #24]
 8004a0c:	0151      	lsls	r1, r2, #5
 8004a0e:	69fa      	ldr	r2, [r7, #28]
 8004a10:	440a      	add	r2, r1
 8004a12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a16:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004a1a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004a1c:	2300      	movs	r3, #0
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3720      	adds	r7, #32
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	1ff80000 	.word	0x1ff80000

08004a2c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b087      	sub	sp, #28
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	4613      	mov	r3, r2
 8004a38:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	785b      	ldrb	r3, [r3, #1]
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	f040 80ce 	bne.w	8004bea <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	699b      	ldr	r3, [r3, #24]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d132      	bne.n	8004abc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	015a      	lsls	r2, r3, #5
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	693a      	ldr	r2, [r7, #16]
 8004a66:	0151      	lsls	r1, r2, #5
 8004a68:	697a      	ldr	r2, [r7, #20]
 8004a6a:	440a      	add	r2, r1
 8004a6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a70:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004a74:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004a78:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	015a      	lsls	r2, r3, #5
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	4413      	add	r3, r2
 8004a82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	0151      	lsls	r1, r2, #5
 8004a8c:	697a      	ldr	r2, [r7, #20]
 8004a8e:	440a      	add	r2, r1
 8004a90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a94:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a98:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	015a      	lsls	r2, r3, #5
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	4413      	add	r3, r2
 8004aa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aa6:	691b      	ldr	r3, [r3, #16]
 8004aa8:	693a      	ldr	r2, [r7, #16]
 8004aaa:	0151      	lsls	r1, r2, #5
 8004aac:	697a      	ldr	r2, [r7, #20]
 8004aae:	440a      	add	r2, r1
 8004ab0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ab4:	0cdb      	lsrs	r3, r3, #19
 8004ab6:	04db      	lsls	r3, r3, #19
 8004ab8:	6113      	str	r3, [r2, #16]
 8004aba:	e04e      	b.n	8004b5a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	015a      	lsls	r2, r3, #5
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	4413      	add	r3, r2
 8004ac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ac8:	691b      	ldr	r3, [r3, #16]
 8004aca:	693a      	ldr	r2, [r7, #16]
 8004acc:	0151      	lsls	r1, r2, #5
 8004ace:	697a      	ldr	r2, [r7, #20]
 8004ad0:	440a      	add	r2, r1
 8004ad2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ad6:	0cdb      	lsrs	r3, r3, #19
 8004ad8:	04db      	lsls	r3, r3, #19
 8004ada:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	015a      	lsls	r2, r3, #5
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	693a      	ldr	r2, [r7, #16]
 8004aec:	0151      	lsls	r1, r2, #5
 8004aee:	697a      	ldr	r2, [r7, #20]
 8004af0:	440a      	add	r2, r1
 8004af2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004af6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004afa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004afe:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	699a      	ldr	r2, [r3, #24]
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d903      	bls.n	8004b14 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	68da      	ldr	r2, [r3, #12]
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	015a      	lsls	r2, r3, #5
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	693a      	ldr	r2, [r7, #16]
 8004b24:	0151      	lsls	r1, r2, #5
 8004b26:	697a      	ldr	r2, [r7, #20]
 8004b28:	440a      	add	r2, r1
 8004b2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b32:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	015a      	lsls	r2, r3, #5
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	4413      	add	r3, r2
 8004b3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b40:	691a      	ldr	r2, [r3, #16]
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	699b      	ldr	r3, [r3, #24]
 8004b46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b4a:	6939      	ldr	r1, [r7, #16]
 8004b4c:	0148      	lsls	r0, r1, #5
 8004b4e:	6979      	ldr	r1, [r7, #20]
 8004b50:	4401      	add	r1, r0
 8004b52:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004b56:	4313      	orrs	r3, r2
 8004b58:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004b5a:	79fb      	ldrb	r3, [r7, #7]
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d11e      	bne.n	8004b9e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	695b      	ldr	r3, [r3, #20]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d009      	beq.n	8004b7c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	015a      	lsls	r2, r3, #5
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	4413      	add	r3, r2
 8004b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b74:	461a      	mov	r2, r3
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	695b      	ldr	r3, [r3, #20]
 8004b7a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	015a      	lsls	r2, r3, #5
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	4413      	add	r3, r2
 8004b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	693a      	ldr	r2, [r7, #16]
 8004b8c:	0151      	lsls	r1, r2, #5
 8004b8e:	697a      	ldr	r2, [r7, #20]
 8004b90:	440a      	add	r2, r1
 8004b92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b96:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b9a:	6013      	str	r3, [r2, #0]
 8004b9c:	e097      	b.n	8004cce <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	015a      	lsls	r2, r3, #5
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	693a      	ldr	r2, [r7, #16]
 8004bae:	0151      	lsls	r1, r2, #5
 8004bb0:	697a      	ldr	r2, [r7, #20]
 8004bb2:	440a      	add	r2, r1
 8004bb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bb8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004bbc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	699b      	ldr	r3, [r3, #24]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	f000 8083 	beq.w	8004cce <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	f003 030f 	and.w	r3, r3, #15
 8004bd8:	2101      	movs	r1, #1
 8004bda:	fa01 f303 	lsl.w	r3, r1, r3
 8004bde:	6979      	ldr	r1, [r7, #20]
 8004be0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004be4:	4313      	orrs	r3, r2
 8004be6:	634b      	str	r3, [r1, #52]	; 0x34
 8004be8:	e071      	b.n	8004cce <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	015a      	lsls	r2, r3, #5
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bf6:	691b      	ldr	r3, [r3, #16]
 8004bf8:	693a      	ldr	r2, [r7, #16]
 8004bfa:	0151      	lsls	r1, r2, #5
 8004bfc:	697a      	ldr	r2, [r7, #20]
 8004bfe:	440a      	add	r2, r1
 8004c00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c04:	0cdb      	lsrs	r3, r3, #19
 8004c06:	04db      	lsls	r3, r3, #19
 8004c08:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	015a      	lsls	r2, r3, #5
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	4413      	add	r3, r2
 8004c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	693a      	ldr	r2, [r7, #16]
 8004c1a:	0151      	lsls	r1, r2, #5
 8004c1c:	697a      	ldr	r2, [r7, #20]
 8004c1e:	440a      	add	r2, r1
 8004c20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c24:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c28:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c2c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	699b      	ldr	r3, [r3, #24]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d003      	beq.n	8004c3e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	68da      	ldr	r2, [r3, #12]
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	68da      	ldr	r2, [r3, #12]
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	015a      	lsls	r2, r3, #5
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	693a      	ldr	r2, [r7, #16]
 8004c56:	0151      	lsls	r1, r2, #5
 8004c58:	697a      	ldr	r2, [r7, #20]
 8004c5a:	440a      	add	r2, r1
 8004c5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c60:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c64:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	015a      	lsls	r2, r3, #5
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c72:	691a      	ldr	r2, [r3, #16]
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	69db      	ldr	r3, [r3, #28]
 8004c78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c7c:	6939      	ldr	r1, [r7, #16]
 8004c7e:	0148      	lsls	r0, r1, #5
 8004c80:	6979      	ldr	r1, [r7, #20]
 8004c82:	4401      	add	r1, r0
 8004c84:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004c8c:	79fb      	ldrb	r3, [r7, #7]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d10d      	bne.n	8004cae <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d009      	beq.n	8004cae <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	6919      	ldr	r1, [r3, #16]
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	015a      	lsls	r2, r3, #5
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	4413      	add	r3, r2
 8004ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004caa:	460a      	mov	r2, r1
 8004cac:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	015a      	lsls	r2, r3, #5
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	4413      	add	r3, r2
 8004cb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	693a      	ldr	r2, [r7, #16]
 8004cbe:	0151      	lsls	r1, r2, #5
 8004cc0:	697a      	ldr	r2, [r7, #20]
 8004cc2:	440a      	add	r2, r1
 8004cc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cc8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ccc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	371c      	adds	r7, #28
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b087      	sub	sp, #28
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004cea:	2300      	movs	r3, #0
 8004cec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	785b      	ldrb	r3, [r3, #1]
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d14a      	bne.n	8004d90 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	015a      	lsls	r2, r3, #5
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	4413      	add	r3, r2
 8004d04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d12:	f040 8086 	bne.w	8004e22 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	015a      	lsls	r2, r3, #5
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	4413      	add	r3, r2
 8004d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	683a      	ldr	r2, [r7, #0]
 8004d28:	7812      	ldrb	r2, [r2, #0]
 8004d2a:	0151      	lsls	r1, r2, #5
 8004d2c:	693a      	ldr	r2, [r7, #16]
 8004d2e:	440a      	add	r2, r1
 8004d30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d34:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004d38:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	015a      	lsls	r2, r3, #5
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	4413      	add	r3, r2
 8004d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	683a      	ldr	r2, [r7, #0]
 8004d4c:	7812      	ldrb	r2, [r2, #0]
 8004d4e:	0151      	lsls	r1, r2, #5
 8004d50:	693a      	ldr	r2, [r7, #16]
 8004d52:	440a      	add	r2, r1
 8004d54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d5c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	3301      	adds	r3, #1
 8004d62:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f242 7210 	movw	r2, #10000	; 0x2710
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d902      	bls.n	8004d74 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	75fb      	strb	r3, [r7, #23]
          break;
 8004d72:	e056      	b.n	8004e22 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	015a      	lsls	r2, r3, #5
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	4413      	add	r3, r2
 8004d7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d8c:	d0e7      	beq.n	8004d5e <USB_EPStopXfer+0x82>
 8004d8e:	e048      	b.n	8004e22 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	015a      	lsls	r2, r3, #5
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	4413      	add	r3, r2
 8004d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004da4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004da8:	d13b      	bne.n	8004e22 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	015a      	lsls	r2, r3, #5
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	4413      	add	r3, r2
 8004db4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	683a      	ldr	r2, [r7, #0]
 8004dbc:	7812      	ldrb	r2, [r2, #0]
 8004dbe:	0151      	lsls	r1, r2, #5
 8004dc0:	693a      	ldr	r2, [r7, #16]
 8004dc2:	440a      	add	r2, r1
 8004dc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dc8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004dcc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	015a      	lsls	r2, r3, #5
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	683a      	ldr	r2, [r7, #0]
 8004de0:	7812      	ldrb	r2, [r2, #0]
 8004de2:	0151      	lsls	r1, r2, #5
 8004de4:	693a      	ldr	r2, [r7, #16]
 8004de6:	440a      	add	r2, r1
 8004de8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004df0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	3301      	adds	r3, #1
 8004df6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f242 7210 	movw	r2, #10000	; 0x2710
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d902      	bls.n	8004e08 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	75fb      	strb	r3, [r7, #23]
          break;
 8004e06:	e00c      	b.n	8004e22 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	015a      	lsls	r2, r3, #5
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	4413      	add	r3, r2
 8004e12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e20:	d0e7      	beq.n	8004df2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004e22:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	371c      	adds	r7, #28
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b089      	sub	sp, #36	; 0x24
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	60b9      	str	r1, [r7, #8]
 8004e3a:	4611      	mov	r1, r2
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	460b      	mov	r3, r1
 8004e40:	71fb      	strb	r3, [r7, #7]
 8004e42:	4613      	mov	r3, r2
 8004e44:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004e4e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d123      	bne.n	8004e9e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004e56:	88bb      	ldrh	r3, [r7, #4]
 8004e58:	3303      	adds	r3, #3
 8004e5a:	089b      	lsrs	r3, r3, #2
 8004e5c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004e5e:	2300      	movs	r3, #0
 8004e60:	61bb      	str	r3, [r7, #24]
 8004e62:	e018      	b.n	8004e96 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004e64:	79fb      	ldrb	r3, [r7, #7]
 8004e66:	031a      	lsls	r2, r3, #12
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	4413      	add	r3, r2
 8004e6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e70:	461a      	mov	r2, r3
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	3301      	adds	r3, #1
 8004e82:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	3301      	adds	r3, #1
 8004e88:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	3301      	adds	r3, #1
 8004e8e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	3301      	adds	r3, #1
 8004e94:	61bb      	str	r3, [r7, #24]
 8004e96:	69ba      	ldr	r2, [r7, #24]
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d3e2      	bcc.n	8004e64 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004e9e:	2300      	movs	r3, #0
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3724      	adds	r7, #36	; 0x24
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr

08004eac <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b08b      	sub	sp, #44	; 0x2c
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004ec2:	88fb      	ldrh	r3, [r7, #6]
 8004ec4:	089b      	lsrs	r3, r3, #2
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004eca:	88fb      	ldrh	r3, [r7, #6]
 8004ecc:	f003 0303 	and.w	r3, r3, #3
 8004ed0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	623b      	str	r3, [r7, #32]
 8004ed6:	e014      	b.n	8004f02 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee2:	601a      	str	r2, [r3, #0]
    pDest++;
 8004ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eec:	3301      	adds	r3, #1
 8004eee:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef8:	3301      	adds	r3, #1
 8004efa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004efc:	6a3b      	ldr	r3, [r7, #32]
 8004efe:	3301      	adds	r3, #1
 8004f00:	623b      	str	r3, [r7, #32]
 8004f02:	6a3a      	ldr	r2, [r7, #32]
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d3e6      	bcc.n	8004ed8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004f0a:	8bfb      	ldrh	r3, [r7, #30]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d01e      	beq.n	8004f4e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004f10:	2300      	movs	r3, #0
 8004f12:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	f107 0310 	add.w	r3, r7, #16
 8004f20:	6812      	ldr	r2, [r2, #0]
 8004f22:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004f24:	693a      	ldr	r2, [r7, #16]
 8004f26:	6a3b      	ldr	r3, [r7, #32]
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	00db      	lsls	r3, r3, #3
 8004f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f30:	b2da      	uxtb	r2, r3
 8004f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f34:	701a      	strb	r2, [r3, #0]
      i++;
 8004f36:	6a3b      	ldr	r3, [r7, #32]
 8004f38:	3301      	adds	r3, #1
 8004f3a:	623b      	str	r3, [r7, #32]
      pDest++;
 8004f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3e:	3301      	adds	r3, #1
 8004f40:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004f42:	8bfb      	ldrh	r3, [r7, #30]
 8004f44:	3b01      	subs	r3, #1
 8004f46:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004f48:	8bfb      	ldrh	r3, [r7, #30]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d1ea      	bne.n	8004f24 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	372c      	adds	r7, #44	; 0x2c
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr

08004f5c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b085      	sub	sp, #20
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	785b      	ldrb	r3, [r3, #1]
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d12c      	bne.n	8004fd2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	015a      	lsls	r2, r3, #5
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	4413      	add	r3, r2
 8004f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	db12      	blt.n	8004fb0 <USB_EPSetStall+0x54>
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d00f      	beq.n	8004fb0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	015a      	lsls	r2, r3, #5
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	4413      	add	r3, r2
 8004f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68ba      	ldr	r2, [r7, #8]
 8004fa0:	0151      	lsls	r1, r2, #5
 8004fa2:	68fa      	ldr	r2, [r7, #12]
 8004fa4:	440a      	add	r2, r1
 8004fa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004faa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004fae:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	015a      	lsls	r2, r3, #5
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68ba      	ldr	r2, [r7, #8]
 8004fc0:	0151      	lsls	r1, r2, #5
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	440a      	add	r2, r1
 8004fc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004fce:	6013      	str	r3, [r2, #0]
 8004fd0:	e02b      	b.n	800502a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	015a      	lsls	r2, r3, #5
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	4413      	add	r3, r2
 8004fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	db12      	blt.n	800500a <USB_EPSetStall+0xae>
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d00f      	beq.n	800500a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	015a      	lsls	r2, r3, #5
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	4413      	add	r3, r2
 8004ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68ba      	ldr	r2, [r7, #8]
 8004ffa:	0151      	lsls	r1, r2, #5
 8004ffc:	68fa      	ldr	r2, [r7, #12]
 8004ffe:	440a      	add	r2, r1
 8005000:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005004:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005008:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	015a      	lsls	r2, r3, #5
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	4413      	add	r3, r2
 8005012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	68ba      	ldr	r2, [r7, #8]
 800501a:	0151      	lsls	r1, r2, #5
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	440a      	add	r2, r1
 8005020:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005024:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005028:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800502a:	2300      	movs	r3, #0
}
 800502c:	4618      	mov	r0, r3
 800502e:	3714      	adds	r7, #20
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005038:	b480      	push	{r7}
 800503a:	b085      	sub	sp, #20
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	785b      	ldrb	r3, [r3, #1]
 8005050:	2b01      	cmp	r3, #1
 8005052:	d128      	bne.n	80050a6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	015a      	lsls	r2, r3, #5
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	4413      	add	r3, r2
 800505c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68ba      	ldr	r2, [r7, #8]
 8005064:	0151      	lsls	r1, r2, #5
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	440a      	add	r2, r1
 800506a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800506e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005072:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	791b      	ldrb	r3, [r3, #4]
 8005078:	2b03      	cmp	r3, #3
 800507a:	d003      	beq.n	8005084 <USB_EPClearStall+0x4c>
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	791b      	ldrb	r3, [r3, #4]
 8005080:	2b02      	cmp	r3, #2
 8005082:	d138      	bne.n	80050f6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	015a      	lsls	r2, r3, #5
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	4413      	add	r3, r2
 800508c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	68ba      	ldr	r2, [r7, #8]
 8005094:	0151      	lsls	r1, r2, #5
 8005096:	68fa      	ldr	r2, [r7, #12]
 8005098:	440a      	add	r2, r1
 800509a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800509e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050a2:	6013      	str	r3, [r2, #0]
 80050a4:	e027      	b.n	80050f6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	015a      	lsls	r2, r3, #5
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	4413      	add	r3, r2
 80050ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	68ba      	ldr	r2, [r7, #8]
 80050b6:	0151      	lsls	r1, r2, #5
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	440a      	add	r2, r1
 80050bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80050c4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	791b      	ldrb	r3, [r3, #4]
 80050ca:	2b03      	cmp	r3, #3
 80050cc:	d003      	beq.n	80050d6 <USB_EPClearStall+0x9e>
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	791b      	ldrb	r3, [r3, #4]
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	d10f      	bne.n	80050f6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	015a      	lsls	r2, r3, #5
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	4413      	add	r3, r2
 80050de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68ba      	ldr	r2, [r7, #8]
 80050e6:	0151      	lsls	r1, r2, #5
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	440a      	add	r2, r1
 80050ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050f4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3714      	adds	r7, #20
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005104:	b480      	push	{r7}
 8005106:	b085      	sub	sp, #20
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	460b      	mov	r3, r1
 800510e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68fa      	ldr	r2, [r7, #12]
 800511e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005122:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005126:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	78fb      	ldrb	r3, [r7, #3]
 8005132:	011b      	lsls	r3, r3, #4
 8005134:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005138:	68f9      	ldr	r1, [r7, #12]
 800513a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800513e:	4313      	orrs	r3, r2
 8005140:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005142:	2300      	movs	r3, #0
}
 8005144:	4618      	mov	r0, r3
 8005146:	3714      	adds	r7, #20
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005150:	b480      	push	{r7}
 8005152:	b085      	sub	sp, #20
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800516a:	f023 0303 	bic.w	r3, r3, #3
 800516e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800517e:	f023 0302 	bic.w	r3, r3, #2
 8005182:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3714      	adds	r7, #20
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr

08005192 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005192:	b480      	push	{r7}
 8005194:	b085      	sub	sp, #20
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80051ac:	f023 0303 	bic.w	r3, r3, #3
 80051b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051c0:	f043 0302 	orr.w	r3, r3, #2
 80051c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80051c6:	2300      	movs	r3, #0
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3714      	adds	r7, #20
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b085      	sub	sp, #20
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	695b      	ldr	r3, [r3, #20]
 80051e0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	68fa      	ldr	r2, [r7, #12]
 80051e8:	4013      	ands	r3, r2
 80051ea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80051ec:	68fb      	ldr	r3, [r7, #12]
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3714      	adds	r7, #20
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr

080051fa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80051fa:	b480      	push	{r7}
 80051fc:	b085      	sub	sp, #20
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005216:	69db      	ldr	r3, [r3, #28]
 8005218:	68ba      	ldr	r2, [r7, #8]
 800521a:	4013      	ands	r3, r2
 800521c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	0c1b      	lsrs	r3, r3, #16
}
 8005222:	4618      	mov	r0, r3
 8005224:	3714      	adds	r7, #20
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr

0800522e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800522e:	b480      	push	{r7}
 8005230:	b085      	sub	sp, #20
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005240:	699b      	ldr	r3, [r3, #24]
 8005242:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800524a:	69db      	ldr	r3, [r3, #28]
 800524c:	68ba      	ldr	r2, [r7, #8]
 800524e:	4013      	ands	r3, r2
 8005250:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	b29b      	uxth	r3, r3
}
 8005256:	4618      	mov	r0, r3
 8005258:	3714      	adds	r7, #20
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr

08005262 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005262:	b480      	push	{r7}
 8005264:	b085      	sub	sp, #20
 8005266:	af00      	add	r7, sp, #0
 8005268:	6078      	str	r0, [r7, #4]
 800526a:	460b      	mov	r3, r1
 800526c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005272:	78fb      	ldrb	r3, [r7, #3]
 8005274:	015a      	lsls	r2, r3, #5
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	4413      	add	r3, r2
 800527a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	68ba      	ldr	r2, [r7, #8]
 800528c:	4013      	ands	r3, r2
 800528e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005290:	68bb      	ldr	r3, [r7, #8]
}
 8005292:	4618      	mov	r0, r3
 8005294:	3714      	adds	r7, #20
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr

0800529e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800529e:	b480      	push	{r7}
 80052a0:	b087      	sub	sp, #28
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
 80052a6:	460b      	mov	r3, r1
 80052a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052c0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80052c2:	78fb      	ldrb	r3, [r7, #3]
 80052c4:	f003 030f 	and.w	r3, r3, #15
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	fa22 f303 	lsr.w	r3, r2, r3
 80052ce:	01db      	lsls	r3, r3, #7
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	693a      	ldr	r2, [r7, #16]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80052d8:	78fb      	ldrb	r3, [r7, #3]
 80052da:	015a      	lsls	r2, r3, #5
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	4413      	add	r3, r2
 80052e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	693a      	ldr	r2, [r7, #16]
 80052e8:	4013      	ands	r3, r2
 80052ea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80052ec:	68bb      	ldr	r3, [r7, #8]
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	371c      	adds	r7, #28
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr

080052fa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80052fa:	b480      	push	{r7}
 80052fc:	b083      	sub	sp, #12
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	695b      	ldr	r3, [r3, #20]
 8005306:	f003 0301 	and.w	r3, r3, #1
}
 800530a:	4618      	mov	r0, r3
 800530c:	370c      	adds	r7, #12
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr

08005316 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005316:	b480      	push	{r7}
 8005318:	b085      	sub	sp, #20
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005330:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005334:	f023 0307 	bic.w	r3, r3, #7
 8005338:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800534c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800534e:	2300      	movs	r3, #0
}
 8005350:	4618      	mov	r0, r3
 8005352:	3714      	adds	r7, #20
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800535c:	b480      	push	{r7}
 800535e:	b087      	sub	sp, #28
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	460b      	mov	r3, r1
 8005366:	607a      	str	r2, [r7, #4]
 8005368:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	333c      	adds	r3, #60	; 0x3c
 8005372:	3304      	adds	r3, #4
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	4a26      	ldr	r2, [pc, #152]	; (8005414 <USB_EP0_OutStart+0xb8>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d90a      	bls.n	8005396 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800538c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005390:	d101      	bne.n	8005396 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005392:	2300      	movs	r3, #0
 8005394:	e037      	b.n	8005406 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800539c:	461a      	mov	r2, r3
 800539e:	2300      	movs	r3, #0
 80053a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	697a      	ldr	r2, [r7, #20]
 80053ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80053b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	697a      	ldr	r2, [r7, #20]
 80053c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053c4:	f043 0318 	orr.w	r3, r3, #24
 80053c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	697a      	ldr	r2, [r7, #20]
 80053d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053d8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80053dc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80053de:	7afb      	ldrb	r3, [r7, #11]
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d10f      	bne.n	8005404 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ea:	461a      	mov	r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	697a      	ldr	r2, [r7, #20]
 80053fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053fe:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005402:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	371c      	adds	r7, #28
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	4f54300a 	.word	0x4f54300a

08005418 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005418:	b480      	push	{r7}
 800541a:	b085      	sub	sp, #20
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005420:	2300      	movs	r3, #0
 8005422:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	3301      	adds	r3, #1
 8005428:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	4a13      	ldr	r2, [pc, #76]	; (800547c <USB_CoreReset+0x64>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d901      	bls.n	8005436 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	e01b      	b.n	800546e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	2b00      	cmp	r3, #0
 800543c:	daf2      	bge.n	8005424 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800543e:	2300      	movs	r3, #0
 8005440:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	f043 0201 	orr.w	r2, r3, #1
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	3301      	adds	r3, #1
 8005452:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	4a09      	ldr	r2, [pc, #36]	; (800547c <USB_CoreReset+0x64>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d901      	bls.n	8005460 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800545c:	2303      	movs	r3, #3
 800545e:	e006      	b.n	800546e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	f003 0301 	and.w	r3, r3, #1
 8005468:	2b01      	cmp	r3, #1
 800546a:	d0f0      	beq.n	800544e <USB_CoreReset+0x36>

  return HAL_OK;
 800546c:	2300      	movs	r3, #0
}
 800546e:	4618      	mov	r0, r3
 8005470:	3714      	adds	r7, #20
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
 800547a:	bf00      	nop
 800547c:	00030d40 	.word	0x00030d40

08005480 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	460b      	mov	r3, r1
 800548a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800548c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005490:	f002 fc94 	bl	8007dbc <USBD_static_malloc>
 8005494:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d109      	bne.n	80054b0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	32b0      	adds	r2, #176	; 0xb0
 80054a6:	2100      	movs	r1, #0
 80054a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80054ac:	2302      	movs	r3, #2
 80054ae:	e0d4      	b.n	800565a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80054b0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80054b4:	2100      	movs	r1, #0
 80054b6:	68f8      	ldr	r0, [r7, #12]
 80054b8:	f002 fcf8 	bl	8007eac <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	32b0      	adds	r2, #176	; 0xb0
 80054c6:	68f9      	ldr	r1, [r7, #12]
 80054c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	32b0      	adds	r2, #176	; 0xb0
 80054d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	7c1b      	ldrb	r3, [r3, #16]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d138      	bne.n	800555a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80054e8:	4b5e      	ldr	r3, [pc, #376]	; (8005664 <USBD_CDC_Init+0x1e4>)
 80054ea:	7819      	ldrb	r1, [r3, #0]
 80054ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054f0:	2202      	movs	r2, #2
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f002 fb3f 	bl	8007b76 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80054f8:	4b5a      	ldr	r3, [pc, #360]	; (8005664 <USBD_CDC_Init+0x1e4>)
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	f003 020f 	and.w	r2, r3, #15
 8005500:	6879      	ldr	r1, [r7, #4]
 8005502:	4613      	mov	r3, r2
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	4413      	add	r3, r2
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	440b      	add	r3, r1
 800550c:	3324      	adds	r3, #36	; 0x24
 800550e:	2201      	movs	r2, #1
 8005510:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005512:	4b55      	ldr	r3, [pc, #340]	; (8005668 <USBD_CDC_Init+0x1e8>)
 8005514:	7819      	ldrb	r1, [r3, #0]
 8005516:	f44f 7300 	mov.w	r3, #512	; 0x200
 800551a:	2202      	movs	r2, #2
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f002 fb2a 	bl	8007b76 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005522:	4b51      	ldr	r3, [pc, #324]	; (8005668 <USBD_CDC_Init+0x1e8>)
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	f003 020f 	and.w	r2, r3, #15
 800552a:	6879      	ldr	r1, [r7, #4]
 800552c:	4613      	mov	r3, r2
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	4413      	add	r3, r2
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	440b      	add	r3, r1
 8005536:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800553a:	2201      	movs	r2, #1
 800553c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800553e:	4b4b      	ldr	r3, [pc, #300]	; (800566c <USBD_CDC_Init+0x1ec>)
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	f003 020f 	and.w	r2, r3, #15
 8005546:	6879      	ldr	r1, [r7, #4]
 8005548:	4613      	mov	r3, r2
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	4413      	add	r3, r2
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	440b      	add	r3, r1
 8005552:	3326      	adds	r3, #38	; 0x26
 8005554:	2210      	movs	r2, #16
 8005556:	801a      	strh	r2, [r3, #0]
 8005558:	e035      	b.n	80055c6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800555a:	4b42      	ldr	r3, [pc, #264]	; (8005664 <USBD_CDC_Init+0x1e4>)
 800555c:	7819      	ldrb	r1, [r3, #0]
 800555e:	2340      	movs	r3, #64	; 0x40
 8005560:	2202      	movs	r2, #2
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f002 fb07 	bl	8007b76 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005568:	4b3e      	ldr	r3, [pc, #248]	; (8005664 <USBD_CDC_Init+0x1e4>)
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	f003 020f 	and.w	r2, r3, #15
 8005570:	6879      	ldr	r1, [r7, #4]
 8005572:	4613      	mov	r3, r2
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	4413      	add	r3, r2
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	440b      	add	r3, r1
 800557c:	3324      	adds	r3, #36	; 0x24
 800557e:	2201      	movs	r2, #1
 8005580:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005582:	4b39      	ldr	r3, [pc, #228]	; (8005668 <USBD_CDC_Init+0x1e8>)
 8005584:	7819      	ldrb	r1, [r3, #0]
 8005586:	2340      	movs	r3, #64	; 0x40
 8005588:	2202      	movs	r2, #2
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f002 faf3 	bl	8007b76 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005590:	4b35      	ldr	r3, [pc, #212]	; (8005668 <USBD_CDC_Init+0x1e8>)
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	f003 020f 	and.w	r2, r3, #15
 8005598:	6879      	ldr	r1, [r7, #4]
 800559a:	4613      	mov	r3, r2
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	4413      	add	r3, r2
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	440b      	add	r3, r1
 80055a4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80055a8:	2201      	movs	r2, #1
 80055aa:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80055ac:	4b2f      	ldr	r3, [pc, #188]	; (800566c <USBD_CDC_Init+0x1ec>)
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	f003 020f 	and.w	r2, r3, #15
 80055b4:	6879      	ldr	r1, [r7, #4]
 80055b6:	4613      	mov	r3, r2
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	4413      	add	r3, r2
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	440b      	add	r3, r1
 80055c0:	3326      	adds	r3, #38	; 0x26
 80055c2:	2210      	movs	r2, #16
 80055c4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80055c6:	4b29      	ldr	r3, [pc, #164]	; (800566c <USBD_CDC_Init+0x1ec>)
 80055c8:	7819      	ldrb	r1, [r3, #0]
 80055ca:	2308      	movs	r3, #8
 80055cc:	2203      	movs	r2, #3
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f002 fad1 	bl	8007b76 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80055d4:	4b25      	ldr	r3, [pc, #148]	; (800566c <USBD_CDC_Init+0x1ec>)
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	f003 020f 	and.w	r2, r3, #15
 80055dc:	6879      	ldr	r1, [r7, #4]
 80055de:	4613      	mov	r3, r2
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	4413      	add	r3, r2
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	440b      	add	r3, r1
 80055e8:	3324      	adds	r3, #36	; 0x24
 80055ea:	2201      	movs	r2, #1
 80055ec:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	33b0      	adds	r3, #176	; 0xb0
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	4413      	add	r3, r2
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2200      	movs	r2, #0
 800560e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2200      	movs	r2, #0
 8005616:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005620:	2b00      	cmp	r3, #0
 8005622:	d101      	bne.n	8005628 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005624:	2302      	movs	r3, #2
 8005626:	e018      	b.n	800565a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	7c1b      	ldrb	r3, [r3, #16]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d10a      	bne.n	8005646 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005630:	4b0d      	ldr	r3, [pc, #52]	; (8005668 <USBD_CDC_Init+0x1e8>)
 8005632:	7819      	ldrb	r1, [r3, #0]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800563a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f002 fb88 	bl	8007d54 <USBD_LL_PrepareReceive>
 8005644:	e008      	b.n	8005658 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005646:	4b08      	ldr	r3, [pc, #32]	; (8005668 <USBD_CDC_Init+0x1e8>)
 8005648:	7819      	ldrb	r1, [r3, #0]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005650:	2340      	movs	r3, #64	; 0x40
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f002 fb7e 	bl	8007d54 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005658:	2300      	movs	r3, #0
}
 800565a:	4618      	mov	r0, r3
 800565c:	3710      	adds	r7, #16
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}
 8005662:	bf00      	nop
 8005664:	20000093 	.word	0x20000093
 8005668:	20000094 	.word	0x20000094
 800566c:	20000095 	.word	0x20000095

08005670 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	460b      	mov	r3, r1
 800567a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800567c:	4b3a      	ldr	r3, [pc, #232]	; (8005768 <USBD_CDC_DeInit+0xf8>)
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	4619      	mov	r1, r3
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f002 fa9d 	bl	8007bc2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005688:	4b37      	ldr	r3, [pc, #220]	; (8005768 <USBD_CDC_DeInit+0xf8>)
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	f003 020f 	and.w	r2, r3, #15
 8005690:	6879      	ldr	r1, [r7, #4]
 8005692:	4613      	mov	r3, r2
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	4413      	add	r3, r2
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	440b      	add	r3, r1
 800569c:	3324      	adds	r3, #36	; 0x24
 800569e:	2200      	movs	r2, #0
 80056a0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80056a2:	4b32      	ldr	r3, [pc, #200]	; (800576c <USBD_CDC_DeInit+0xfc>)
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	4619      	mov	r1, r3
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f002 fa8a 	bl	8007bc2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80056ae:	4b2f      	ldr	r3, [pc, #188]	; (800576c <USBD_CDC_DeInit+0xfc>)
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	f003 020f 	and.w	r2, r3, #15
 80056b6:	6879      	ldr	r1, [r7, #4]
 80056b8:	4613      	mov	r3, r2
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	4413      	add	r3, r2
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	440b      	add	r3, r1
 80056c2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80056c6:	2200      	movs	r2, #0
 80056c8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80056ca:	4b29      	ldr	r3, [pc, #164]	; (8005770 <USBD_CDC_DeInit+0x100>)
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	4619      	mov	r1, r3
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f002 fa76 	bl	8007bc2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80056d6:	4b26      	ldr	r3, [pc, #152]	; (8005770 <USBD_CDC_DeInit+0x100>)
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	f003 020f 	and.w	r2, r3, #15
 80056de:	6879      	ldr	r1, [r7, #4]
 80056e0:	4613      	mov	r3, r2
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	4413      	add	r3, r2
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	440b      	add	r3, r1
 80056ea:	3324      	adds	r3, #36	; 0x24
 80056ec:	2200      	movs	r2, #0
 80056ee:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80056f0:	4b1f      	ldr	r3, [pc, #124]	; (8005770 <USBD_CDC_DeInit+0x100>)
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	f003 020f 	and.w	r2, r3, #15
 80056f8:	6879      	ldr	r1, [r7, #4]
 80056fa:	4613      	mov	r3, r2
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	4413      	add	r3, r2
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	440b      	add	r3, r1
 8005704:	3326      	adds	r3, #38	; 0x26
 8005706:	2200      	movs	r2, #0
 8005708:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	32b0      	adds	r2, #176	; 0xb0
 8005714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d01f      	beq.n	800575c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	33b0      	adds	r3, #176	; 0xb0
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	4413      	add	r3, r2
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	32b0      	adds	r2, #176	; 0xb0
 800573a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800573e:	4618      	mov	r0, r3
 8005740:	f002 fb4a 	bl	8007dd8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	32b0      	adds	r2, #176	; 0xb0
 800574e:	2100      	movs	r1, #0
 8005750:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800575c:	2300      	movs	r3, #0
}
 800575e:	4618      	mov	r0, r3
 8005760:	3708      	adds	r7, #8
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	20000093 	.word	0x20000093
 800576c:	20000094 	.word	0x20000094
 8005770:	20000095 	.word	0x20000095

08005774 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b086      	sub	sp, #24
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	32b0      	adds	r2, #176	; 0xb0
 8005788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800578c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800578e:	2300      	movs	r3, #0
 8005790:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005792:	2300      	movs	r3, #0
 8005794:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005796:	2300      	movs	r3, #0
 8005798:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d101      	bne.n	80057a4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80057a0:	2303      	movs	r3, #3
 80057a2:	e0bf      	b.n	8005924 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d050      	beq.n	8005852 <USBD_CDC_Setup+0xde>
 80057b0:	2b20      	cmp	r3, #32
 80057b2:	f040 80af 	bne.w	8005914 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	88db      	ldrh	r3, [r3, #6]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d03a      	beq.n	8005834 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	b25b      	sxtb	r3, r3
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	da1b      	bge.n	8005800 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	33b0      	adds	r3, #176	; 0xb0
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	4413      	add	r3, r2
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	683a      	ldr	r2, [r7, #0]
 80057dc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80057de:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80057e0:	683a      	ldr	r2, [r7, #0]
 80057e2:	88d2      	ldrh	r2, [r2, #6]
 80057e4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	88db      	ldrh	r3, [r3, #6]
 80057ea:	2b07      	cmp	r3, #7
 80057ec:	bf28      	it	cs
 80057ee:	2307      	movcs	r3, #7
 80057f0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	89fa      	ldrh	r2, [r7, #14]
 80057f6:	4619      	mov	r1, r3
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f001 fd89 	bl	8007310 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80057fe:	e090      	b.n	8005922 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	785a      	ldrb	r2, [r3, #1]
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	88db      	ldrh	r3, [r3, #6]
 800580e:	2b3f      	cmp	r3, #63	; 0x3f
 8005810:	d803      	bhi.n	800581a <USBD_CDC_Setup+0xa6>
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	88db      	ldrh	r3, [r3, #6]
 8005816:	b2da      	uxtb	r2, r3
 8005818:	e000      	b.n	800581c <USBD_CDC_Setup+0xa8>
 800581a:	2240      	movs	r2, #64	; 0x40
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005822:	6939      	ldr	r1, [r7, #16]
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800582a:	461a      	mov	r2, r3
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f001 fd9b 	bl	8007368 <USBD_CtlPrepareRx>
      break;
 8005832:	e076      	b.n	8005922 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	33b0      	adds	r3, #176	; 0xb0
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	4413      	add	r3, r2
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	683a      	ldr	r2, [r7, #0]
 8005848:	7850      	ldrb	r0, [r2, #1]
 800584a:	2200      	movs	r2, #0
 800584c:	6839      	ldr	r1, [r7, #0]
 800584e:	4798      	blx	r3
      break;
 8005850:	e067      	b.n	8005922 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	785b      	ldrb	r3, [r3, #1]
 8005856:	2b0b      	cmp	r3, #11
 8005858:	d851      	bhi.n	80058fe <USBD_CDC_Setup+0x18a>
 800585a:	a201      	add	r2, pc, #4	; (adr r2, 8005860 <USBD_CDC_Setup+0xec>)
 800585c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005860:	08005891 	.word	0x08005891
 8005864:	0800590d 	.word	0x0800590d
 8005868:	080058ff 	.word	0x080058ff
 800586c:	080058ff 	.word	0x080058ff
 8005870:	080058ff 	.word	0x080058ff
 8005874:	080058ff 	.word	0x080058ff
 8005878:	080058ff 	.word	0x080058ff
 800587c:	080058ff 	.word	0x080058ff
 8005880:	080058ff 	.word	0x080058ff
 8005884:	080058ff 	.word	0x080058ff
 8005888:	080058bb 	.word	0x080058bb
 800588c:	080058e5 	.word	0x080058e5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005896:	b2db      	uxtb	r3, r3
 8005898:	2b03      	cmp	r3, #3
 800589a:	d107      	bne.n	80058ac <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800589c:	f107 030a 	add.w	r3, r7, #10
 80058a0:	2202      	movs	r2, #2
 80058a2:	4619      	mov	r1, r3
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f001 fd33 	bl	8007310 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80058aa:	e032      	b.n	8005912 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80058ac:	6839      	ldr	r1, [r7, #0]
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f001 fcbd 	bl	800722e <USBD_CtlError>
            ret = USBD_FAIL;
 80058b4:	2303      	movs	r3, #3
 80058b6:	75fb      	strb	r3, [r7, #23]
          break;
 80058b8:	e02b      	b.n	8005912 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	2b03      	cmp	r3, #3
 80058c4:	d107      	bne.n	80058d6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80058c6:	f107 030d 	add.w	r3, r7, #13
 80058ca:	2201      	movs	r2, #1
 80058cc:	4619      	mov	r1, r3
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f001 fd1e 	bl	8007310 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80058d4:	e01d      	b.n	8005912 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80058d6:	6839      	ldr	r1, [r7, #0]
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f001 fca8 	bl	800722e <USBD_CtlError>
            ret = USBD_FAIL;
 80058de:	2303      	movs	r3, #3
 80058e0:	75fb      	strb	r3, [r7, #23]
          break;
 80058e2:	e016      	b.n	8005912 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	2b03      	cmp	r3, #3
 80058ee:	d00f      	beq.n	8005910 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80058f0:	6839      	ldr	r1, [r7, #0]
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f001 fc9b 	bl	800722e <USBD_CtlError>
            ret = USBD_FAIL;
 80058f8:	2303      	movs	r3, #3
 80058fa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80058fc:	e008      	b.n	8005910 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80058fe:	6839      	ldr	r1, [r7, #0]
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f001 fc94 	bl	800722e <USBD_CtlError>
          ret = USBD_FAIL;
 8005906:	2303      	movs	r3, #3
 8005908:	75fb      	strb	r3, [r7, #23]
          break;
 800590a:	e002      	b.n	8005912 <USBD_CDC_Setup+0x19e>
          break;
 800590c:	bf00      	nop
 800590e:	e008      	b.n	8005922 <USBD_CDC_Setup+0x1ae>
          break;
 8005910:	bf00      	nop
      }
      break;
 8005912:	e006      	b.n	8005922 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005914:	6839      	ldr	r1, [r7, #0]
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f001 fc89 	bl	800722e <USBD_CtlError>
      ret = USBD_FAIL;
 800591c:	2303      	movs	r3, #3
 800591e:	75fb      	strb	r3, [r7, #23]
      break;
 8005920:	bf00      	nop
  }

  return (uint8_t)ret;
 8005922:	7dfb      	ldrb	r3, [r7, #23]
}
 8005924:	4618      	mov	r0, r3
 8005926:	3718      	adds	r7, #24
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	460b      	mov	r3, r1
 8005936:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800593e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	32b0      	adds	r2, #176	; 0xb0
 800594a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d101      	bne.n	8005956 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005952:	2303      	movs	r3, #3
 8005954:	e065      	b.n	8005a22 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	32b0      	adds	r2, #176	; 0xb0
 8005960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005964:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005966:	78fb      	ldrb	r3, [r7, #3]
 8005968:	f003 020f 	and.w	r2, r3, #15
 800596c:	6879      	ldr	r1, [r7, #4]
 800596e:	4613      	mov	r3, r2
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	4413      	add	r3, r2
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	440b      	add	r3, r1
 8005978:	3318      	adds	r3, #24
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d02f      	beq.n	80059e0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005980:	78fb      	ldrb	r3, [r7, #3]
 8005982:	f003 020f 	and.w	r2, r3, #15
 8005986:	6879      	ldr	r1, [r7, #4]
 8005988:	4613      	mov	r3, r2
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	4413      	add	r3, r2
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	440b      	add	r3, r1
 8005992:	3318      	adds	r3, #24
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	78fb      	ldrb	r3, [r7, #3]
 8005998:	f003 010f 	and.w	r1, r3, #15
 800599c:	68f8      	ldr	r0, [r7, #12]
 800599e:	460b      	mov	r3, r1
 80059a0:	00db      	lsls	r3, r3, #3
 80059a2:	440b      	add	r3, r1
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	4403      	add	r3, r0
 80059a8:	3348      	adds	r3, #72	; 0x48
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	fbb2 f1f3 	udiv	r1, r2, r3
 80059b0:	fb01 f303 	mul.w	r3, r1, r3
 80059b4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d112      	bne.n	80059e0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80059ba:	78fb      	ldrb	r3, [r7, #3]
 80059bc:	f003 020f 	and.w	r2, r3, #15
 80059c0:	6879      	ldr	r1, [r7, #4]
 80059c2:	4613      	mov	r3, r2
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	4413      	add	r3, r2
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	440b      	add	r3, r1
 80059cc:	3318      	adds	r3, #24
 80059ce:	2200      	movs	r2, #0
 80059d0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80059d2:	78f9      	ldrb	r1, [r7, #3]
 80059d4:	2300      	movs	r3, #0
 80059d6:	2200      	movs	r2, #0
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f002 f99a 	bl	8007d12 <USBD_LL_Transmit>
 80059de:	e01f      	b.n	8005a20 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	33b0      	adds	r3, #176	; 0xb0
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	4413      	add	r3, r2
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d010      	beq.n	8005a20 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	33b0      	adds	r3, #176	; 0xb0
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	4413      	add	r3, r2
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	691b      	ldr	r3, [r3, #16]
 8005a10:	68ba      	ldr	r2, [r7, #8]
 8005a12:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005a16:	68ba      	ldr	r2, [r7, #8]
 8005a18:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005a1c:	78fa      	ldrb	r2, [r7, #3]
 8005a1e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005a20:	2300      	movs	r3, #0
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3710      	adds	r7, #16
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}

08005a2a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005a2a:	b580      	push	{r7, lr}
 8005a2c:	b084      	sub	sp, #16
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]
 8005a32:	460b      	mov	r3, r1
 8005a34:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	32b0      	adds	r2, #176	; 0xb0
 8005a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a44:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	32b0      	adds	r2, #176	; 0xb0
 8005a50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d101      	bne.n	8005a5c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005a58:	2303      	movs	r3, #3
 8005a5a:	e01a      	b.n	8005a92 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005a5c:	78fb      	ldrb	r3, [r7, #3]
 8005a5e:	4619      	mov	r1, r3
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f002 f998 	bl	8007d96 <USBD_LL_GetRxDataSize>
 8005a66:	4602      	mov	r2, r0
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	33b0      	adds	r3, #176	; 0xb0
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	4413      	add	r3, r2
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005a86:	68fa      	ldr	r2, [r7, #12]
 8005a88:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005a8c:	4611      	mov	r1, r2
 8005a8e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005a90:	2300      	movs	r3, #0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3710      	adds	r7, #16
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}

08005a9a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005a9a:	b580      	push	{r7, lr}
 8005a9c:	b084      	sub	sp, #16
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	32b0      	adds	r2, #176	; 0xb0
 8005aac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ab0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d101      	bne.n	8005abc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005ab8:	2303      	movs	r3, #3
 8005aba:	e025      	b.n	8005b08 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	33b0      	adds	r3, #176	; 0xb0
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	4413      	add	r3, r2
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d01a      	beq.n	8005b06 <USBD_CDC_EP0_RxReady+0x6c>
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005ad6:	2bff      	cmp	r3, #255	; 0xff
 8005ad8:	d015      	beq.n	8005b06 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	33b0      	adds	r3, #176	; 0xb0
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	4413      	add	r3, r2
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	68fa      	ldr	r2, [r7, #12]
 8005aee:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8005af2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005afa:	b292      	uxth	r2, r2
 8005afc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	22ff      	movs	r2, #255	; 0xff
 8005b02:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005b06:	2300      	movs	r3, #0
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3710      	adds	r7, #16
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b086      	sub	sp, #24
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005b18:	2182      	movs	r1, #130	; 0x82
 8005b1a:	4818      	ldr	r0, [pc, #96]	; (8005b7c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005b1c:	f000 fd4f 	bl	80065be <USBD_GetEpDesc>
 8005b20:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005b22:	2101      	movs	r1, #1
 8005b24:	4815      	ldr	r0, [pc, #84]	; (8005b7c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005b26:	f000 fd4a 	bl	80065be <USBD_GetEpDesc>
 8005b2a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005b2c:	2181      	movs	r1, #129	; 0x81
 8005b2e:	4813      	ldr	r0, [pc, #76]	; (8005b7c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005b30:	f000 fd45 	bl	80065be <USBD_GetEpDesc>
 8005b34:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d002      	beq.n	8005b42 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	2210      	movs	r2, #16
 8005b40:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d006      	beq.n	8005b56 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b50:	711a      	strb	r2, [r3, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d006      	beq.n	8005b6a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b64:	711a      	strb	r2, [r3, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2243      	movs	r2, #67	; 0x43
 8005b6e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005b70:	4b02      	ldr	r3, [pc, #8]	; (8005b7c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3718      	adds	r7, #24
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	20000050 	.word	0x20000050

08005b80 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b086      	sub	sp, #24
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005b88:	2182      	movs	r1, #130	; 0x82
 8005b8a:	4818      	ldr	r0, [pc, #96]	; (8005bec <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005b8c:	f000 fd17 	bl	80065be <USBD_GetEpDesc>
 8005b90:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005b92:	2101      	movs	r1, #1
 8005b94:	4815      	ldr	r0, [pc, #84]	; (8005bec <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005b96:	f000 fd12 	bl	80065be <USBD_GetEpDesc>
 8005b9a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005b9c:	2181      	movs	r1, #129	; 0x81
 8005b9e:	4813      	ldr	r0, [pc, #76]	; (8005bec <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005ba0:	f000 fd0d 	bl	80065be <USBD_GetEpDesc>
 8005ba4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d002      	beq.n	8005bb2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	2210      	movs	r2, #16
 8005bb0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d006      	beq.n	8005bc6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	711a      	strb	r2, [r3, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f042 0202 	orr.w	r2, r2, #2
 8005bc4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d006      	beq.n	8005bda <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	711a      	strb	r2, [r3, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f042 0202 	orr.w	r2, r2, #2
 8005bd8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2243      	movs	r2, #67	; 0x43
 8005bde:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005be0:	4b02      	ldr	r3, [pc, #8]	; (8005bec <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3718      	adds	r7, #24
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	20000050 	.word	0x20000050

08005bf0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b086      	sub	sp, #24
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005bf8:	2182      	movs	r1, #130	; 0x82
 8005bfa:	4818      	ldr	r0, [pc, #96]	; (8005c5c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005bfc:	f000 fcdf 	bl	80065be <USBD_GetEpDesc>
 8005c00:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005c02:	2101      	movs	r1, #1
 8005c04:	4815      	ldr	r0, [pc, #84]	; (8005c5c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005c06:	f000 fcda 	bl	80065be <USBD_GetEpDesc>
 8005c0a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005c0c:	2181      	movs	r1, #129	; 0x81
 8005c0e:	4813      	ldr	r0, [pc, #76]	; (8005c5c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005c10:	f000 fcd5 	bl	80065be <USBD_GetEpDesc>
 8005c14:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d002      	beq.n	8005c22 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	2210      	movs	r2, #16
 8005c20:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d006      	beq.n	8005c36 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c30:	711a      	strb	r2, [r3, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d006      	beq.n	8005c4a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c44:	711a      	strb	r2, [r3, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2243      	movs	r2, #67	; 0x43
 8005c4e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005c50:	4b02      	ldr	r3, [pc, #8]	; (8005c5c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3718      	adds	r7, #24
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
 8005c5a:	bf00      	nop
 8005c5c:	20000050 	.word	0x20000050

08005c60 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b083      	sub	sp, #12
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	220a      	movs	r2, #10
 8005c6c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005c6e:	4b03      	ldr	r3, [pc, #12]	; (8005c7c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	370c      	adds	r7, #12
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr
 8005c7c:	2000000c 	.word	0x2000000c

08005c80 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d101      	bne.n	8005c94 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005c90:	2303      	movs	r3, #3
 8005c92:	e009      	b.n	8005ca8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	33b0      	adds	r3, #176	; 0xb0
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	4413      	add	r3, r2
 8005ca2:	683a      	ldr	r2, [r7, #0]
 8005ca4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005ca6:	2300      	movs	r3, #0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	370c      	adds	r7, #12
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b087      	sub	sp, #28
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	60b9      	str	r1, [r7, #8]
 8005cbe:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	32b0      	adds	r2, #176	; 0xb0
 8005cca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cce:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d101      	bne.n	8005cda <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005cd6:	2303      	movs	r3, #3
 8005cd8:	e008      	b.n	8005cec <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	68ba      	ldr	r2, [r7, #8]
 8005cde:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005cea:	2300      	movs	r3, #0
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	371c      	adds	r7, #28
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr

08005cf8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b085      	sub	sp, #20
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	32b0      	adds	r2, #176	; 0xb0
 8005d0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d10:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d101      	bne.n	8005d1c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005d18:	2303      	movs	r3, #3
 8005d1a:	e004      	b.n	8005d26 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	683a      	ldr	r2, [r7, #0]
 8005d20:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3714      	adds	r7, #20
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr
	...

08005d34 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	32b0      	adds	r2, #176	; 0xb0
 8005d46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d4a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	32b0      	adds	r2, #176	; 0xb0
 8005d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d101      	bne.n	8005d66 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005d62:	2303      	movs	r3, #3
 8005d64:	e025      	b.n	8005db2 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d11f      	bne.n	8005db0 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005d78:	4b10      	ldr	r3, [pc, #64]	; (8005dbc <USBD_CDC_TransmitPacket+0x88>)
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	f003 020f 	and.w	r2, r3, #15
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	4613      	mov	r3, r2
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	4413      	add	r3, r2
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	4403      	add	r3, r0
 8005d92:	3318      	adds	r3, #24
 8005d94:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005d96:	4b09      	ldr	r3, [pc, #36]	; (8005dbc <USBD_CDC_TransmitPacket+0x88>)
 8005d98:	7819      	ldrb	r1, [r3, #0]
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f001 ffb3 	bl	8007d12 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005dac:	2300      	movs	r3, #0
 8005dae:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3710      	adds	r7, #16
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	bf00      	nop
 8005dbc:	20000093 	.word	0x20000093

08005dc0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	32b0      	adds	r2, #176	; 0xb0
 8005dd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dd6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	32b0      	adds	r2, #176	; 0xb0
 8005de2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d101      	bne.n	8005dee <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005dea:	2303      	movs	r3, #3
 8005dec:	e018      	b.n	8005e20 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	7c1b      	ldrb	r3, [r3, #16]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d10a      	bne.n	8005e0c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005df6:	4b0c      	ldr	r3, [pc, #48]	; (8005e28 <USBD_CDC_ReceivePacket+0x68>)
 8005df8:	7819      	ldrb	r1, [r3, #0]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f001 ffa5 	bl	8007d54 <USBD_LL_PrepareReceive>
 8005e0a:	e008      	b.n	8005e1e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005e0c:	4b06      	ldr	r3, [pc, #24]	; (8005e28 <USBD_CDC_ReceivePacket+0x68>)
 8005e0e:	7819      	ldrb	r1, [r3, #0]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e16:	2340      	movs	r3, #64	; 0x40
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f001 ff9b 	bl	8007d54 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005e1e:	2300      	movs	r3, #0
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3710      	adds	r7, #16
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	20000094 	.word	0x20000094

08005e2c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b086      	sub	sp, #24
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	60f8      	str	r0, [r7, #12]
 8005e34:	60b9      	str	r1, [r7, #8]
 8005e36:	4613      	mov	r3, r2
 8005e38:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d101      	bne.n	8005e44 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005e40:	2303      	movs	r3, #3
 8005e42:	e01f      	b.n	8005e84 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d003      	beq.n	8005e6a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	68ba      	ldr	r2, [r7, #8]
 8005e66:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	79fa      	ldrb	r2, [r7, #7]
 8005e76:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005e78:	68f8      	ldr	r0, [r7, #12]
 8005e7a:	f001 fe15 	bl	8007aa8 <USBD_LL_Init>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005e82:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3718      	adds	r7, #24
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005e96:	2300      	movs	r3, #0
 8005e98:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d101      	bne.n	8005ea4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005ea0:	2303      	movs	r3, #3
 8005ea2:	e025      	b.n	8005ef0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	683a      	ldr	r2, [r7, #0]
 8005ea8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	32ae      	adds	r2, #174	; 0xae
 8005eb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d00f      	beq.n	8005ee0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	32ae      	adds	r2, #174	; 0xae
 8005eca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed0:	f107 020e 	add.w	r2, r7, #14
 8005ed4:	4610      	mov	r0, r2
 8005ed6:	4798      	blx	r3
 8005ed8:	4602      	mov	r2, r0
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005ee6:	1c5a      	adds	r2, r3, #1
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005eee:	2300      	movs	r3, #0
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3710      	adds	r7, #16
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}

08005ef8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b082      	sub	sp, #8
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f001 fe1d 	bl	8007b40 <USBD_LL_Start>
 8005f06:	4603      	mov	r3, r0
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3708      	adds	r7, #8
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b083      	sub	sp, #12
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005f18:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	370c      	adds	r7, #12
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr

08005f26 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f26:	b580      	push	{r7, lr}
 8005f28:	b084      	sub	sp, #16
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	6078      	str	r0, [r7, #4]
 8005f2e:	460b      	mov	r3, r1
 8005f30:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f32:	2300      	movs	r3, #0
 8005f34:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d009      	beq.n	8005f54 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	78fa      	ldrb	r2, [r7, #3]
 8005f4a:	4611      	mov	r1, r2
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	4798      	blx	r3
 8005f50:	4603      	mov	r3, r0
 8005f52:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3710      	adds	r7, #16
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}

08005f5e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f5e:	b580      	push	{r7, lr}
 8005f60:	b084      	sub	sp, #16
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	6078      	str	r0, [r7, #4]
 8005f66:	460b      	mov	r3, r1
 8005f68:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	78fa      	ldrb	r2, [r7, #3]
 8005f78:	4611      	mov	r1, r2
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	4798      	blx	r3
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d001      	beq.n	8005f88 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005f84:	2303      	movs	r3, #3
 8005f86:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3710      	adds	r7, #16
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}

08005f92 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005f92:	b580      	push	{r7, lr}
 8005f94:	b084      	sub	sp, #16
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
 8005f9a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005fa2:	6839      	ldr	r1, [r7, #0]
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f001 f908 	bl	80071ba <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2201      	movs	r2, #1
 8005fae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005fb8:	461a      	mov	r2, r3
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005fc6:	f003 031f 	and.w	r3, r3, #31
 8005fca:	2b02      	cmp	r3, #2
 8005fcc:	d01a      	beq.n	8006004 <USBD_LL_SetupStage+0x72>
 8005fce:	2b02      	cmp	r3, #2
 8005fd0:	d822      	bhi.n	8006018 <USBD_LL_SetupStage+0x86>
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d002      	beq.n	8005fdc <USBD_LL_SetupStage+0x4a>
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d00a      	beq.n	8005ff0 <USBD_LL_SetupStage+0x5e>
 8005fda:	e01d      	b.n	8006018 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f000 fb5f 	bl	80066a8 <USBD_StdDevReq>
 8005fea:	4603      	mov	r3, r0
 8005fec:	73fb      	strb	r3, [r7, #15]
      break;
 8005fee:	e020      	b.n	8006032 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f000 fbc7 	bl	800678c <USBD_StdItfReq>
 8005ffe:	4603      	mov	r3, r0
 8006000:	73fb      	strb	r3, [r7, #15]
      break;
 8006002:	e016      	b.n	8006032 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800600a:	4619      	mov	r1, r3
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f000 fc29 	bl	8006864 <USBD_StdEPReq>
 8006012:	4603      	mov	r3, r0
 8006014:	73fb      	strb	r3, [r7, #15]
      break;
 8006016:	e00c      	b.n	8006032 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800601e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006022:	b2db      	uxtb	r3, r3
 8006024:	4619      	mov	r1, r3
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f001 fdea 	bl	8007c00 <USBD_LL_StallEP>
 800602c:	4603      	mov	r3, r0
 800602e:	73fb      	strb	r3, [r7, #15]
      break;
 8006030:	bf00      	nop
  }

  return ret;
 8006032:	7bfb      	ldrb	r3, [r7, #15]
}
 8006034:	4618      	mov	r0, r3
 8006036:	3710      	adds	r7, #16
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b086      	sub	sp, #24
 8006040:	af00      	add	r7, sp, #0
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	460b      	mov	r3, r1
 8006046:	607a      	str	r2, [r7, #4]
 8006048:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800604a:	2300      	movs	r3, #0
 800604c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800604e:	7afb      	ldrb	r3, [r7, #11]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d16e      	bne.n	8006132 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800605a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006062:	2b03      	cmp	r3, #3
 8006064:	f040 8098 	bne.w	8006198 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	689a      	ldr	r2, [r3, #8]
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	429a      	cmp	r2, r3
 8006072:	d913      	bls.n	800609c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	689a      	ldr	r2, [r3, #8]
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	1ad2      	subs	r2, r2, r3
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	68da      	ldr	r2, [r3, #12]
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	4293      	cmp	r3, r2
 800608c:	bf28      	it	cs
 800608e:	4613      	movcs	r3, r2
 8006090:	461a      	mov	r2, r3
 8006092:	6879      	ldr	r1, [r7, #4]
 8006094:	68f8      	ldr	r0, [r7, #12]
 8006096:	f001 f984 	bl	80073a2 <USBD_CtlContinueRx>
 800609a:	e07d      	b.n	8006198 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80060a2:	f003 031f 	and.w	r3, r3, #31
 80060a6:	2b02      	cmp	r3, #2
 80060a8:	d014      	beq.n	80060d4 <USBD_LL_DataOutStage+0x98>
 80060aa:	2b02      	cmp	r3, #2
 80060ac:	d81d      	bhi.n	80060ea <USBD_LL_DataOutStage+0xae>
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d002      	beq.n	80060b8 <USBD_LL_DataOutStage+0x7c>
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d003      	beq.n	80060be <USBD_LL_DataOutStage+0x82>
 80060b6:	e018      	b.n	80060ea <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80060b8:	2300      	movs	r3, #0
 80060ba:	75bb      	strb	r3, [r7, #22]
            break;
 80060bc:	e018      	b.n	80060f0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	4619      	mov	r1, r3
 80060c8:	68f8      	ldr	r0, [r7, #12]
 80060ca:	f000 fa5e 	bl	800658a <USBD_CoreFindIF>
 80060ce:	4603      	mov	r3, r0
 80060d0:	75bb      	strb	r3, [r7, #22]
            break;
 80060d2:	e00d      	b.n	80060f0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	4619      	mov	r1, r3
 80060de:	68f8      	ldr	r0, [r7, #12]
 80060e0:	f000 fa60 	bl	80065a4 <USBD_CoreFindEP>
 80060e4:	4603      	mov	r3, r0
 80060e6:	75bb      	strb	r3, [r7, #22]
            break;
 80060e8:	e002      	b.n	80060f0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80060ea:	2300      	movs	r3, #0
 80060ec:	75bb      	strb	r3, [r7, #22]
            break;
 80060ee:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80060f0:	7dbb      	ldrb	r3, [r7, #22]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d119      	bne.n	800612a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	2b03      	cmp	r3, #3
 8006100:	d113      	bne.n	800612a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006102:	7dba      	ldrb	r2, [r7, #22]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	32ae      	adds	r2, #174	; 0xae
 8006108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d00b      	beq.n	800612a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006112:	7dba      	ldrb	r2, [r7, #22]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800611a:	7dba      	ldrb	r2, [r7, #22]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	32ae      	adds	r2, #174	; 0xae
 8006120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006124:	691b      	ldr	r3, [r3, #16]
 8006126:	68f8      	ldr	r0, [r7, #12]
 8006128:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800612a:	68f8      	ldr	r0, [r7, #12]
 800612c:	f001 f94a 	bl	80073c4 <USBD_CtlSendStatus>
 8006130:	e032      	b.n	8006198 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006132:	7afb      	ldrb	r3, [r7, #11]
 8006134:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006138:	b2db      	uxtb	r3, r3
 800613a:	4619      	mov	r1, r3
 800613c:	68f8      	ldr	r0, [r7, #12]
 800613e:	f000 fa31 	bl	80065a4 <USBD_CoreFindEP>
 8006142:	4603      	mov	r3, r0
 8006144:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006146:	7dbb      	ldrb	r3, [r7, #22]
 8006148:	2bff      	cmp	r3, #255	; 0xff
 800614a:	d025      	beq.n	8006198 <USBD_LL_DataOutStage+0x15c>
 800614c:	7dbb      	ldrb	r3, [r7, #22]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d122      	bne.n	8006198 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006158:	b2db      	uxtb	r3, r3
 800615a:	2b03      	cmp	r3, #3
 800615c:	d117      	bne.n	800618e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800615e:	7dba      	ldrb	r2, [r7, #22]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	32ae      	adds	r2, #174	; 0xae
 8006164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006168:	699b      	ldr	r3, [r3, #24]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d00f      	beq.n	800618e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800616e:	7dba      	ldrb	r2, [r7, #22]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006176:	7dba      	ldrb	r2, [r7, #22]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	32ae      	adds	r2, #174	; 0xae
 800617c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006180:	699b      	ldr	r3, [r3, #24]
 8006182:	7afa      	ldrb	r2, [r7, #11]
 8006184:	4611      	mov	r1, r2
 8006186:	68f8      	ldr	r0, [r7, #12]
 8006188:	4798      	blx	r3
 800618a:	4603      	mov	r3, r0
 800618c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800618e:	7dfb      	ldrb	r3, [r7, #23]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d001      	beq.n	8006198 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006194:	7dfb      	ldrb	r3, [r7, #23]
 8006196:	e000      	b.n	800619a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006198:	2300      	movs	r3, #0
}
 800619a:	4618      	mov	r0, r3
 800619c:	3718      	adds	r7, #24
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}

080061a2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80061a2:	b580      	push	{r7, lr}
 80061a4:	b086      	sub	sp, #24
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	60f8      	str	r0, [r7, #12]
 80061aa:	460b      	mov	r3, r1
 80061ac:	607a      	str	r2, [r7, #4]
 80061ae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80061b0:	7afb      	ldrb	r3, [r7, #11]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d16f      	bne.n	8006296 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	3314      	adds	r3, #20
 80061ba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80061c2:	2b02      	cmp	r3, #2
 80061c4:	d15a      	bne.n	800627c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	689a      	ldr	r2, [r3, #8]
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d914      	bls.n	80061fc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	689a      	ldr	r2, [r3, #8]
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	1ad2      	subs	r2, r2, r3
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	461a      	mov	r2, r3
 80061e6:	6879      	ldr	r1, [r7, #4]
 80061e8:	68f8      	ldr	r0, [r7, #12]
 80061ea:	f001 f8ac 	bl	8007346 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80061ee:	2300      	movs	r3, #0
 80061f0:	2200      	movs	r2, #0
 80061f2:	2100      	movs	r1, #0
 80061f4:	68f8      	ldr	r0, [r7, #12]
 80061f6:	f001 fdad 	bl	8007d54 <USBD_LL_PrepareReceive>
 80061fa:	e03f      	b.n	800627c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	68da      	ldr	r2, [r3, #12]
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	429a      	cmp	r2, r3
 8006206:	d11c      	bne.n	8006242 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	685a      	ldr	r2, [r3, #4]
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006210:	429a      	cmp	r2, r3
 8006212:	d316      	bcc.n	8006242 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	685a      	ldr	r2, [r3, #4]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800621e:	429a      	cmp	r2, r3
 8006220:	d20f      	bcs.n	8006242 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006222:	2200      	movs	r2, #0
 8006224:	2100      	movs	r1, #0
 8006226:	68f8      	ldr	r0, [r7, #12]
 8006228:	f001 f88d 	bl	8007346 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2200      	movs	r2, #0
 8006230:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006234:	2300      	movs	r3, #0
 8006236:	2200      	movs	r2, #0
 8006238:	2100      	movs	r1, #0
 800623a:	68f8      	ldr	r0, [r7, #12]
 800623c:	f001 fd8a 	bl	8007d54 <USBD_LL_PrepareReceive>
 8006240:	e01c      	b.n	800627c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006248:	b2db      	uxtb	r3, r3
 800624a:	2b03      	cmp	r3, #3
 800624c:	d10f      	bne.n	800626e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d009      	beq.n	800626e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2200      	movs	r2, #0
 800625e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	68f8      	ldr	r0, [r7, #12]
 800626c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800626e:	2180      	movs	r1, #128	; 0x80
 8006270:	68f8      	ldr	r0, [r7, #12]
 8006272:	f001 fcc5 	bl	8007c00 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006276:	68f8      	ldr	r0, [r7, #12]
 8006278:	f001 f8b7 	bl	80073ea <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006282:	2b00      	cmp	r3, #0
 8006284:	d03a      	beq.n	80062fc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006286:	68f8      	ldr	r0, [r7, #12]
 8006288:	f7ff fe42 	bl	8005f10 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2200      	movs	r2, #0
 8006290:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006294:	e032      	b.n	80062fc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006296:	7afb      	ldrb	r3, [r7, #11]
 8006298:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800629c:	b2db      	uxtb	r3, r3
 800629e:	4619      	mov	r1, r3
 80062a0:	68f8      	ldr	r0, [r7, #12]
 80062a2:	f000 f97f 	bl	80065a4 <USBD_CoreFindEP>
 80062a6:	4603      	mov	r3, r0
 80062a8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80062aa:	7dfb      	ldrb	r3, [r7, #23]
 80062ac:	2bff      	cmp	r3, #255	; 0xff
 80062ae:	d025      	beq.n	80062fc <USBD_LL_DataInStage+0x15a>
 80062b0:	7dfb      	ldrb	r3, [r7, #23]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d122      	bne.n	80062fc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	2b03      	cmp	r3, #3
 80062c0:	d11c      	bne.n	80062fc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80062c2:	7dfa      	ldrb	r2, [r7, #23]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	32ae      	adds	r2, #174	; 0xae
 80062c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062cc:	695b      	ldr	r3, [r3, #20]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d014      	beq.n	80062fc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80062d2:	7dfa      	ldrb	r2, [r7, #23]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80062da:	7dfa      	ldrb	r2, [r7, #23]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	32ae      	adds	r2, #174	; 0xae
 80062e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062e4:	695b      	ldr	r3, [r3, #20]
 80062e6:	7afa      	ldrb	r2, [r7, #11]
 80062e8:	4611      	mov	r1, r2
 80062ea:	68f8      	ldr	r0, [r7, #12]
 80062ec:	4798      	blx	r3
 80062ee:	4603      	mov	r3, r0
 80062f0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80062f2:	7dbb      	ldrb	r3, [r7, #22]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d001      	beq.n	80062fc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80062f8:	7dbb      	ldrb	r3, [r7, #22]
 80062fa:	e000      	b.n	80062fe <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80062fc:	2300      	movs	r3, #0
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3718      	adds	r7, #24
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}

08006306 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006306:	b580      	push	{r7, lr}
 8006308:	b084      	sub	sp, #16
 800630a:	af00      	add	r7, sp, #0
 800630c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800630e:	2300      	movs	r3, #0
 8006310:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2201      	movs	r2, #1
 8006316:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800633e:	2b00      	cmp	r3, #0
 8006340:	d014      	beq.n	800636c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d00e      	beq.n	800636c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	6852      	ldr	r2, [r2, #4]
 800635a:	b2d2      	uxtb	r2, r2
 800635c:	4611      	mov	r1, r2
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	4798      	blx	r3
 8006362:	4603      	mov	r3, r0
 8006364:	2b00      	cmp	r3, #0
 8006366:	d001      	beq.n	800636c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006368:	2303      	movs	r3, #3
 800636a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800636c:	2340      	movs	r3, #64	; 0x40
 800636e:	2200      	movs	r2, #0
 8006370:	2100      	movs	r1, #0
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f001 fbff 	bl	8007b76 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2240      	movs	r2, #64	; 0x40
 8006384:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006388:	2340      	movs	r3, #64	; 0x40
 800638a:	2200      	movs	r2, #0
 800638c:	2180      	movs	r1, #128	; 0x80
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f001 fbf1 	bl	8007b76 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2240      	movs	r2, #64	; 0x40
 800639e:	621a      	str	r2, [r3, #32]

  return ret;
 80063a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3710      	adds	r7, #16
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}

080063aa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80063aa:	b480      	push	{r7}
 80063ac:	b083      	sub	sp, #12
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
 80063b2:	460b      	mov	r3, r1
 80063b4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	78fa      	ldrb	r2, [r7, #3]
 80063ba:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80063bc:	2300      	movs	r3, #0
}
 80063be:	4618      	mov	r0, r3
 80063c0:	370c      	adds	r7, #12
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr

080063ca <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80063ca:	b480      	push	{r7}
 80063cc:	b083      	sub	sp, #12
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063d8:	b2da      	uxtb	r2, r3
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2204      	movs	r2, #4
 80063e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80063e8:	2300      	movs	r3, #0
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	370c      	adds	r7, #12
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr

080063f6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80063f6:	b480      	push	{r7}
 80063f8:	b083      	sub	sp, #12
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006404:	b2db      	uxtb	r3, r3
 8006406:	2b04      	cmp	r3, #4
 8006408:	d106      	bne.n	8006418 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006410:	b2da      	uxtb	r2, r3
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006418:	2300      	movs	r3, #0
}
 800641a:	4618      	mov	r0, r3
 800641c:	370c      	adds	r7, #12
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr

08006426 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006426:	b580      	push	{r7, lr}
 8006428:	b082      	sub	sp, #8
 800642a:	af00      	add	r7, sp, #0
 800642c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006434:	b2db      	uxtb	r3, r3
 8006436:	2b03      	cmp	r3, #3
 8006438:	d110      	bne.n	800645c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006440:	2b00      	cmp	r3, #0
 8006442:	d00b      	beq.n	800645c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800644a:	69db      	ldr	r3, [r3, #28]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d005      	beq.n	800645c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006456:	69db      	ldr	r3, [r3, #28]
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800645c:	2300      	movs	r3, #0
}
 800645e:	4618      	mov	r0, r3
 8006460:	3708      	adds	r7, #8
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}

08006466 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006466:	b580      	push	{r7, lr}
 8006468:	b082      	sub	sp, #8
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
 800646e:	460b      	mov	r3, r1
 8006470:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	32ae      	adds	r2, #174	; 0xae
 800647c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d101      	bne.n	8006488 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006484:	2303      	movs	r3, #3
 8006486:	e01c      	b.n	80064c2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800648e:	b2db      	uxtb	r3, r3
 8006490:	2b03      	cmp	r3, #3
 8006492:	d115      	bne.n	80064c0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	32ae      	adds	r2, #174	; 0xae
 800649e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064a2:	6a1b      	ldr	r3, [r3, #32]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d00b      	beq.n	80064c0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	32ae      	adds	r2, #174	; 0xae
 80064b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064b6:	6a1b      	ldr	r3, [r3, #32]
 80064b8:	78fa      	ldrb	r2, [r7, #3]
 80064ba:	4611      	mov	r1, r2
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80064c0:	2300      	movs	r3, #0
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3708      	adds	r7, #8
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}

080064ca <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80064ca:	b580      	push	{r7, lr}
 80064cc:	b082      	sub	sp, #8
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	6078      	str	r0, [r7, #4]
 80064d2:	460b      	mov	r3, r1
 80064d4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	32ae      	adds	r2, #174	; 0xae
 80064e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d101      	bne.n	80064ec <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80064e8:	2303      	movs	r3, #3
 80064ea:	e01c      	b.n	8006526 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	2b03      	cmp	r3, #3
 80064f6:	d115      	bne.n	8006524 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	32ae      	adds	r2, #174	; 0xae
 8006502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006508:	2b00      	cmp	r3, #0
 800650a:	d00b      	beq.n	8006524 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	32ae      	adds	r2, #174	; 0xae
 8006516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800651a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651c:	78fa      	ldrb	r2, [r7, #3]
 800651e:	4611      	mov	r1, r2
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006524:	2300      	movs	r3, #0
}
 8006526:	4618      	mov	r0, r3
 8006528:	3708      	adds	r7, #8
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}

0800652e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800652e:	b480      	push	{r7}
 8006530:	b083      	sub	sp, #12
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006536:	2300      	movs	r3, #0
}
 8006538:	4618      	mov	r0, r3
 800653a:	370c      	adds	r7, #12
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800654c:	2300      	movs	r3, #0
 800654e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800655e:	2b00      	cmp	r3, #0
 8006560:	d00e      	beq.n	8006580 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	6852      	ldr	r2, [r2, #4]
 800656e:	b2d2      	uxtb	r2, r2
 8006570:	4611      	mov	r1, r2
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	4798      	blx	r3
 8006576:	4603      	mov	r3, r0
 8006578:	2b00      	cmp	r3, #0
 800657a:	d001      	beq.n	8006580 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800657c:	2303      	movs	r3, #3
 800657e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006580:	7bfb      	ldrb	r3, [r7, #15]
}
 8006582:	4618      	mov	r0, r3
 8006584:	3710      	adds	r7, #16
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}

0800658a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800658a:	b480      	push	{r7}
 800658c:	b083      	sub	sp, #12
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
 8006592:	460b      	mov	r3, r1
 8006594:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006596:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006598:	4618      	mov	r0, r3
 800659a:	370c      	adds	r7, #12
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b083      	sub	sp, #12
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	460b      	mov	r3, r1
 80065ae:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80065b0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	370c      	adds	r7, #12
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr

080065be <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80065be:	b580      	push	{r7, lr}
 80065c0:	b086      	sub	sp, #24
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	6078      	str	r0, [r7, #4]
 80065c6:	460b      	mov	r3, r1
 80065c8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80065d2:	2300      	movs	r3, #0
 80065d4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	885b      	ldrh	r3, [r3, #2]
 80065da:	b29a      	uxth	r2, r3
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d920      	bls.n	8006628 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80065ee:	e013      	b.n	8006618 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80065f0:	f107 030a 	add.w	r3, r7, #10
 80065f4:	4619      	mov	r1, r3
 80065f6:	6978      	ldr	r0, [r7, #20]
 80065f8:	f000 f81b 	bl	8006632 <USBD_GetNextDesc>
 80065fc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	785b      	ldrb	r3, [r3, #1]
 8006602:	2b05      	cmp	r3, #5
 8006604:	d108      	bne.n	8006618 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	789b      	ldrb	r3, [r3, #2]
 800660e:	78fa      	ldrb	r2, [r7, #3]
 8006610:	429a      	cmp	r2, r3
 8006612:	d008      	beq.n	8006626 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006614:	2300      	movs	r3, #0
 8006616:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	885b      	ldrh	r3, [r3, #2]
 800661c:	b29a      	uxth	r2, r3
 800661e:	897b      	ldrh	r3, [r7, #10]
 8006620:	429a      	cmp	r2, r3
 8006622:	d8e5      	bhi.n	80065f0 <USBD_GetEpDesc+0x32>
 8006624:	e000      	b.n	8006628 <USBD_GetEpDesc+0x6a>
          break;
 8006626:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006628:	693b      	ldr	r3, [r7, #16]
}
 800662a:	4618      	mov	r0, r3
 800662c:	3718      	adds	r7, #24
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}

08006632 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006632:	b480      	push	{r7}
 8006634:	b085      	sub	sp, #20
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
 800663a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	881a      	ldrh	r2, [r3, #0]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	b29b      	uxth	r3, r3
 800664a:	4413      	add	r3, r2
 800664c:	b29a      	uxth	r2, r3
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	461a      	mov	r2, r3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4413      	add	r3, r2
 800665c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800665e:	68fb      	ldr	r3, [r7, #12]
}
 8006660:	4618      	mov	r0, r3
 8006662:	3714      	adds	r7, #20
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr

0800666c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800666c:	b480      	push	{r7}
 800666e:	b087      	sub	sp, #28
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	3301      	adds	r3, #1
 8006682:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800668a:	8a3b      	ldrh	r3, [r7, #16]
 800668c:	021b      	lsls	r3, r3, #8
 800668e:	b21a      	sxth	r2, r3
 8006690:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006694:	4313      	orrs	r3, r2
 8006696:	b21b      	sxth	r3, r3
 8006698:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800669a:	89fb      	ldrh	r3, [r7, #14]
}
 800669c:	4618      	mov	r0, r3
 800669e:	371c      	adds	r7, #28
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr

080066a8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80066b2:	2300      	movs	r3, #0
 80066b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80066be:	2b40      	cmp	r3, #64	; 0x40
 80066c0:	d005      	beq.n	80066ce <USBD_StdDevReq+0x26>
 80066c2:	2b40      	cmp	r3, #64	; 0x40
 80066c4:	d857      	bhi.n	8006776 <USBD_StdDevReq+0xce>
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d00f      	beq.n	80066ea <USBD_StdDevReq+0x42>
 80066ca:	2b20      	cmp	r3, #32
 80066cc:	d153      	bne.n	8006776 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	32ae      	adds	r2, #174	; 0xae
 80066d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	6839      	ldr	r1, [r7, #0]
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	4798      	blx	r3
 80066e4:	4603      	mov	r3, r0
 80066e6:	73fb      	strb	r3, [r7, #15]
      break;
 80066e8:	e04a      	b.n	8006780 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	785b      	ldrb	r3, [r3, #1]
 80066ee:	2b09      	cmp	r3, #9
 80066f0:	d83b      	bhi.n	800676a <USBD_StdDevReq+0xc2>
 80066f2:	a201      	add	r2, pc, #4	; (adr r2, 80066f8 <USBD_StdDevReq+0x50>)
 80066f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f8:	0800674d 	.word	0x0800674d
 80066fc:	08006761 	.word	0x08006761
 8006700:	0800676b 	.word	0x0800676b
 8006704:	08006757 	.word	0x08006757
 8006708:	0800676b 	.word	0x0800676b
 800670c:	0800672b 	.word	0x0800672b
 8006710:	08006721 	.word	0x08006721
 8006714:	0800676b 	.word	0x0800676b
 8006718:	08006743 	.word	0x08006743
 800671c:	08006735 	.word	0x08006735
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006720:	6839      	ldr	r1, [r7, #0]
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f000 fa3c 	bl	8006ba0 <USBD_GetDescriptor>
          break;
 8006728:	e024      	b.n	8006774 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800672a:	6839      	ldr	r1, [r7, #0]
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f000 fba1 	bl	8006e74 <USBD_SetAddress>
          break;
 8006732:	e01f      	b.n	8006774 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006734:	6839      	ldr	r1, [r7, #0]
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 fbe0 	bl	8006efc <USBD_SetConfig>
 800673c:	4603      	mov	r3, r0
 800673e:	73fb      	strb	r3, [r7, #15]
          break;
 8006740:	e018      	b.n	8006774 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006742:	6839      	ldr	r1, [r7, #0]
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f000 fc83 	bl	8007050 <USBD_GetConfig>
          break;
 800674a:	e013      	b.n	8006774 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800674c:	6839      	ldr	r1, [r7, #0]
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 fcb4 	bl	80070bc <USBD_GetStatus>
          break;
 8006754:	e00e      	b.n	8006774 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006756:	6839      	ldr	r1, [r7, #0]
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f000 fce3 	bl	8007124 <USBD_SetFeature>
          break;
 800675e:	e009      	b.n	8006774 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006760:	6839      	ldr	r1, [r7, #0]
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 fd07 	bl	8007176 <USBD_ClrFeature>
          break;
 8006768:	e004      	b.n	8006774 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800676a:	6839      	ldr	r1, [r7, #0]
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f000 fd5e 	bl	800722e <USBD_CtlError>
          break;
 8006772:	bf00      	nop
      }
      break;
 8006774:	e004      	b.n	8006780 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006776:	6839      	ldr	r1, [r7, #0]
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 fd58 	bl	800722e <USBD_CtlError>
      break;
 800677e:	bf00      	nop
  }

  return ret;
 8006780:	7bfb      	ldrb	r3, [r7, #15]
}
 8006782:	4618      	mov	r0, r3
 8006784:	3710      	adds	r7, #16
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}
 800678a:	bf00      	nop

0800678c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b084      	sub	sp, #16
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006796:	2300      	movs	r3, #0
 8006798:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80067a2:	2b40      	cmp	r3, #64	; 0x40
 80067a4:	d005      	beq.n	80067b2 <USBD_StdItfReq+0x26>
 80067a6:	2b40      	cmp	r3, #64	; 0x40
 80067a8:	d852      	bhi.n	8006850 <USBD_StdItfReq+0xc4>
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d001      	beq.n	80067b2 <USBD_StdItfReq+0x26>
 80067ae:	2b20      	cmp	r3, #32
 80067b0:	d14e      	bne.n	8006850 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	3b01      	subs	r3, #1
 80067bc:	2b02      	cmp	r3, #2
 80067be:	d840      	bhi.n	8006842 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	889b      	ldrh	r3, [r3, #4]
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	d836      	bhi.n	8006838 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	889b      	ldrh	r3, [r3, #4]
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	4619      	mov	r1, r3
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f7ff fed9 	bl	800658a <USBD_CoreFindIF>
 80067d8:	4603      	mov	r3, r0
 80067da:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80067dc:	7bbb      	ldrb	r3, [r7, #14]
 80067de:	2bff      	cmp	r3, #255	; 0xff
 80067e0:	d01d      	beq.n	800681e <USBD_StdItfReq+0x92>
 80067e2:	7bbb      	ldrb	r3, [r7, #14]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d11a      	bne.n	800681e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80067e8:	7bba      	ldrb	r2, [r7, #14]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	32ae      	adds	r2, #174	; 0xae
 80067ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d00f      	beq.n	8006818 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80067f8:	7bba      	ldrb	r2, [r7, #14]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006800:	7bba      	ldrb	r2, [r7, #14]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	32ae      	adds	r2, #174	; 0xae
 8006806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	6839      	ldr	r1, [r7, #0]
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	4798      	blx	r3
 8006812:	4603      	mov	r3, r0
 8006814:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006816:	e004      	b.n	8006822 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006818:	2303      	movs	r3, #3
 800681a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800681c:	e001      	b.n	8006822 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800681e:	2303      	movs	r3, #3
 8006820:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	88db      	ldrh	r3, [r3, #6]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d110      	bne.n	800684c <USBD_StdItfReq+0xc0>
 800682a:	7bfb      	ldrb	r3, [r7, #15]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d10d      	bne.n	800684c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f000 fdc7 	bl	80073c4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006836:	e009      	b.n	800684c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006838:	6839      	ldr	r1, [r7, #0]
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 fcf7 	bl	800722e <USBD_CtlError>
          break;
 8006840:	e004      	b.n	800684c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006842:	6839      	ldr	r1, [r7, #0]
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f000 fcf2 	bl	800722e <USBD_CtlError>
          break;
 800684a:	e000      	b.n	800684e <USBD_StdItfReq+0xc2>
          break;
 800684c:	bf00      	nop
      }
      break;
 800684e:	e004      	b.n	800685a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006850:	6839      	ldr	r1, [r7, #0]
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 fceb 	bl	800722e <USBD_CtlError>
      break;
 8006858:	bf00      	nop
  }

  return ret;
 800685a:	7bfb      	ldrb	r3, [r7, #15]
}
 800685c:	4618      	mov	r0, r3
 800685e:	3710      	adds	r7, #16
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}

08006864 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b084      	sub	sp, #16
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800686e:	2300      	movs	r3, #0
 8006870:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	889b      	ldrh	r3, [r3, #4]
 8006876:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006880:	2b40      	cmp	r3, #64	; 0x40
 8006882:	d007      	beq.n	8006894 <USBD_StdEPReq+0x30>
 8006884:	2b40      	cmp	r3, #64	; 0x40
 8006886:	f200 817f 	bhi.w	8006b88 <USBD_StdEPReq+0x324>
 800688a:	2b00      	cmp	r3, #0
 800688c:	d02a      	beq.n	80068e4 <USBD_StdEPReq+0x80>
 800688e:	2b20      	cmp	r3, #32
 8006890:	f040 817a 	bne.w	8006b88 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006894:	7bbb      	ldrb	r3, [r7, #14]
 8006896:	4619      	mov	r1, r3
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f7ff fe83 	bl	80065a4 <USBD_CoreFindEP>
 800689e:	4603      	mov	r3, r0
 80068a0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80068a2:	7b7b      	ldrb	r3, [r7, #13]
 80068a4:	2bff      	cmp	r3, #255	; 0xff
 80068a6:	f000 8174 	beq.w	8006b92 <USBD_StdEPReq+0x32e>
 80068aa:	7b7b      	ldrb	r3, [r7, #13]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	f040 8170 	bne.w	8006b92 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80068b2:	7b7a      	ldrb	r2, [r7, #13]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80068ba:	7b7a      	ldrb	r2, [r7, #13]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	32ae      	adds	r2, #174	; 0xae
 80068c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	f000 8163 	beq.w	8006b92 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80068cc:	7b7a      	ldrb	r2, [r7, #13]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	32ae      	adds	r2, #174	; 0xae
 80068d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	6839      	ldr	r1, [r7, #0]
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	4798      	blx	r3
 80068de:	4603      	mov	r3, r0
 80068e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80068e2:	e156      	b.n	8006b92 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	785b      	ldrb	r3, [r3, #1]
 80068e8:	2b03      	cmp	r3, #3
 80068ea:	d008      	beq.n	80068fe <USBD_StdEPReq+0x9a>
 80068ec:	2b03      	cmp	r3, #3
 80068ee:	f300 8145 	bgt.w	8006b7c <USBD_StdEPReq+0x318>
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	f000 809b 	beq.w	8006a2e <USBD_StdEPReq+0x1ca>
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d03c      	beq.n	8006976 <USBD_StdEPReq+0x112>
 80068fc:	e13e      	b.n	8006b7c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006904:	b2db      	uxtb	r3, r3
 8006906:	2b02      	cmp	r3, #2
 8006908:	d002      	beq.n	8006910 <USBD_StdEPReq+0xac>
 800690a:	2b03      	cmp	r3, #3
 800690c:	d016      	beq.n	800693c <USBD_StdEPReq+0xd8>
 800690e:	e02c      	b.n	800696a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006910:	7bbb      	ldrb	r3, [r7, #14]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d00d      	beq.n	8006932 <USBD_StdEPReq+0xce>
 8006916:	7bbb      	ldrb	r3, [r7, #14]
 8006918:	2b80      	cmp	r3, #128	; 0x80
 800691a:	d00a      	beq.n	8006932 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800691c:	7bbb      	ldrb	r3, [r7, #14]
 800691e:	4619      	mov	r1, r3
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f001 f96d 	bl	8007c00 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006926:	2180      	movs	r1, #128	; 0x80
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f001 f969 	bl	8007c00 <USBD_LL_StallEP>
 800692e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006930:	e020      	b.n	8006974 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006932:	6839      	ldr	r1, [r7, #0]
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f000 fc7a 	bl	800722e <USBD_CtlError>
              break;
 800693a:	e01b      	b.n	8006974 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	885b      	ldrh	r3, [r3, #2]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d10e      	bne.n	8006962 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006944:	7bbb      	ldrb	r3, [r7, #14]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d00b      	beq.n	8006962 <USBD_StdEPReq+0xfe>
 800694a:	7bbb      	ldrb	r3, [r7, #14]
 800694c:	2b80      	cmp	r3, #128	; 0x80
 800694e:	d008      	beq.n	8006962 <USBD_StdEPReq+0xfe>
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	88db      	ldrh	r3, [r3, #6]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d104      	bne.n	8006962 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006958:	7bbb      	ldrb	r3, [r7, #14]
 800695a:	4619      	mov	r1, r3
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f001 f94f 	bl	8007c00 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 fd2e 	bl	80073c4 <USBD_CtlSendStatus>

              break;
 8006968:	e004      	b.n	8006974 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800696a:	6839      	ldr	r1, [r7, #0]
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f000 fc5e 	bl	800722e <USBD_CtlError>
              break;
 8006972:	bf00      	nop
          }
          break;
 8006974:	e107      	b.n	8006b86 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800697c:	b2db      	uxtb	r3, r3
 800697e:	2b02      	cmp	r3, #2
 8006980:	d002      	beq.n	8006988 <USBD_StdEPReq+0x124>
 8006982:	2b03      	cmp	r3, #3
 8006984:	d016      	beq.n	80069b4 <USBD_StdEPReq+0x150>
 8006986:	e04b      	b.n	8006a20 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006988:	7bbb      	ldrb	r3, [r7, #14]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d00d      	beq.n	80069aa <USBD_StdEPReq+0x146>
 800698e:	7bbb      	ldrb	r3, [r7, #14]
 8006990:	2b80      	cmp	r3, #128	; 0x80
 8006992:	d00a      	beq.n	80069aa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006994:	7bbb      	ldrb	r3, [r7, #14]
 8006996:	4619      	mov	r1, r3
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f001 f931 	bl	8007c00 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800699e:	2180      	movs	r1, #128	; 0x80
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f001 f92d 	bl	8007c00 <USBD_LL_StallEP>
 80069a6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80069a8:	e040      	b.n	8006a2c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80069aa:	6839      	ldr	r1, [r7, #0]
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f000 fc3e 	bl	800722e <USBD_CtlError>
              break;
 80069b2:	e03b      	b.n	8006a2c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	885b      	ldrh	r3, [r3, #2]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d136      	bne.n	8006a2a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80069bc:	7bbb      	ldrb	r3, [r7, #14]
 80069be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d004      	beq.n	80069d0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80069c6:	7bbb      	ldrb	r3, [r7, #14]
 80069c8:	4619      	mov	r1, r3
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f001 f937 	bl	8007c3e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f000 fcf7 	bl	80073c4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80069d6:	7bbb      	ldrb	r3, [r7, #14]
 80069d8:	4619      	mov	r1, r3
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f7ff fde2 	bl	80065a4 <USBD_CoreFindEP>
 80069e0:	4603      	mov	r3, r0
 80069e2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80069e4:	7b7b      	ldrb	r3, [r7, #13]
 80069e6:	2bff      	cmp	r3, #255	; 0xff
 80069e8:	d01f      	beq.n	8006a2a <USBD_StdEPReq+0x1c6>
 80069ea:	7b7b      	ldrb	r3, [r7, #13]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d11c      	bne.n	8006a2a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80069f0:	7b7a      	ldrb	r2, [r7, #13]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80069f8:	7b7a      	ldrb	r2, [r7, #13]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	32ae      	adds	r2, #174	; 0xae
 80069fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d010      	beq.n	8006a2a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006a08:	7b7a      	ldrb	r2, [r7, #13]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	32ae      	adds	r2, #174	; 0xae
 8006a0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	6839      	ldr	r1, [r7, #0]
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	4798      	blx	r3
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006a1e:	e004      	b.n	8006a2a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006a20:	6839      	ldr	r1, [r7, #0]
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 fc03 	bl	800722e <USBD_CtlError>
              break;
 8006a28:	e000      	b.n	8006a2c <USBD_StdEPReq+0x1c8>
              break;
 8006a2a:	bf00      	nop
          }
          break;
 8006a2c:	e0ab      	b.n	8006b86 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	2b02      	cmp	r3, #2
 8006a38:	d002      	beq.n	8006a40 <USBD_StdEPReq+0x1dc>
 8006a3a:	2b03      	cmp	r3, #3
 8006a3c:	d032      	beq.n	8006aa4 <USBD_StdEPReq+0x240>
 8006a3e:	e097      	b.n	8006b70 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a40:	7bbb      	ldrb	r3, [r7, #14]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d007      	beq.n	8006a56 <USBD_StdEPReq+0x1f2>
 8006a46:	7bbb      	ldrb	r3, [r7, #14]
 8006a48:	2b80      	cmp	r3, #128	; 0x80
 8006a4a:	d004      	beq.n	8006a56 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006a4c:	6839      	ldr	r1, [r7, #0]
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 fbed 	bl	800722e <USBD_CtlError>
                break;
 8006a54:	e091      	b.n	8006b7a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	da0b      	bge.n	8006a76 <USBD_StdEPReq+0x212>
 8006a5e:	7bbb      	ldrb	r3, [r7, #14]
 8006a60:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006a64:	4613      	mov	r3, r2
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	4413      	add	r3, r2
 8006a6a:	009b      	lsls	r3, r3, #2
 8006a6c:	3310      	adds	r3, #16
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	4413      	add	r3, r2
 8006a72:	3304      	adds	r3, #4
 8006a74:	e00b      	b.n	8006a8e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006a76:	7bbb      	ldrb	r3, [r7, #14]
 8006a78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a7c:	4613      	mov	r3, r2
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	4413      	add	r3, r2
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006a88:	687a      	ldr	r2, [r7, #4]
 8006a8a:	4413      	add	r3, r2
 8006a8c:	3304      	adds	r3, #4
 8006a8e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	2200      	movs	r2, #0
 8006a94:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	2202      	movs	r2, #2
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f000 fc37 	bl	8007310 <USBD_CtlSendData>
              break;
 8006aa2:	e06a      	b.n	8006b7a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006aa4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	da11      	bge.n	8006ad0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006aac:	7bbb      	ldrb	r3, [r7, #14]
 8006aae:	f003 020f 	and.w	r2, r3, #15
 8006ab2:	6879      	ldr	r1, [r7, #4]
 8006ab4:	4613      	mov	r3, r2
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	4413      	add	r3, r2
 8006aba:	009b      	lsls	r3, r3, #2
 8006abc:	440b      	add	r3, r1
 8006abe:	3324      	adds	r3, #36	; 0x24
 8006ac0:	881b      	ldrh	r3, [r3, #0]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d117      	bne.n	8006af6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006ac6:	6839      	ldr	r1, [r7, #0]
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f000 fbb0 	bl	800722e <USBD_CtlError>
                  break;
 8006ace:	e054      	b.n	8006b7a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006ad0:	7bbb      	ldrb	r3, [r7, #14]
 8006ad2:	f003 020f 	and.w	r2, r3, #15
 8006ad6:	6879      	ldr	r1, [r7, #4]
 8006ad8:	4613      	mov	r3, r2
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	4413      	add	r3, r2
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	440b      	add	r3, r1
 8006ae2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006ae6:	881b      	ldrh	r3, [r3, #0]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d104      	bne.n	8006af6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006aec:	6839      	ldr	r1, [r7, #0]
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 fb9d 	bl	800722e <USBD_CtlError>
                  break;
 8006af4:	e041      	b.n	8006b7a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006af6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	da0b      	bge.n	8006b16 <USBD_StdEPReq+0x2b2>
 8006afe:	7bbb      	ldrb	r3, [r7, #14]
 8006b00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b04:	4613      	mov	r3, r2
 8006b06:	009b      	lsls	r3, r3, #2
 8006b08:	4413      	add	r3, r2
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	3310      	adds	r3, #16
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	4413      	add	r3, r2
 8006b12:	3304      	adds	r3, #4
 8006b14:	e00b      	b.n	8006b2e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006b16:	7bbb      	ldrb	r3, [r7, #14]
 8006b18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b1c:	4613      	mov	r3, r2
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	4413      	add	r3, r2
 8006b22:	009b      	lsls	r3, r3, #2
 8006b24:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	4413      	add	r3, r2
 8006b2c:	3304      	adds	r3, #4
 8006b2e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006b30:	7bbb      	ldrb	r3, [r7, #14]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d002      	beq.n	8006b3c <USBD_StdEPReq+0x2d8>
 8006b36:	7bbb      	ldrb	r3, [r7, #14]
 8006b38:	2b80      	cmp	r3, #128	; 0x80
 8006b3a:	d103      	bne.n	8006b44 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	601a      	str	r2, [r3, #0]
 8006b42:	e00e      	b.n	8006b62 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006b44:	7bbb      	ldrb	r3, [r7, #14]
 8006b46:	4619      	mov	r1, r3
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f001 f897 	bl	8007c7c <USBD_LL_IsStallEP>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d003      	beq.n	8006b5c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	2201      	movs	r2, #1
 8006b58:	601a      	str	r2, [r3, #0]
 8006b5a:	e002      	b.n	8006b62 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	2202      	movs	r2, #2
 8006b66:	4619      	mov	r1, r3
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f000 fbd1 	bl	8007310 <USBD_CtlSendData>
              break;
 8006b6e:	e004      	b.n	8006b7a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006b70:	6839      	ldr	r1, [r7, #0]
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 fb5b 	bl	800722e <USBD_CtlError>
              break;
 8006b78:	bf00      	nop
          }
          break;
 8006b7a:	e004      	b.n	8006b86 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006b7c:	6839      	ldr	r1, [r7, #0]
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 fb55 	bl	800722e <USBD_CtlError>
          break;
 8006b84:	bf00      	nop
      }
      break;
 8006b86:	e005      	b.n	8006b94 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006b88:	6839      	ldr	r1, [r7, #0]
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 fb4f 	bl	800722e <USBD_CtlError>
      break;
 8006b90:	e000      	b.n	8006b94 <USBD_StdEPReq+0x330>
      break;
 8006b92:	bf00      	nop
  }

  return ret;
 8006b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3710      	adds	r7, #16
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
	...

08006ba0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006baa:	2300      	movs	r3, #0
 8006bac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	885b      	ldrh	r3, [r3, #2]
 8006bba:	0a1b      	lsrs	r3, r3, #8
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	3b01      	subs	r3, #1
 8006bc0:	2b06      	cmp	r3, #6
 8006bc2:	f200 8128 	bhi.w	8006e16 <USBD_GetDescriptor+0x276>
 8006bc6:	a201      	add	r2, pc, #4	; (adr r2, 8006bcc <USBD_GetDescriptor+0x2c>)
 8006bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bcc:	08006be9 	.word	0x08006be9
 8006bd0:	08006c01 	.word	0x08006c01
 8006bd4:	08006c41 	.word	0x08006c41
 8006bd8:	08006e17 	.word	0x08006e17
 8006bdc:	08006e17 	.word	0x08006e17
 8006be0:	08006db7 	.word	0x08006db7
 8006be4:	08006de3 	.word	0x08006de3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	7c12      	ldrb	r2, [r2, #16]
 8006bf4:	f107 0108 	add.w	r1, r7, #8
 8006bf8:	4610      	mov	r0, r2
 8006bfa:	4798      	blx	r3
 8006bfc:	60f8      	str	r0, [r7, #12]
      break;
 8006bfe:	e112      	b.n	8006e26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	7c1b      	ldrb	r3, [r3, #16]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d10d      	bne.n	8006c24 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c10:	f107 0208 	add.w	r2, r7, #8
 8006c14:	4610      	mov	r0, r2
 8006c16:	4798      	blx	r3
 8006c18:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	3301      	adds	r3, #1
 8006c1e:	2202      	movs	r2, #2
 8006c20:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006c22:	e100      	b.n	8006e26 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c2c:	f107 0208 	add.w	r2, r7, #8
 8006c30:	4610      	mov	r0, r2
 8006c32:	4798      	blx	r3
 8006c34:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	3301      	adds	r3, #1
 8006c3a:	2202      	movs	r2, #2
 8006c3c:	701a      	strb	r2, [r3, #0]
      break;
 8006c3e:	e0f2      	b.n	8006e26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	885b      	ldrh	r3, [r3, #2]
 8006c44:	b2db      	uxtb	r3, r3
 8006c46:	2b05      	cmp	r3, #5
 8006c48:	f200 80ac 	bhi.w	8006da4 <USBD_GetDescriptor+0x204>
 8006c4c:	a201      	add	r2, pc, #4	; (adr r2, 8006c54 <USBD_GetDescriptor+0xb4>)
 8006c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c52:	bf00      	nop
 8006c54:	08006c6d 	.word	0x08006c6d
 8006c58:	08006ca1 	.word	0x08006ca1
 8006c5c:	08006cd5 	.word	0x08006cd5
 8006c60:	08006d09 	.word	0x08006d09
 8006c64:	08006d3d 	.word	0x08006d3d
 8006c68:	08006d71 	.word	0x08006d71
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d00b      	beq.n	8006c90 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	7c12      	ldrb	r2, [r2, #16]
 8006c84:	f107 0108 	add.w	r1, r7, #8
 8006c88:	4610      	mov	r0, r2
 8006c8a:	4798      	blx	r3
 8006c8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c8e:	e091      	b.n	8006db4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c90:	6839      	ldr	r1, [r7, #0]
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 facb 	bl	800722e <USBD_CtlError>
            err++;
 8006c98:	7afb      	ldrb	r3, [r7, #11]
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	72fb      	strb	r3, [r7, #11]
          break;
 8006c9e:	e089      	b.n	8006db4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d00b      	beq.n	8006cc4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	7c12      	ldrb	r2, [r2, #16]
 8006cb8:	f107 0108 	add.w	r1, r7, #8
 8006cbc:	4610      	mov	r0, r2
 8006cbe:	4798      	blx	r3
 8006cc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006cc2:	e077      	b.n	8006db4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006cc4:	6839      	ldr	r1, [r7, #0]
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 fab1 	bl	800722e <USBD_CtlError>
            err++;
 8006ccc:	7afb      	ldrb	r3, [r7, #11]
 8006cce:	3301      	adds	r3, #1
 8006cd0:	72fb      	strb	r3, [r7, #11]
          break;
 8006cd2:	e06f      	b.n	8006db4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cda:	68db      	ldr	r3, [r3, #12]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d00b      	beq.n	8006cf8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	7c12      	ldrb	r2, [r2, #16]
 8006cec:	f107 0108 	add.w	r1, r7, #8
 8006cf0:	4610      	mov	r0, r2
 8006cf2:	4798      	blx	r3
 8006cf4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006cf6:	e05d      	b.n	8006db4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006cf8:	6839      	ldr	r1, [r7, #0]
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 fa97 	bl	800722e <USBD_CtlError>
            err++;
 8006d00:	7afb      	ldrb	r3, [r7, #11]
 8006d02:	3301      	adds	r3, #1
 8006d04:	72fb      	strb	r3, [r7, #11]
          break;
 8006d06:	e055      	b.n	8006db4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d0e:	691b      	ldr	r3, [r3, #16]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d00b      	beq.n	8006d2c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d1a:	691b      	ldr	r3, [r3, #16]
 8006d1c:	687a      	ldr	r2, [r7, #4]
 8006d1e:	7c12      	ldrb	r2, [r2, #16]
 8006d20:	f107 0108 	add.w	r1, r7, #8
 8006d24:	4610      	mov	r0, r2
 8006d26:	4798      	blx	r3
 8006d28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d2a:	e043      	b.n	8006db4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d2c:	6839      	ldr	r1, [r7, #0]
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 fa7d 	bl	800722e <USBD_CtlError>
            err++;
 8006d34:	7afb      	ldrb	r3, [r7, #11]
 8006d36:	3301      	adds	r3, #1
 8006d38:	72fb      	strb	r3, [r7, #11]
          break;
 8006d3a:	e03b      	b.n	8006db4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d42:	695b      	ldr	r3, [r3, #20]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d00b      	beq.n	8006d60 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d4e:	695b      	ldr	r3, [r3, #20]
 8006d50:	687a      	ldr	r2, [r7, #4]
 8006d52:	7c12      	ldrb	r2, [r2, #16]
 8006d54:	f107 0108 	add.w	r1, r7, #8
 8006d58:	4610      	mov	r0, r2
 8006d5a:	4798      	blx	r3
 8006d5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d5e:	e029      	b.n	8006db4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d60:	6839      	ldr	r1, [r7, #0]
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 fa63 	bl	800722e <USBD_CtlError>
            err++;
 8006d68:	7afb      	ldrb	r3, [r7, #11]
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	72fb      	strb	r3, [r7, #11]
          break;
 8006d6e:	e021      	b.n	8006db4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d76:	699b      	ldr	r3, [r3, #24]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d00b      	beq.n	8006d94 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d82:	699b      	ldr	r3, [r3, #24]
 8006d84:	687a      	ldr	r2, [r7, #4]
 8006d86:	7c12      	ldrb	r2, [r2, #16]
 8006d88:	f107 0108 	add.w	r1, r7, #8
 8006d8c:	4610      	mov	r0, r2
 8006d8e:	4798      	blx	r3
 8006d90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d92:	e00f      	b.n	8006db4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d94:	6839      	ldr	r1, [r7, #0]
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 fa49 	bl	800722e <USBD_CtlError>
            err++;
 8006d9c:	7afb      	ldrb	r3, [r7, #11]
 8006d9e:	3301      	adds	r3, #1
 8006da0:	72fb      	strb	r3, [r7, #11]
          break;
 8006da2:	e007      	b.n	8006db4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006da4:	6839      	ldr	r1, [r7, #0]
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 fa41 	bl	800722e <USBD_CtlError>
          err++;
 8006dac:	7afb      	ldrb	r3, [r7, #11]
 8006dae:	3301      	adds	r3, #1
 8006db0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006db2:	bf00      	nop
      }
      break;
 8006db4:	e037      	b.n	8006e26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	7c1b      	ldrb	r3, [r3, #16]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d109      	bne.n	8006dd2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dc6:	f107 0208 	add.w	r2, r7, #8
 8006dca:	4610      	mov	r0, r2
 8006dcc:	4798      	blx	r3
 8006dce:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006dd0:	e029      	b.n	8006e26 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006dd2:	6839      	ldr	r1, [r7, #0]
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f000 fa2a 	bl	800722e <USBD_CtlError>
        err++;
 8006dda:	7afb      	ldrb	r3, [r7, #11]
 8006ddc:	3301      	adds	r3, #1
 8006dde:	72fb      	strb	r3, [r7, #11]
      break;
 8006de0:	e021      	b.n	8006e26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	7c1b      	ldrb	r3, [r3, #16]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d10d      	bne.n	8006e06 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006df2:	f107 0208 	add.w	r2, r7, #8
 8006df6:	4610      	mov	r0, r2
 8006df8:	4798      	blx	r3
 8006dfa:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	3301      	adds	r3, #1
 8006e00:	2207      	movs	r2, #7
 8006e02:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006e04:	e00f      	b.n	8006e26 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006e06:	6839      	ldr	r1, [r7, #0]
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 fa10 	bl	800722e <USBD_CtlError>
        err++;
 8006e0e:	7afb      	ldrb	r3, [r7, #11]
 8006e10:	3301      	adds	r3, #1
 8006e12:	72fb      	strb	r3, [r7, #11]
      break;
 8006e14:	e007      	b.n	8006e26 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006e16:	6839      	ldr	r1, [r7, #0]
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 fa08 	bl	800722e <USBD_CtlError>
      err++;
 8006e1e:	7afb      	ldrb	r3, [r7, #11]
 8006e20:	3301      	adds	r3, #1
 8006e22:	72fb      	strb	r3, [r7, #11]
      break;
 8006e24:	bf00      	nop
  }

  if (err != 0U)
 8006e26:	7afb      	ldrb	r3, [r7, #11]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d11e      	bne.n	8006e6a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	88db      	ldrh	r3, [r3, #6]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d016      	beq.n	8006e62 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006e34:	893b      	ldrh	r3, [r7, #8]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d00e      	beq.n	8006e58 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	88da      	ldrh	r2, [r3, #6]
 8006e3e:	893b      	ldrh	r3, [r7, #8]
 8006e40:	4293      	cmp	r3, r2
 8006e42:	bf28      	it	cs
 8006e44:	4613      	movcs	r3, r2
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006e4a:	893b      	ldrh	r3, [r7, #8]
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	68f9      	ldr	r1, [r7, #12]
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f000 fa5d 	bl	8007310 <USBD_CtlSendData>
 8006e56:	e009      	b.n	8006e6c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006e58:	6839      	ldr	r1, [r7, #0]
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 f9e7 	bl	800722e <USBD_CtlError>
 8006e60:	e004      	b.n	8006e6c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 faae 	bl	80073c4 <USBD_CtlSendStatus>
 8006e68:	e000      	b.n	8006e6c <USBD_GetDescriptor+0x2cc>
    return;
 8006e6a:	bf00      	nop
  }
}
 8006e6c:	3710      	adds	r7, #16
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}
 8006e72:	bf00      	nop

08006e74 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	889b      	ldrh	r3, [r3, #4]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d131      	bne.n	8006eea <USBD_SetAddress+0x76>
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	88db      	ldrh	r3, [r3, #6]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d12d      	bne.n	8006eea <USBD_SetAddress+0x76>
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	885b      	ldrh	r3, [r3, #2]
 8006e92:	2b7f      	cmp	r3, #127	; 0x7f
 8006e94:	d829      	bhi.n	8006eea <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	885b      	ldrh	r3, [r3, #2]
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ea0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	2b03      	cmp	r3, #3
 8006eac:	d104      	bne.n	8006eb8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006eae:	6839      	ldr	r1, [r7, #0]
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f000 f9bc 	bl	800722e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006eb6:	e01d      	b.n	8006ef4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	7bfa      	ldrb	r2, [r7, #15]
 8006ebc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006ec0:	7bfb      	ldrb	r3, [r7, #15]
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 ff05 	bl	8007cd4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 fa7a 	bl	80073c4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006ed0:	7bfb      	ldrb	r3, [r7, #15]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d004      	beq.n	8006ee0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2202      	movs	r2, #2
 8006eda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ede:	e009      	b.n	8006ef4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ee8:	e004      	b.n	8006ef4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006eea:	6839      	ldr	r1, [r7, #0]
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f000 f99e 	bl	800722e <USBD_CtlError>
  }
}
 8006ef2:	bf00      	nop
 8006ef4:	bf00      	nop
 8006ef6:	3710      	adds	r7, #16
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f06:	2300      	movs	r3, #0
 8006f08:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	885b      	ldrh	r3, [r3, #2]
 8006f0e:	b2da      	uxtb	r2, r3
 8006f10:	4b4e      	ldr	r3, [pc, #312]	; (800704c <USBD_SetConfig+0x150>)
 8006f12:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006f14:	4b4d      	ldr	r3, [pc, #308]	; (800704c <USBD_SetConfig+0x150>)
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d905      	bls.n	8006f28 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006f1c:	6839      	ldr	r1, [r7, #0]
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 f985 	bl	800722e <USBD_CtlError>
    return USBD_FAIL;
 8006f24:	2303      	movs	r3, #3
 8006f26:	e08c      	b.n	8007042 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	2b02      	cmp	r3, #2
 8006f32:	d002      	beq.n	8006f3a <USBD_SetConfig+0x3e>
 8006f34:	2b03      	cmp	r3, #3
 8006f36:	d029      	beq.n	8006f8c <USBD_SetConfig+0x90>
 8006f38:	e075      	b.n	8007026 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006f3a:	4b44      	ldr	r3, [pc, #272]	; (800704c <USBD_SetConfig+0x150>)
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d020      	beq.n	8006f84 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006f42:	4b42      	ldr	r3, [pc, #264]	; (800704c <USBD_SetConfig+0x150>)
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	461a      	mov	r2, r3
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006f4c:	4b3f      	ldr	r3, [pc, #252]	; (800704c <USBD_SetConfig+0x150>)
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	4619      	mov	r1, r3
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f7fe ffe7 	bl	8005f26 <USBD_SetClassConfig>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006f5c:	7bfb      	ldrb	r3, [r7, #15]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d008      	beq.n	8006f74 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006f62:	6839      	ldr	r1, [r7, #0]
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 f962 	bl	800722e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2202      	movs	r2, #2
 8006f6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006f72:	e065      	b.n	8007040 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 fa25 	bl	80073c4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2203      	movs	r2, #3
 8006f7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006f82:	e05d      	b.n	8007040 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f000 fa1d 	bl	80073c4 <USBD_CtlSendStatus>
      break;
 8006f8a:	e059      	b.n	8007040 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006f8c:	4b2f      	ldr	r3, [pc, #188]	; (800704c <USBD_SetConfig+0x150>)
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d112      	bne.n	8006fba <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2202      	movs	r2, #2
 8006f98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006f9c:	4b2b      	ldr	r3, [pc, #172]	; (800704c <USBD_SetConfig+0x150>)
 8006f9e:	781b      	ldrb	r3, [r3, #0]
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006fa6:	4b29      	ldr	r3, [pc, #164]	; (800704c <USBD_SetConfig+0x150>)
 8006fa8:	781b      	ldrb	r3, [r3, #0]
 8006faa:	4619      	mov	r1, r3
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f7fe ffd6 	bl	8005f5e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 fa06 	bl	80073c4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006fb8:	e042      	b.n	8007040 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006fba:	4b24      	ldr	r3, [pc, #144]	; (800704c <USBD_SetConfig+0x150>)
 8006fbc:	781b      	ldrb	r3, [r3, #0]
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d02a      	beq.n	800701e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	4619      	mov	r1, r3
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f7fe ffc4 	bl	8005f5e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006fd6:	4b1d      	ldr	r3, [pc, #116]	; (800704c <USBD_SetConfig+0x150>)
 8006fd8:	781b      	ldrb	r3, [r3, #0]
 8006fda:	461a      	mov	r2, r3
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006fe0:	4b1a      	ldr	r3, [pc, #104]	; (800704c <USBD_SetConfig+0x150>)
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f7fe ff9d 	bl	8005f26 <USBD_SetClassConfig>
 8006fec:	4603      	mov	r3, r0
 8006fee:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006ff0:	7bfb      	ldrb	r3, [r7, #15]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d00f      	beq.n	8007016 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006ff6:	6839      	ldr	r1, [r7, #0]
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f000 f918 	bl	800722e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	b2db      	uxtb	r3, r3
 8007004:	4619      	mov	r1, r3
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f7fe ffa9 	bl	8005f5e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2202      	movs	r2, #2
 8007010:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007014:	e014      	b.n	8007040 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 f9d4 	bl	80073c4 <USBD_CtlSendStatus>
      break;
 800701c:	e010      	b.n	8007040 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f000 f9d0 	bl	80073c4 <USBD_CtlSendStatus>
      break;
 8007024:	e00c      	b.n	8007040 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007026:	6839      	ldr	r1, [r7, #0]
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f000 f900 	bl	800722e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800702e:	4b07      	ldr	r3, [pc, #28]	; (800704c <USBD_SetConfig+0x150>)
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	4619      	mov	r1, r3
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f7fe ff92 	bl	8005f5e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800703a:	2303      	movs	r3, #3
 800703c:	73fb      	strb	r3, [r7, #15]
      break;
 800703e:	bf00      	nop
  }

  return ret;
 8007040:	7bfb      	ldrb	r3, [r7, #15]
}
 8007042:	4618      	mov	r0, r3
 8007044:	3710      	adds	r7, #16
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
 800704a:	bf00      	nop
 800704c:	200001dc 	.word	0x200001dc

08007050 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b082      	sub	sp, #8
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	88db      	ldrh	r3, [r3, #6]
 800705e:	2b01      	cmp	r3, #1
 8007060:	d004      	beq.n	800706c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007062:	6839      	ldr	r1, [r7, #0]
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 f8e2 	bl	800722e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800706a:	e023      	b.n	80070b4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007072:	b2db      	uxtb	r3, r3
 8007074:	2b02      	cmp	r3, #2
 8007076:	dc02      	bgt.n	800707e <USBD_GetConfig+0x2e>
 8007078:	2b00      	cmp	r3, #0
 800707a:	dc03      	bgt.n	8007084 <USBD_GetConfig+0x34>
 800707c:	e015      	b.n	80070aa <USBD_GetConfig+0x5a>
 800707e:	2b03      	cmp	r3, #3
 8007080:	d00b      	beq.n	800709a <USBD_GetConfig+0x4a>
 8007082:	e012      	b.n	80070aa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2200      	movs	r2, #0
 8007088:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	3308      	adds	r3, #8
 800708e:	2201      	movs	r2, #1
 8007090:	4619      	mov	r1, r3
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 f93c 	bl	8007310 <USBD_CtlSendData>
        break;
 8007098:	e00c      	b.n	80070b4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	3304      	adds	r3, #4
 800709e:	2201      	movs	r2, #1
 80070a0:	4619      	mov	r1, r3
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 f934 	bl	8007310 <USBD_CtlSendData>
        break;
 80070a8:	e004      	b.n	80070b4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80070aa:	6839      	ldr	r1, [r7, #0]
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f000 f8be 	bl	800722e <USBD_CtlError>
        break;
 80070b2:	bf00      	nop
}
 80070b4:	bf00      	nop
 80070b6:	3708      	adds	r7, #8
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}

080070bc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b082      	sub	sp, #8
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070cc:	b2db      	uxtb	r3, r3
 80070ce:	3b01      	subs	r3, #1
 80070d0:	2b02      	cmp	r3, #2
 80070d2:	d81e      	bhi.n	8007112 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	88db      	ldrh	r3, [r3, #6]
 80070d8:	2b02      	cmp	r3, #2
 80070da:	d004      	beq.n	80070e6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80070dc:	6839      	ldr	r1, [r7, #0]
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 f8a5 	bl	800722e <USBD_CtlError>
        break;
 80070e4:	e01a      	b.n	800711c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2201      	movs	r2, #1
 80070ea:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d005      	beq.n	8007102 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	68db      	ldr	r3, [r3, #12]
 80070fa:	f043 0202 	orr.w	r2, r3, #2
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	330c      	adds	r3, #12
 8007106:	2202      	movs	r2, #2
 8007108:	4619      	mov	r1, r3
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 f900 	bl	8007310 <USBD_CtlSendData>
      break;
 8007110:	e004      	b.n	800711c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007112:	6839      	ldr	r1, [r7, #0]
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f000 f88a 	bl	800722e <USBD_CtlError>
      break;
 800711a:	bf00      	nop
  }
}
 800711c:	bf00      	nop
 800711e:	3708      	adds	r7, #8
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b082      	sub	sp, #8
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	885b      	ldrh	r3, [r3, #2]
 8007132:	2b01      	cmp	r3, #1
 8007134:	d107      	bne.n	8007146 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2201      	movs	r2, #1
 800713a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f000 f940 	bl	80073c4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007144:	e013      	b.n	800716e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	885b      	ldrh	r3, [r3, #2]
 800714a:	2b02      	cmp	r3, #2
 800714c:	d10b      	bne.n	8007166 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	889b      	ldrh	r3, [r3, #4]
 8007152:	0a1b      	lsrs	r3, r3, #8
 8007154:	b29b      	uxth	r3, r3
 8007156:	b2da      	uxtb	r2, r3
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 f930 	bl	80073c4 <USBD_CtlSendStatus>
}
 8007164:	e003      	b.n	800716e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007166:	6839      	ldr	r1, [r7, #0]
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 f860 	bl	800722e <USBD_CtlError>
}
 800716e:	bf00      	nop
 8007170:	3708      	adds	r7, #8
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}

08007176 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007176:	b580      	push	{r7, lr}
 8007178:	b082      	sub	sp, #8
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
 800717e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007186:	b2db      	uxtb	r3, r3
 8007188:	3b01      	subs	r3, #1
 800718a:	2b02      	cmp	r3, #2
 800718c:	d80b      	bhi.n	80071a6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	885b      	ldrh	r3, [r3, #2]
 8007192:	2b01      	cmp	r3, #1
 8007194:	d10c      	bne.n	80071b0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f000 f910 	bl	80073c4 <USBD_CtlSendStatus>
      }
      break;
 80071a4:	e004      	b.n	80071b0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80071a6:	6839      	ldr	r1, [r7, #0]
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 f840 	bl	800722e <USBD_CtlError>
      break;
 80071ae:	e000      	b.n	80071b2 <USBD_ClrFeature+0x3c>
      break;
 80071b0:	bf00      	nop
  }
}
 80071b2:	bf00      	nop
 80071b4:	3708      	adds	r7, #8
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}

080071ba <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80071ba:	b580      	push	{r7, lr}
 80071bc:	b084      	sub	sp, #16
 80071be:	af00      	add	r7, sp, #0
 80071c0:	6078      	str	r0, [r7, #4]
 80071c2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	781a      	ldrb	r2, [r3, #0]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	3301      	adds	r3, #1
 80071d4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	781a      	ldrb	r2, [r3, #0]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	3301      	adds	r3, #1
 80071e2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80071e4:	68f8      	ldr	r0, [r7, #12]
 80071e6:	f7ff fa41 	bl	800666c <SWAPBYTE>
 80071ea:	4603      	mov	r3, r0
 80071ec:	461a      	mov	r2, r3
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	3301      	adds	r3, #1
 80071f6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	3301      	adds	r3, #1
 80071fc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80071fe:	68f8      	ldr	r0, [r7, #12]
 8007200:	f7ff fa34 	bl	800666c <SWAPBYTE>
 8007204:	4603      	mov	r3, r0
 8007206:	461a      	mov	r2, r3
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	3301      	adds	r3, #1
 8007210:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	3301      	adds	r3, #1
 8007216:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007218:	68f8      	ldr	r0, [r7, #12]
 800721a:	f7ff fa27 	bl	800666c <SWAPBYTE>
 800721e:	4603      	mov	r3, r0
 8007220:	461a      	mov	r2, r3
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	80da      	strh	r2, [r3, #6]
}
 8007226:	bf00      	nop
 8007228:	3710      	adds	r7, #16
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}

0800722e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800722e:	b580      	push	{r7, lr}
 8007230:	b082      	sub	sp, #8
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
 8007236:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007238:	2180      	movs	r1, #128	; 0x80
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 fce0 	bl	8007c00 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007240:	2100      	movs	r1, #0
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 fcdc 	bl	8007c00 <USBD_LL_StallEP>
}
 8007248:	bf00      	nop
 800724a:	3708      	adds	r7, #8
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b086      	sub	sp, #24
 8007254:	af00      	add	r7, sp, #0
 8007256:	60f8      	str	r0, [r7, #12]
 8007258:	60b9      	str	r1, [r7, #8]
 800725a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800725c:	2300      	movs	r3, #0
 800725e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d036      	beq.n	80072d4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800726a:	6938      	ldr	r0, [r7, #16]
 800726c:	f000 f836 	bl	80072dc <USBD_GetLen>
 8007270:	4603      	mov	r3, r0
 8007272:	3301      	adds	r3, #1
 8007274:	b29b      	uxth	r3, r3
 8007276:	005b      	lsls	r3, r3, #1
 8007278:	b29a      	uxth	r2, r3
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800727e:	7dfb      	ldrb	r3, [r7, #23]
 8007280:	68ba      	ldr	r2, [r7, #8]
 8007282:	4413      	add	r3, r2
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	7812      	ldrb	r2, [r2, #0]
 8007288:	701a      	strb	r2, [r3, #0]
  idx++;
 800728a:	7dfb      	ldrb	r3, [r7, #23]
 800728c:	3301      	adds	r3, #1
 800728e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007290:	7dfb      	ldrb	r3, [r7, #23]
 8007292:	68ba      	ldr	r2, [r7, #8]
 8007294:	4413      	add	r3, r2
 8007296:	2203      	movs	r2, #3
 8007298:	701a      	strb	r2, [r3, #0]
  idx++;
 800729a:	7dfb      	ldrb	r3, [r7, #23]
 800729c:	3301      	adds	r3, #1
 800729e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80072a0:	e013      	b.n	80072ca <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80072a2:	7dfb      	ldrb	r3, [r7, #23]
 80072a4:	68ba      	ldr	r2, [r7, #8]
 80072a6:	4413      	add	r3, r2
 80072a8:	693a      	ldr	r2, [r7, #16]
 80072aa:	7812      	ldrb	r2, [r2, #0]
 80072ac:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	3301      	adds	r3, #1
 80072b2:	613b      	str	r3, [r7, #16]
    idx++;
 80072b4:	7dfb      	ldrb	r3, [r7, #23]
 80072b6:	3301      	adds	r3, #1
 80072b8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80072ba:	7dfb      	ldrb	r3, [r7, #23]
 80072bc:	68ba      	ldr	r2, [r7, #8]
 80072be:	4413      	add	r3, r2
 80072c0:	2200      	movs	r2, #0
 80072c2:	701a      	strb	r2, [r3, #0]
    idx++;
 80072c4:	7dfb      	ldrb	r3, [r7, #23]
 80072c6:	3301      	adds	r3, #1
 80072c8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d1e7      	bne.n	80072a2 <USBD_GetString+0x52>
 80072d2:	e000      	b.n	80072d6 <USBD_GetString+0x86>
    return;
 80072d4:	bf00      	nop
  }
}
 80072d6:	3718      	adds	r7, #24
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80072dc:	b480      	push	{r7}
 80072de:	b085      	sub	sp, #20
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80072e4:	2300      	movs	r3, #0
 80072e6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80072ec:	e005      	b.n	80072fa <USBD_GetLen+0x1e>
  {
    len++;
 80072ee:	7bfb      	ldrb	r3, [r7, #15]
 80072f0:	3301      	adds	r3, #1
 80072f2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	3301      	adds	r3, #1
 80072f8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	781b      	ldrb	r3, [r3, #0]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d1f5      	bne.n	80072ee <USBD_GetLen+0x12>
  }

  return len;
 8007302:	7bfb      	ldrb	r3, [r7, #15]
}
 8007304:	4618      	mov	r0, r3
 8007306:	3714      	adds	r7, #20
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b084      	sub	sp, #16
 8007314:	af00      	add	r7, sp, #0
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2202      	movs	r2, #2
 8007320:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	687a      	ldr	r2, [r7, #4]
 8007328:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	68ba      	ldr	r2, [r7, #8]
 8007334:	2100      	movs	r1, #0
 8007336:	68f8      	ldr	r0, [r7, #12]
 8007338:	f000 fceb 	bl	8007d12 <USBD_LL_Transmit>

  return USBD_OK;
 800733c:	2300      	movs	r3, #0
}
 800733e:	4618      	mov	r0, r3
 8007340:	3710      	adds	r7, #16
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}

08007346 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007346:	b580      	push	{r7, lr}
 8007348:	b084      	sub	sp, #16
 800734a:	af00      	add	r7, sp, #0
 800734c:	60f8      	str	r0, [r7, #12]
 800734e:	60b9      	str	r1, [r7, #8]
 8007350:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	68ba      	ldr	r2, [r7, #8]
 8007356:	2100      	movs	r1, #0
 8007358:	68f8      	ldr	r0, [r7, #12]
 800735a:	f000 fcda 	bl	8007d12 <USBD_LL_Transmit>

  return USBD_OK;
 800735e:	2300      	movs	r3, #0
}
 8007360:	4618      	mov	r0, r3
 8007362:	3710      	adds	r7, #16
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b084      	sub	sp, #16
 800736c:	af00      	add	r7, sp, #0
 800736e:	60f8      	str	r0, [r7, #12]
 8007370:	60b9      	str	r1, [r7, #8]
 8007372:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2203      	movs	r2, #3
 8007378:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	687a      	ldr	r2, [r7, #4]
 8007380:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	687a      	ldr	r2, [r7, #4]
 8007388:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	68ba      	ldr	r2, [r7, #8]
 8007390:	2100      	movs	r1, #0
 8007392:	68f8      	ldr	r0, [r7, #12]
 8007394:	f000 fcde 	bl	8007d54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007398:	2300      	movs	r3, #0
}
 800739a:	4618      	mov	r0, r3
 800739c:	3710      	adds	r7, #16
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}

080073a2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80073a2:	b580      	push	{r7, lr}
 80073a4:	b084      	sub	sp, #16
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	60f8      	str	r0, [r7, #12]
 80073aa:	60b9      	str	r1, [r7, #8]
 80073ac:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	68ba      	ldr	r2, [r7, #8]
 80073b2:	2100      	movs	r1, #0
 80073b4:	68f8      	ldr	r0, [r7, #12]
 80073b6:	f000 fccd 	bl	8007d54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80073ba:	2300      	movs	r3, #0
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3710      	adds	r7, #16
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b082      	sub	sp, #8
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2204      	movs	r2, #4
 80073d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80073d4:	2300      	movs	r3, #0
 80073d6:	2200      	movs	r2, #0
 80073d8:	2100      	movs	r1, #0
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 fc99 	bl	8007d12 <USBD_LL_Transmit>

  return USBD_OK;
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3708      	adds	r7, #8
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}

080073ea <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80073ea:	b580      	push	{r7, lr}
 80073ec:	b082      	sub	sp, #8
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2205      	movs	r2, #5
 80073f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073fa:	2300      	movs	r3, #0
 80073fc:	2200      	movs	r2, #0
 80073fe:	2100      	movs	r1, #0
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f000 fca7 	bl	8007d54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007406:	2300      	movs	r3, #0
}
 8007408:	4618      	mov	r0, r3
 800740a:	3708      	adds	r7, #8
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}

08007410 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007414:	2200      	movs	r2, #0
 8007416:	4912      	ldr	r1, [pc, #72]	; (8007460 <MX_USB_DEVICE_Init+0x50>)
 8007418:	4812      	ldr	r0, [pc, #72]	; (8007464 <MX_USB_DEVICE_Init+0x54>)
 800741a:	f7fe fd07 	bl	8005e2c <USBD_Init>
 800741e:	4603      	mov	r3, r0
 8007420:	2b00      	cmp	r3, #0
 8007422:	d001      	beq.n	8007428 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007424:	f7f9 faae 	bl	8000984 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007428:	490f      	ldr	r1, [pc, #60]	; (8007468 <MX_USB_DEVICE_Init+0x58>)
 800742a:	480e      	ldr	r0, [pc, #56]	; (8007464 <MX_USB_DEVICE_Init+0x54>)
 800742c:	f7fe fd2e 	bl	8005e8c <USBD_RegisterClass>
 8007430:	4603      	mov	r3, r0
 8007432:	2b00      	cmp	r3, #0
 8007434:	d001      	beq.n	800743a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007436:	f7f9 faa5 	bl	8000984 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800743a:	490c      	ldr	r1, [pc, #48]	; (800746c <MX_USB_DEVICE_Init+0x5c>)
 800743c:	4809      	ldr	r0, [pc, #36]	; (8007464 <MX_USB_DEVICE_Init+0x54>)
 800743e:	f7fe fc1f 	bl	8005c80 <USBD_CDC_RegisterInterface>
 8007442:	4603      	mov	r3, r0
 8007444:	2b00      	cmp	r3, #0
 8007446:	d001      	beq.n	800744c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007448:	f7f9 fa9c 	bl	8000984 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800744c:	4805      	ldr	r0, [pc, #20]	; (8007464 <MX_USB_DEVICE_Init+0x54>)
 800744e:	f7fe fd53 	bl	8005ef8 <USBD_Start>
 8007452:	4603      	mov	r3, r0
 8007454:	2b00      	cmp	r3, #0
 8007456:	d001      	beq.n	800745c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007458:	f7f9 fa94 	bl	8000984 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800745c:	bf00      	nop
 800745e:	bd80      	pop	{r7, pc}
 8007460:	200000ac 	.word	0x200000ac
 8007464:	200001e0 	.word	0x200001e0
 8007468:	20000018 	.word	0x20000018
 800746c:	20000098 	.word	0x20000098

08007470 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007474:	2200      	movs	r2, #0
 8007476:	4905      	ldr	r1, [pc, #20]	; (800748c <CDC_Init_FS+0x1c>)
 8007478:	4805      	ldr	r0, [pc, #20]	; (8007490 <CDC_Init_FS+0x20>)
 800747a:	f7fe fc1b 	bl	8005cb4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800747e:	4905      	ldr	r1, [pc, #20]	; (8007494 <CDC_Init_FS+0x24>)
 8007480:	4803      	ldr	r0, [pc, #12]	; (8007490 <CDC_Init_FS+0x20>)
 8007482:	f7fe fc39 	bl	8005cf8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007486:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007488:	4618      	mov	r0, r3
 800748a:	bd80      	pop	{r7, pc}
 800748c:	20000cbc 	.word	0x20000cbc
 8007490:	200001e0 	.word	0x200001e0
 8007494:	200004bc 	.word	0x200004bc

08007498 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007498:	b480      	push	{r7}
 800749a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800749c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800749e:	4618      	mov	r0, r3
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr

080074a8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b083      	sub	sp, #12
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	4603      	mov	r3, r0
 80074b0:	6039      	str	r1, [r7, #0]
 80074b2:	71fb      	strb	r3, [r7, #7]
 80074b4:	4613      	mov	r3, r2
 80074b6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80074b8:	79fb      	ldrb	r3, [r7, #7]
 80074ba:	2b23      	cmp	r3, #35	; 0x23
 80074bc:	d84a      	bhi.n	8007554 <CDC_Control_FS+0xac>
 80074be:	a201      	add	r2, pc, #4	; (adr r2, 80074c4 <CDC_Control_FS+0x1c>)
 80074c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c4:	08007555 	.word	0x08007555
 80074c8:	08007555 	.word	0x08007555
 80074cc:	08007555 	.word	0x08007555
 80074d0:	08007555 	.word	0x08007555
 80074d4:	08007555 	.word	0x08007555
 80074d8:	08007555 	.word	0x08007555
 80074dc:	08007555 	.word	0x08007555
 80074e0:	08007555 	.word	0x08007555
 80074e4:	08007555 	.word	0x08007555
 80074e8:	08007555 	.word	0x08007555
 80074ec:	08007555 	.word	0x08007555
 80074f0:	08007555 	.word	0x08007555
 80074f4:	08007555 	.word	0x08007555
 80074f8:	08007555 	.word	0x08007555
 80074fc:	08007555 	.word	0x08007555
 8007500:	08007555 	.word	0x08007555
 8007504:	08007555 	.word	0x08007555
 8007508:	08007555 	.word	0x08007555
 800750c:	08007555 	.word	0x08007555
 8007510:	08007555 	.word	0x08007555
 8007514:	08007555 	.word	0x08007555
 8007518:	08007555 	.word	0x08007555
 800751c:	08007555 	.word	0x08007555
 8007520:	08007555 	.word	0x08007555
 8007524:	08007555 	.word	0x08007555
 8007528:	08007555 	.word	0x08007555
 800752c:	08007555 	.word	0x08007555
 8007530:	08007555 	.word	0x08007555
 8007534:	08007555 	.word	0x08007555
 8007538:	08007555 	.word	0x08007555
 800753c:	08007555 	.word	0x08007555
 8007540:	08007555 	.word	0x08007555
 8007544:	08007555 	.word	0x08007555
 8007548:	08007555 	.word	0x08007555
 800754c:	08007555 	.word	0x08007555
 8007550:	08007555 	.word	0x08007555
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007554:	bf00      	nop
  }

  return (USBD_OK);
 8007556:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007558:	4618      	mov	r0, r3
 800755a:	370c      	adds	r7, #12
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b082      	sub	sp, #8
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800756e:	6879      	ldr	r1, [r7, #4]
 8007570:	4805      	ldr	r0, [pc, #20]	; (8007588 <CDC_Receive_FS+0x24>)
 8007572:	f7fe fbc1 	bl	8005cf8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007576:	4804      	ldr	r0, [pc, #16]	; (8007588 <CDC_Receive_FS+0x24>)
 8007578:	f7fe fc22 	bl	8005dc0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800757c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800757e:	4618      	mov	r0, r3
 8007580:	3708      	adds	r7, #8
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
 8007586:	bf00      	nop
 8007588:	200001e0 	.word	0x200001e0

0800758c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b084      	sub	sp, #16
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	460b      	mov	r3, r1
 8007596:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007598:	2300      	movs	r3, #0
 800759a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800759c:	4b0d      	ldr	r3, [pc, #52]	; (80075d4 <CDC_Transmit_FS+0x48>)
 800759e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80075a2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d001      	beq.n	80075b2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80075ae:	2301      	movs	r3, #1
 80075b0:	e00b      	b.n	80075ca <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80075b2:	887b      	ldrh	r3, [r7, #2]
 80075b4:	461a      	mov	r2, r3
 80075b6:	6879      	ldr	r1, [r7, #4]
 80075b8:	4806      	ldr	r0, [pc, #24]	; (80075d4 <CDC_Transmit_FS+0x48>)
 80075ba:	f7fe fb7b 	bl	8005cb4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80075be:	4805      	ldr	r0, [pc, #20]	; (80075d4 <CDC_Transmit_FS+0x48>)
 80075c0:	f7fe fbb8 	bl	8005d34 <USBD_CDC_TransmitPacket>
 80075c4:	4603      	mov	r3, r0
 80075c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80075c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3710      	adds	r7, #16
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}
 80075d2:	bf00      	nop
 80075d4:	200001e0 	.word	0x200001e0

080075d8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80075d8:	b480      	push	{r7}
 80075da:	b087      	sub	sp, #28
 80075dc:	af00      	add	r7, sp, #0
 80075de:	60f8      	str	r0, [r7, #12]
 80075e0:	60b9      	str	r1, [r7, #8]
 80075e2:	4613      	mov	r3, r2
 80075e4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80075e6:	2300      	movs	r3, #0
 80075e8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80075ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	371c      	adds	r7, #28
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr
	...

080075fc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b083      	sub	sp, #12
 8007600:	af00      	add	r7, sp, #0
 8007602:	4603      	mov	r3, r0
 8007604:	6039      	str	r1, [r7, #0]
 8007606:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	2212      	movs	r2, #18
 800760c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800760e:	4b03      	ldr	r3, [pc, #12]	; (800761c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007610:	4618      	mov	r0, r3
 8007612:	370c      	adds	r7, #12
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr
 800761c:	200000c8 	.word	0x200000c8

08007620 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007620:	b480      	push	{r7}
 8007622:	b083      	sub	sp, #12
 8007624:	af00      	add	r7, sp, #0
 8007626:	4603      	mov	r3, r0
 8007628:	6039      	str	r1, [r7, #0]
 800762a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	2204      	movs	r2, #4
 8007630:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007632:	4b03      	ldr	r3, [pc, #12]	; (8007640 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007634:	4618      	mov	r0, r3
 8007636:	370c      	adds	r7, #12
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr
 8007640:	200000dc 	.word	0x200000dc

08007644 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b082      	sub	sp, #8
 8007648:	af00      	add	r7, sp, #0
 800764a:	4603      	mov	r3, r0
 800764c:	6039      	str	r1, [r7, #0]
 800764e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007650:	79fb      	ldrb	r3, [r7, #7]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d105      	bne.n	8007662 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007656:	683a      	ldr	r2, [r7, #0]
 8007658:	4907      	ldr	r1, [pc, #28]	; (8007678 <USBD_FS_ProductStrDescriptor+0x34>)
 800765a:	4808      	ldr	r0, [pc, #32]	; (800767c <USBD_FS_ProductStrDescriptor+0x38>)
 800765c:	f7ff fdf8 	bl	8007250 <USBD_GetString>
 8007660:	e004      	b.n	800766c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007662:	683a      	ldr	r2, [r7, #0]
 8007664:	4904      	ldr	r1, [pc, #16]	; (8007678 <USBD_FS_ProductStrDescriptor+0x34>)
 8007666:	4805      	ldr	r0, [pc, #20]	; (800767c <USBD_FS_ProductStrDescriptor+0x38>)
 8007668:	f7ff fdf2 	bl	8007250 <USBD_GetString>
  }
  return USBD_StrDesc;
 800766c:	4b02      	ldr	r3, [pc, #8]	; (8007678 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800766e:	4618      	mov	r0, r3
 8007670:	3708      	adds	r7, #8
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}
 8007676:	bf00      	nop
 8007678:	200014bc 	.word	0x200014bc
 800767c:	080087e4 	.word	0x080087e4

08007680 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b082      	sub	sp, #8
 8007684:	af00      	add	r7, sp, #0
 8007686:	4603      	mov	r3, r0
 8007688:	6039      	str	r1, [r7, #0]
 800768a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800768c:	683a      	ldr	r2, [r7, #0]
 800768e:	4904      	ldr	r1, [pc, #16]	; (80076a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007690:	4804      	ldr	r0, [pc, #16]	; (80076a4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007692:	f7ff fddd 	bl	8007250 <USBD_GetString>
  return USBD_StrDesc;
 8007696:	4b02      	ldr	r3, [pc, #8]	; (80076a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007698:	4618      	mov	r0, r3
 800769a:	3708      	adds	r7, #8
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}
 80076a0:	200014bc 	.word	0x200014bc
 80076a4:	080087fc 	.word	0x080087fc

080076a8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b082      	sub	sp, #8
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	4603      	mov	r3, r0
 80076b0:	6039      	str	r1, [r7, #0]
 80076b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	221a      	movs	r2, #26
 80076b8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80076ba:	f000 f843 	bl	8007744 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80076be:	4b02      	ldr	r3, [pc, #8]	; (80076c8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3708      	adds	r7, #8
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}
 80076c8:	200000e0 	.word	0x200000e0

080076cc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b082      	sub	sp, #8
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	4603      	mov	r3, r0
 80076d4:	6039      	str	r1, [r7, #0]
 80076d6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80076d8:	79fb      	ldrb	r3, [r7, #7]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d105      	bne.n	80076ea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80076de:	683a      	ldr	r2, [r7, #0]
 80076e0:	4907      	ldr	r1, [pc, #28]	; (8007700 <USBD_FS_ConfigStrDescriptor+0x34>)
 80076e2:	4808      	ldr	r0, [pc, #32]	; (8007704 <USBD_FS_ConfigStrDescriptor+0x38>)
 80076e4:	f7ff fdb4 	bl	8007250 <USBD_GetString>
 80076e8:	e004      	b.n	80076f4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80076ea:	683a      	ldr	r2, [r7, #0]
 80076ec:	4904      	ldr	r1, [pc, #16]	; (8007700 <USBD_FS_ConfigStrDescriptor+0x34>)
 80076ee:	4805      	ldr	r0, [pc, #20]	; (8007704 <USBD_FS_ConfigStrDescriptor+0x38>)
 80076f0:	f7ff fdae 	bl	8007250 <USBD_GetString>
  }
  return USBD_StrDesc;
 80076f4:	4b02      	ldr	r3, [pc, #8]	; (8007700 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3708      	adds	r7, #8
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}
 80076fe:	bf00      	nop
 8007700:	200014bc 	.word	0x200014bc
 8007704:	08008810 	.word	0x08008810

08007708 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b082      	sub	sp, #8
 800770c:	af00      	add	r7, sp, #0
 800770e:	4603      	mov	r3, r0
 8007710:	6039      	str	r1, [r7, #0]
 8007712:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007714:	79fb      	ldrb	r3, [r7, #7]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d105      	bne.n	8007726 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800771a:	683a      	ldr	r2, [r7, #0]
 800771c:	4907      	ldr	r1, [pc, #28]	; (800773c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800771e:	4808      	ldr	r0, [pc, #32]	; (8007740 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007720:	f7ff fd96 	bl	8007250 <USBD_GetString>
 8007724:	e004      	b.n	8007730 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007726:	683a      	ldr	r2, [r7, #0]
 8007728:	4904      	ldr	r1, [pc, #16]	; (800773c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800772a:	4805      	ldr	r0, [pc, #20]	; (8007740 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800772c:	f7ff fd90 	bl	8007250 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007730:	4b02      	ldr	r3, [pc, #8]	; (800773c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007732:	4618      	mov	r0, r3
 8007734:	3708      	adds	r7, #8
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
 800773a:	bf00      	nop
 800773c:	200014bc 	.word	0x200014bc
 8007740:	0800881c 	.word	0x0800881c

08007744 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b084      	sub	sp, #16
 8007748:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800774a:	4b0f      	ldr	r3, [pc, #60]	; (8007788 <Get_SerialNum+0x44>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007750:	4b0e      	ldr	r3, [pc, #56]	; (800778c <Get_SerialNum+0x48>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007756:	4b0e      	ldr	r3, [pc, #56]	; (8007790 <Get_SerialNum+0x4c>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800775c:	68fa      	ldr	r2, [r7, #12]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	4413      	add	r3, r2
 8007762:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d009      	beq.n	800777e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800776a:	2208      	movs	r2, #8
 800776c:	4909      	ldr	r1, [pc, #36]	; (8007794 <Get_SerialNum+0x50>)
 800776e:	68f8      	ldr	r0, [r7, #12]
 8007770:	f000 f814 	bl	800779c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007774:	2204      	movs	r2, #4
 8007776:	4908      	ldr	r1, [pc, #32]	; (8007798 <Get_SerialNum+0x54>)
 8007778:	68b8      	ldr	r0, [r7, #8]
 800777a:	f000 f80f 	bl	800779c <IntToUnicode>
  }
}
 800777e:	bf00      	nop
 8007780:	3710      	adds	r7, #16
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}
 8007786:	bf00      	nop
 8007788:	1fff7a10 	.word	0x1fff7a10
 800778c:	1fff7a14 	.word	0x1fff7a14
 8007790:	1fff7a18 	.word	0x1fff7a18
 8007794:	200000e2 	.word	0x200000e2
 8007798:	200000f2 	.word	0x200000f2

0800779c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800779c:	b480      	push	{r7}
 800779e:	b087      	sub	sp, #28
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	60f8      	str	r0, [r7, #12]
 80077a4:	60b9      	str	r1, [r7, #8]
 80077a6:	4613      	mov	r3, r2
 80077a8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80077aa:	2300      	movs	r3, #0
 80077ac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80077ae:	2300      	movs	r3, #0
 80077b0:	75fb      	strb	r3, [r7, #23]
 80077b2:	e027      	b.n	8007804 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	0f1b      	lsrs	r3, r3, #28
 80077b8:	2b09      	cmp	r3, #9
 80077ba:	d80b      	bhi.n	80077d4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	0f1b      	lsrs	r3, r3, #28
 80077c0:	b2da      	uxtb	r2, r3
 80077c2:	7dfb      	ldrb	r3, [r7, #23]
 80077c4:	005b      	lsls	r3, r3, #1
 80077c6:	4619      	mov	r1, r3
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	440b      	add	r3, r1
 80077cc:	3230      	adds	r2, #48	; 0x30
 80077ce:	b2d2      	uxtb	r2, r2
 80077d0:	701a      	strb	r2, [r3, #0]
 80077d2:	e00a      	b.n	80077ea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	0f1b      	lsrs	r3, r3, #28
 80077d8:	b2da      	uxtb	r2, r3
 80077da:	7dfb      	ldrb	r3, [r7, #23]
 80077dc:	005b      	lsls	r3, r3, #1
 80077de:	4619      	mov	r1, r3
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	440b      	add	r3, r1
 80077e4:	3237      	adds	r2, #55	; 0x37
 80077e6:	b2d2      	uxtb	r2, r2
 80077e8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	011b      	lsls	r3, r3, #4
 80077ee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80077f0:	7dfb      	ldrb	r3, [r7, #23]
 80077f2:	005b      	lsls	r3, r3, #1
 80077f4:	3301      	adds	r3, #1
 80077f6:	68ba      	ldr	r2, [r7, #8]
 80077f8:	4413      	add	r3, r2
 80077fa:	2200      	movs	r2, #0
 80077fc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80077fe:	7dfb      	ldrb	r3, [r7, #23]
 8007800:	3301      	adds	r3, #1
 8007802:	75fb      	strb	r3, [r7, #23]
 8007804:	7dfa      	ldrb	r2, [r7, #23]
 8007806:	79fb      	ldrb	r3, [r7, #7]
 8007808:	429a      	cmp	r2, r3
 800780a:	d3d3      	bcc.n	80077b4 <IntToUnicode+0x18>
  }
}
 800780c:	bf00      	nop
 800780e:	bf00      	nop
 8007810:	371c      	adds	r7, #28
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr
	...

0800781c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b08a      	sub	sp, #40	; 0x28
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007824:	f107 0314 	add.w	r3, r7, #20
 8007828:	2200      	movs	r2, #0
 800782a:	601a      	str	r2, [r3, #0]
 800782c:	605a      	str	r2, [r3, #4]
 800782e:	609a      	str	r2, [r3, #8]
 8007830:	60da      	str	r2, [r3, #12]
 8007832:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800783c:	d13a      	bne.n	80078b4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800783e:	2300      	movs	r3, #0
 8007840:	613b      	str	r3, [r7, #16]
 8007842:	4b1e      	ldr	r3, [pc, #120]	; (80078bc <HAL_PCD_MspInit+0xa0>)
 8007844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007846:	4a1d      	ldr	r2, [pc, #116]	; (80078bc <HAL_PCD_MspInit+0xa0>)
 8007848:	f043 0301 	orr.w	r3, r3, #1
 800784c:	6313      	str	r3, [r2, #48]	; 0x30
 800784e:	4b1b      	ldr	r3, [pc, #108]	; (80078bc <HAL_PCD_MspInit+0xa0>)
 8007850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007852:	f003 0301 	and.w	r3, r3, #1
 8007856:	613b      	str	r3, [r7, #16]
 8007858:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800785a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800785e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007860:	2302      	movs	r3, #2
 8007862:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007864:	2300      	movs	r3, #0
 8007866:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007868:	2303      	movs	r3, #3
 800786a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800786c:	230a      	movs	r3, #10
 800786e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007870:	f107 0314 	add.w	r3, r7, #20
 8007874:	4619      	mov	r1, r3
 8007876:	4812      	ldr	r0, [pc, #72]	; (80078c0 <HAL_PCD_MspInit+0xa4>)
 8007878:	f7f9 fb50 	bl	8000f1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800787c:	4b0f      	ldr	r3, [pc, #60]	; (80078bc <HAL_PCD_MspInit+0xa0>)
 800787e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007880:	4a0e      	ldr	r2, [pc, #56]	; (80078bc <HAL_PCD_MspInit+0xa0>)
 8007882:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007886:	6353      	str	r3, [r2, #52]	; 0x34
 8007888:	2300      	movs	r3, #0
 800788a:	60fb      	str	r3, [r7, #12]
 800788c:	4b0b      	ldr	r3, [pc, #44]	; (80078bc <HAL_PCD_MspInit+0xa0>)
 800788e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007890:	4a0a      	ldr	r2, [pc, #40]	; (80078bc <HAL_PCD_MspInit+0xa0>)
 8007892:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007896:	6453      	str	r3, [r2, #68]	; 0x44
 8007898:	4b08      	ldr	r3, [pc, #32]	; (80078bc <HAL_PCD_MspInit+0xa0>)
 800789a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800789c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078a0:	60fb      	str	r3, [r7, #12]
 80078a2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80078a4:	2200      	movs	r2, #0
 80078a6:	2100      	movs	r1, #0
 80078a8:	2043      	movs	r0, #67	; 0x43
 80078aa:	f7f9 fb00 	bl	8000eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80078ae:	2043      	movs	r0, #67	; 0x43
 80078b0:	f7f9 fb19 	bl	8000ee6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80078b4:	bf00      	nop
 80078b6:	3728      	adds	r7, #40	; 0x28
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}
 80078bc:	40023800 	.word	0x40023800
 80078c0:	40020000 	.word	0x40020000

080078c4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b082      	sub	sp, #8
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80078d8:	4619      	mov	r1, r3
 80078da:	4610      	mov	r0, r2
 80078dc:	f7fe fb59 	bl	8005f92 <USBD_LL_SetupStage>
}
 80078e0:	bf00      	nop
 80078e2:	3708      	adds	r7, #8
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b082      	sub	sp, #8
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	460b      	mov	r3, r1
 80078f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80078fa:	78fa      	ldrb	r2, [r7, #3]
 80078fc:	6879      	ldr	r1, [r7, #4]
 80078fe:	4613      	mov	r3, r2
 8007900:	00db      	lsls	r3, r3, #3
 8007902:	4413      	add	r3, r2
 8007904:	009b      	lsls	r3, r3, #2
 8007906:	440b      	add	r3, r1
 8007908:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800790c:	681a      	ldr	r2, [r3, #0]
 800790e:	78fb      	ldrb	r3, [r7, #3]
 8007910:	4619      	mov	r1, r3
 8007912:	f7fe fb93 	bl	800603c <USBD_LL_DataOutStage>
}
 8007916:	bf00      	nop
 8007918:	3708      	adds	r7, #8
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}

0800791e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800791e:	b580      	push	{r7, lr}
 8007920:	b082      	sub	sp, #8
 8007922:	af00      	add	r7, sp, #0
 8007924:	6078      	str	r0, [r7, #4]
 8007926:	460b      	mov	r3, r1
 8007928:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007930:	78fa      	ldrb	r2, [r7, #3]
 8007932:	6879      	ldr	r1, [r7, #4]
 8007934:	4613      	mov	r3, r2
 8007936:	00db      	lsls	r3, r3, #3
 8007938:	4413      	add	r3, r2
 800793a:	009b      	lsls	r3, r3, #2
 800793c:	440b      	add	r3, r1
 800793e:	334c      	adds	r3, #76	; 0x4c
 8007940:	681a      	ldr	r2, [r3, #0]
 8007942:	78fb      	ldrb	r3, [r7, #3]
 8007944:	4619      	mov	r1, r3
 8007946:	f7fe fc2c 	bl	80061a2 <USBD_LL_DataInStage>
}
 800794a:	bf00      	nop
 800794c:	3708      	adds	r7, #8
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}

08007952 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007952:	b580      	push	{r7, lr}
 8007954:	b082      	sub	sp, #8
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007960:	4618      	mov	r0, r3
 8007962:	f7fe fd60 	bl	8006426 <USBD_LL_SOF>
}
 8007966:	bf00      	nop
 8007968:	3708      	adds	r7, #8
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}

0800796e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800796e:	b580      	push	{r7, lr}
 8007970:	b084      	sub	sp, #16
 8007972:	af00      	add	r7, sp, #0
 8007974:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007976:	2301      	movs	r3, #1
 8007978:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	68db      	ldr	r3, [r3, #12]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d102      	bne.n	8007988 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007982:	2300      	movs	r3, #0
 8007984:	73fb      	strb	r3, [r7, #15]
 8007986:	e008      	b.n	800799a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	68db      	ldr	r3, [r3, #12]
 800798c:	2b02      	cmp	r3, #2
 800798e:	d102      	bne.n	8007996 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007990:	2301      	movs	r3, #1
 8007992:	73fb      	strb	r3, [r7, #15]
 8007994:	e001      	b.n	800799a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007996:	f7f8 fff5 	bl	8000984 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80079a0:	7bfa      	ldrb	r2, [r7, #15]
 80079a2:	4611      	mov	r1, r2
 80079a4:	4618      	mov	r0, r3
 80079a6:	f7fe fd00 	bl	80063aa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80079b0:	4618      	mov	r0, r3
 80079b2:	f7fe fca8 	bl	8006306 <USBD_LL_Reset>
}
 80079b6:	bf00      	nop
 80079b8:	3710      	adds	r7, #16
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
	...

080079c0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b082      	sub	sp, #8
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80079ce:	4618      	mov	r0, r3
 80079d0:	f7fe fcfb 	bl	80063ca <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	687a      	ldr	r2, [r7, #4]
 80079e0:	6812      	ldr	r2, [r2, #0]
 80079e2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80079e6:	f043 0301 	orr.w	r3, r3, #1
 80079ea:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6a1b      	ldr	r3, [r3, #32]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d005      	beq.n	8007a00 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80079f4:	4b04      	ldr	r3, [pc, #16]	; (8007a08 <HAL_PCD_SuspendCallback+0x48>)
 80079f6:	691b      	ldr	r3, [r3, #16]
 80079f8:	4a03      	ldr	r2, [pc, #12]	; (8007a08 <HAL_PCD_SuspendCallback+0x48>)
 80079fa:	f043 0306 	orr.w	r3, r3, #6
 80079fe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007a00:	bf00      	nop
 8007a02:	3708      	adds	r7, #8
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}
 8007a08:	e000ed00 	.word	0xe000ed00

08007a0c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b082      	sub	sp, #8
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f7fe fceb 	bl	80063f6 <USBD_LL_Resume>
}
 8007a20:	bf00      	nop
 8007a22:	3708      	adds	r7, #8
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}

08007a28 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b082      	sub	sp, #8
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	460b      	mov	r3, r1
 8007a32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007a3a:	78fa      	ldrb	r2, [r7, #3]
 8007a3c:	4611      	mov	r1, r2
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f7fe fd43 	bl	80064ca <USBD_LL_IsoOUTIncomplete>
}
 8007a44:	bf00      	nop
 8007a46:	3708      	adds	r7, #8
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b082      	sub	sp, #8
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	460b      	mov	r3, r1
 8007a56:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007a5e:	78fa      	ldrb	r2, [r7, #3]
 8007a60:	4611      	mov	r1, r2
 8007a62:	4618      	mov	r0, r3
 8007a64:	f7fe fcff 	bl	8006466 <USBD_LL_IsoINIncomplete>
}
 8007a68:	bf00      	nop
 8007a6a:	3708      	adds	r7, #8
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}

08007a70 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b082      	sub	sp, #8
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f7fe fd55 	bl	800652e <USBD_LL_DevConnected>
}
 8007a84:	bf00      	nop
 8007a86:	3708      	adds	r7, #8
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b082      	sub	sp, #8
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f7fe fd52 	bl	8006544 <USBD_LL_DevDisconnected>
}
 8007aa0:	bf00      	nop
 8007aa2:	3708      	adds	r7, #8
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}

08007aa8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b082      	sub	sp, #8
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d13c      	bne.n	8007b32 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007ab8:	4a20      	ldr	r2, [pc, #128]	; (8007b3c <USBD_LL_Init+0x94>)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	4a1e      	ldr	r2, [pc, #120]	; (8007b3c <USBD_LL_Init+0x94>)
 8007ac4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007ac8:	4b1c      	ldr	r3, [pc, #112]	; (8007b3c <USBD_LL_Init+0x94>)
 8007aca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007ace:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007ad0:	4b1a      	ldr	r3, [pc, #104]	; (8007b3c <USBD_LL_Init+0x94>)
 8007ad2:	2204      	movs	r2, #4
 8007ad4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007ad6:	4b19      	ldr	r3, [pc, #100]	; (8007b3c <USBD_LL_Init+0x94>)
 8007ad8:	2202      	movs	r2, #2
 8007ada:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007adc:	4b17      	ldr	r3, [pc, #92]	; (8007b3c <USBD_LL_Init+0x94>)
 8007ade:	2200      	movs	r2, #0
 8007ae0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007ae2:	4b16      	ldr	r3, [pc, #88]	; (8007b3c <USBD_LL_Init+0x94>)
 8007ae4:	2202      	movs	r2, #2
 8007ae6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007ae8:	4b14      	ldr	r3, [pc, #80]	; (8007b3c <USBD_LL_Init+0x94>)
 8007aea:	2200      	movs	r2, #0
 8007aec:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007aee:	4b13      	ldr	r3, [pc, #76]	; (8007b3c <USBD_LL_Init+0x94>)
 8007af0:	2200      	movs	r2, #0
 8007af2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007af4:	4b11      	ldr	r3, [pc, #68]	; (8007b3c <USBD_LL_Init+0x94>)
 8007af6:	2200      	movs	r2, #0
 8007af8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007afa:	4b10      	ldr	r3, [pc, #64]	; (8007b3c <USBD_LL_Init+0x94>)
 8007afc:	2200      	movs	r2, #0
 8007afe:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007b00:	4b0e      	ldr	r3, [pc, #56]	; (8007b3c <USBD_LL_Init+0x94>)
 8007b02:	2200      	movs	r2, #0
 8007b04:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007b06:	480d      	ldr	r0, [pc, #52]	; (8007b3c <USBD_LL_Init+0x94>)
 8007b08:	f7f9 fbd6 	bl	80012b8 <HAL_PCD_Init>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d001      	beq.n	8007b16 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007b12:	f7f8 ff37 	bl	8000984 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007b16:	2180      	movs	r1, #128	; 0x80
 8007b18:	4808      	ldr	r0, [pc, #32]	; (8007b3c <USBD_LL_Init+0x94>)
 8007b1a:	f7fa fe2e 	bl	800277a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007b1e:	2240      	movs	r2, #64	; 0x40
 8007b20:	2100      	movs	r1, #0
 8007b22:	4806      	ldr	r0, [pc, #24]	; (8007b3c <USBD_LL_Init+0x94>)
 8007b24:	f7fa fde2 	bl	80026ec <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007b28:	2280      	movs	r2, #128	; 0x80
 8007b2a:	2101      	movs	r1, #1
 8007b2c:	4803      	ldr	r0, [pc, #12]	; (8007b3c <USBD_LL_Init+0x94>)
 8007b2e:	f7fa fddd 	bl	80026ec <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007b32:	2300      	movs	r3, #0
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3708      	adds	r7, #8
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}
 8007b3c:	200016bc 	.word	0x200016bc

08007b40 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b084      	sub	sp, #16
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007b56:	4618      	mov	r0, r3
 8007b58:	f7f9 fccb 	bl	80014f2 <HAL_PCD_Start>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b60:	7bfb      	ldrb	r3, [r7, #15]
 8007b62:	4618      	mov	r0, r3
 8007b64:	f000 f942 	bl	8007dec <USBD_Get_USB_Status>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3710      	adds	r7, #16
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}

08007b76 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007b76:	b580      	push	{r7, lr}
 8007b78:	b084      	sub	sp, #16
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6078      	str	r0, [r7, #4]
 8007b7e:	4608      	mov	r0, r1
 8007b80:	4611      	mov	r1, r2
 8007b82:	461a      	mov	r2, r3
 8007b84:	4603      	mov	r3, r0
 8007b86:	70fb      	strb	r3, [r7, #3]
 8007b88:	460b      	mov	r3, r1
 8007b8a:	70bb      	strb	r3, [r7, #2]
 8007b8c:	4613      	mov	r3, r2
 8007b8e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b90:	2300      	movs	r3, #0
 8007b92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b94:	2300      	movs	r3, #0
 8007b96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007b9e:	78bb      	ldrb	r3, [r7, #2]
 8007ba0:	883a      	ldrh	r2, [r7, #0]
 8007ba2:	78f9      	ldrb	r1, [r7, #3]
 8007ba4:	f7fa f99c 	bl	8001ee0 <HAL_PCD_EP_Open>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bac:	7bfb      	ldrb	r3, [r7, #15]
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f000 f91c 	bl	8007dec <USBD_Get_USB_Status>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007bb8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3710      	adds	r7, #16
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}

08007bc2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007bc2:	b580      	push	{r7, lr}
 8007bc4:	b084      	sub	sp, #16
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	6078      	str	r0, [r7, #4]
 8007bca:	460b      	mov	r3, r1
 8007bcc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007bdc:	78fa      	ldrb	r2, [r7, #3]
 8007bde:	4611      	mov	r1, r2
 8007be0:	4618      	mov	r0, r3
 8007be2:	f7fa f9e5 	bl	8001fb0 <HAL_PCD_EP_Close>
 8007be6:	4603      	mov	r3, r0
 8007be8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bea:	7bfb      	ldrb	r3, [r7, #15]
 8007bec:	4618      	mov	r0, r3
 8007bee:	f000 f8fd 	bl	8007dec <USBD_Get_USB_Status>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007bf6:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3710      	adds	r7, #16
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b084      	sub	sp, #16
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	460b      	mov	r3, r1
 8007c0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c10:	2300      	movs	r3, #0
 8007c12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007c1a:	78fa      	ldrb	r2, [r7, #3]
 8007c1c:	4611      	mov	r1, r2
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f7fa fabd 	bl	800219e <HAL_PCD_EP_SetStall>
 8007c24:	4603      	mov	r3, r0
 8007c26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c28:	7bfb      	ldrb	r3, [r7, #15]
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f000 f8de 	bl	8007dec <USBD_Get_USB_Status>
 8007c30:	4603      	mov	r3, r0
 8007c32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c34:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3710      	adds	r7, #16
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}

08007c3e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c3e:	b580      	push	{r7, lr}
 8007c40:	b084      	sub	sp, #16
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	6078      	str	r0, [r7, #4]
 8007c46:	460b      	mov	r3, r1
 8007c48:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007c58:	78fa      	ldrb	r2, [r7, #3]
 8007c5a:	4611      	mov	r1, r2
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f7fa fb02 	bl	8002266 <HAL_PCD_EP_ClrStall>
 8007c62:	4603      	mov	r3, r0
 8007c64:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c66:	7bfb      	ldrb	r3, [r7, #15]
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f000 f8bf 	bl	8007dec <USBD_Get_USB_Status>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c72:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3710      	adds	r7, #16
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b085      	sub	sp, #20
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	460b      	mov	r3, r1
 8007c86:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007c8e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007c90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	da0b      	bge.n	8007cb0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007c98:	78fb      	ldrb	r3, [r7, #3]
 8007c9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c9e:	68f9      	ldr	r1, [r7, #12]
 8007ca0:	4613      	mov	r3, r2
 8007ca2:	00db      	lsls	r3, r3, #3
 8007ca4:	4413      	add	r3, r2
 8007ca6:	009b      	lsls	r3, r3, #2
 8007ca8:	440b      	add	r3, r1
 8007caa:	333e      	adds	r3, #62	; 0x3e
 8007cac:	781b      	ldrb	r3, [r3, #0]
 8007cae:	e00b      	b.n	8007cc8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007cb0:	78fb      	ldrb	r3, [r7, #3]
 8007cb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007cb6:	68f9      	ldr	r1, [r7, #12]
 8007cb8:	4613      	mov	r3, r2
 8007cba:	00db      	lsls	r3, r3, #3
 8007cbc:	4413      	add	r3, r2
 8007cbe:	009b      	lsls	r3, r3, #2
 8007cc0:	440b      	add	r3, r1
 8007cc2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007cc6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3714      	adds	r7, #20
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd2:	4770      	bx	lr

08007cd4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b084      	sub	sp, #16
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	460b      	mov	r3, r1
 8007cde:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007cee:	78fa      	ldrb	r2, [r7, #3]
 8007cf0:	4611      	mov	r1, r2
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f7fa f8cf 	bl	8001e96 <HAL_PCD_SetAddress>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cfc:	7bfb      	ldrb	r3, [r7, #15]
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f000 f874 	bl	8007dec <USBD_Get_USB_Status>
 8007d04:	4603      	mov	r3, r0
 8007d06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d08:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3710      	adds	r7, #16
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}

08007d12 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007d12:	b580      	push	{r7, lr}
 8007d14:	b086      	sub	sp, #24
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	60f8      	str	r0, [r7, #12]
 8007d1a:	607a      	str	r2, [r7, #4]
 8007d1c:	603b      	str	r3, [r7, #0]
 8007d1e:	460b      	mov	r3, r1
 8007d20:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d22:	2300      	movs	r3, #0
 8007d24:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d26:	2300      	movs	r3, #0
 8007d28:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007d30:	7af9      	ldrb	r1, [r7, #11]
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	687a      	ldr	r2, [r7, #4]
 8007d36:	f7fa f9e8 	bl	800210a <HAL_PCD_EP_Transmit>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d3e:	7dfb      	ldrb	r3, [r7, #23]
 8007d40:	4618      	mov	r0, r3
 8007d42:	f000 f853 	bl	8007dec <USBD_Get_USB_Status>
 8007d46:	4603      	mov	r3, r0
 8007d48:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007d4a:	7dbb      	ldrb	r3, [r7, #22]
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3718      	adds	r7, #24
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}

08007d54 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b086      	sub	sp, #24
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	60f8      	str	r0, [r7, #12]
 8007d5c:	607a      	str	r2, [r7, #4]
 8007d5e:	603b      	str	r3, [r7, #0]
 8007d60:	460b      	mov	r3, r1
 8007d62:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d64:	2300      	movs	r3, #0
 8007d66:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007d72:	7af9      	ldrb	r1, [r7, #11]
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	687a      	ldr	r2, [r7, #4]
 8007d78:	f7fa f964 	bl	8002044 <HAL_PCD_EP_Receive>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d80:	7dfb      	ldrb	r3, [r7, #23]
 8007d82:	4618      	mov	r0, r3
 8007d84:	f000 f832 	bl	8007dec <USBD_Get_USB_Status>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007d8c:	7dbb      	ldrb	r3, [r7, #22]
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3718      	adds	r7, #24
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}

08007d96 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d96:	b580      	push	{r7, lr}
 8007d98:	b082      	sub	sp, #8
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	6078      	str	r0, [r7, #4]
 8007d9e:	460b      	mov	r3, r1
 8007da0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007da8:	78fa      	ldrb	r2, [r7, #3]
 8007daa:	4611      	mov	r1, r2
 8007dac:	4618      	mov	r0, r3
 8007dae:	f7fa f994 	bl	80020da <HAL_PCD_EP_GetRxCount>
 8007db2:	4603      	mov	r3, r0
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3708      	adds	r7, #8
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b083      	sub	sp, #12
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007dc4:	4b03      	ldr	r3, [pc, #12]	; (8007dd4 <USBD_static_malloc+0x18>)
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	370c      	adds	r7, #12
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr
 8007dd2:	bf00      	nop
 8007dd4:	20001bc8 	.word	0x20001bc8

08007dd8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b083      	sub	sp, #12
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]

}
 8007de0:	bf00      	nop
 8007de2:	370c      	adds	r7, #12
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr

08007dec <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b085      	sub	sp, #20
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	4603      	mov	r3, r0
 8007df4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007df6:	2300      	movs	r3, #0
 8007df8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007dfa:	79fb      	ldrb	r3, [r7, #7]
 8007dfc:	2b03      	cmp	r3, #3
 8007dfe:	d817      	bhi.n	8007e30 <USBD_Get_USB_Status+0x44>
 8007e00:	a201      	add	r2, pc, #4	; (adr r2, 8007e08 <USBD_Get_USB_Status+0x1c>)
 8007e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e06:	bf00      	nop
 8007e08:	08007e19 	.word	0x08007e19
 8007e0c:	08007e1f 	.word	0x08007e1f
 8007e10:	08007e25 	.word	0x08007e25
 8007e14:	08007e2b 	.word	0x08007e2b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	73fb      	strb	r3, [r7, #15]
    break;
 8007e1c:	e00b      	b.n	8007e36 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007e1e:	2303      	movs	r3, #3
 8007e20:	73fb      	strb	r3, [r7, #15]
    break;
 8007e22:	e008      	b.n	8007e36 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007e24:	2301      	movs	r3, #1
 8007e26:	73fb      	strb	r3, [r7, #15]
    break;
 8007e28:	e005      	b.n	8007e36 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007e2a:	2303      	movs	r3, #3
 8007e2c:	73fb      	strb	r3, [r7, #15]
    break;
 8007e2e:	e002      	b.n	8007e36 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007e30:	2303      	movs	r3, #3
 8007e32:	73fb      	strb	r3, [r7, #15]
    break;
 8007e34:	bf00      	nop
  }
  return usb_status;
 8007e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3714      	adds	r7, #20
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e42:	4770      	bx	lr

08007e44 <sniprintf>:
 8007e44:	b40c      	push	{r2, r3}
 8007e46:	b530      	push	{r4, r5, lr}
 8007e48:	4b17      	ldr	r3, [pc, #92]	; (8007ea8 <sniprintf+0x64>)
 8007e4a:	1e0c      	subs	r4, r1, #0
 8007e4c:	681d      	ldr	r5, [r3, #0]
 8007e4e:	b09d      	sub	sp, #116	; 0x74
 8007e50:	da08      	bge.n	8007e64 <sniprintf+0x20>
 8007e52:	238b      	movs	r3, #139	; 0x8b
 8007e54:	602b      	str	r3, [r5, #0]
 8007e56:	f04f 30ff 	mov.w	r0, #4294967295
 8007e5a:	b01d      	add	sp, #116	; 0x74
 8007e5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007e60:	b002      	add	sp, #8
 8007e62:	4770      	bx	lr
 8007e64:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007e68:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007e6c:	bf14      	ite	ne
 8007e6e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007e72:	4623      	moveq	r3, r4
 8007e74:	9304      	str	r3, [sp, #16]
 8007e76:	9307      	str	r3, [sp, #28]
 8007e78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007e7c:	9002      	str	r0, [sp, #8]
 8007e7e:	9006      	str	r0, [sp, #24]
 8007e80:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007e84:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007e86:	ab21      	add	r3, sp, #132	; 0x84
 8007e88:	a902      	add	r1, sp, #8
 8007e8a:	4628      	mov	r0, r5
 8007e8c:	9301      	str	r3, [sp, #4]
 8007e8e:	f000 f993 	bl	80081b8 <_svfiprintf_r>
 8007e92:	1c43      	adds	r3, r0, #1
 8007e94:	bfbc      	itt	lt
 8007e96:	238b      	movlt	r3, #139	; 0x8b
 8007e98:	602b      	strlt	r3, [r5, #0]
 8007e9a:	2c00      	cmp	r4, #0
 8007e9c:	d0dd      	beq.n	8007e5a <sniprintf+0x16>
 8007e9e:	9b02      	ldr	r3, [sp, #8]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	701a      	strb	r2, [r3, #0]
 8007ea4:	e7d9      	b.n	8007e5a <sniprintf+0x16>
 8007ea6:	bf00      	nop
 8007ea8:	20000148 	.word	0x20000148

08007eac <memset>:
 8007eac:	4402      	add	r2, r0
 8007eae:	4603      	mov	r3, r0
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d100      	bne.n	8007eb6 <memset+0xa>
 8007eb4:	4770      	bx	lr
 8007eb6:	f803 1b01 	strb.w	r1, [r3], #1
 8007eba:	e7f9      	b.n	8007eb0 <memset+0x4>

08007ebc <__errno>:
 8007ebc:	4b01      	ldr	r3, [pc, #4]	; (8007ec4 <__errno+0x8>)
 8007ebe:	6818      	ldr	r0, [r3, #0]
 8007ec0:	4770      	bx	lr
 8007ec2:	bf00      	nop
 8007ec4:	20000148 	.word	0x20000148

08007ec8 <__libc_init_array>:
 8007ec8:	b570      	push	{r4, r5, r6, lr}
 8007eca:	4d0d      	ldr	r5, [pc, #52]	; (8007f00 <__libc_init_array+0x38>)
 8007ecc:	4c0d      	ldr	r4, [pc, #52]	; (8007f04 <__libc_init_array+0x3c>)
 8007ece:	1b64      	subs	r4, r4, r5
 8007ed0:	10a4      	asrs	r4, r4, #2
 8007ed2:	2600      	movs	r6, #0
 8007ed4:	42a6      	cmp	r6, r4
 8007ed6:	d109      	bne.n	8007eec <__libc_init_array+0x24>
 8007ed8:	4d0b      	ldr	r5, [pc, #44]	; (8007f08 <__libc_init_array+0x40>)
 8007eda:	4c0c      	ldr	r4, [pc, #48]	; (8007f0c <__libc_init_array+0x44>)
 8007edc:	f000 fc6a 	bl	80087b4 <_init>
 8007ee0:	1b64      	subs	r4, r4, r5
 8007ee2:	10a4      	asrs	r4, r4, #2
 8007ee4:	2600      	movs	r6, #0
 8007ee6:	42a6      	cmp	r6, r4
 8007ee8:	d105      	bne.n	8007ef6 <__libc_init_array+0x2e>
 8007eea:	bd70      	pop	{r4, r5, r6, pc}
 8007eec:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ef0:	4798      	blx	r3
 8007ef2:	3601      	adds	r6, #1
 8007ef4:	e7ee      	b.n	8007ed4 <__libc_init_array+0xc>
 8007ef6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007efa:	4798      	blx	r3
 8007efc:	3601      	adds	r6, #1
 8007efe:	e7f2      	b.n	8007ee6 <__libc_init_array+0x1e>
 8007f00:	08008878 	.word	0x08008878
 8007f04:	08008878 	.word	0x08008878
 8007f08:	08008878 	.word	0x08008878
 8007f0c:	0800887c 	.word	0x0800887c

08007f10 <__retarget_lock_acquire_recursive>:
 8007f10:	4770      	bx	lr

08007f12 <__retarget_lock_release_recursive>:
 8007f12:	4770      	bx	lr

08007f14 <_free_r>:
 8007f14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f16:	2900      	cmp	r1, #0
 8007f18:	d044      	beq.n	8007fa4 <_free_r+0x90>
 8007f1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f1e:	9001      	str	r0, [sp, #4]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	f1a1 0404 	sub.w	r4, r1, #4
 8007f26:	bfb8      	it	lt
 8007f28:	18e4      	addlt	r4, r4, r3
 8007f2a:	f000 f8df 	bl	80080ec <__malloc_lock>
 8007f2e:	4a1e      	ldr	r2, [pc, #120]	; (8007fa8 <_free_r+0x94>)
 8007f30:	9801      	ldr	r0, [sp, #4]
 8007f32:	6813      	ldr	r3, [r2, #0]
 8007f34:	b933      	cbnz	r3, 8007f44 <_free_r+0x30>
 8007f36:	6063      	str	r3, [r4, #4]
 8007f38:	6014      	str	r4, [r2, #0]
 8007f3a:	b003      	add	sp, #12
 8007f3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f40:	f000 b8da 	b.w	80080f8 <__malloc_unlock>
 8007f44:	42a3      	cmp	r3, r4
 8007f46:	d908      	bls.n	8007f5a <_free_r+0x46>
 8007f48:	6825      	ldr	r5, [r4, #0]
 8007f4a:	1961      	adds	r1, r4, r5
 8007f4c:	428b      	cmp	r3, r1
 8007f4e:	bf01      	itttt	eq
 8007f50:	6819      	ldreq	r1, [r3, #0]
 8007f52:	685b      	ldreq	r3, [r3, #4]
 8007f54:	1949      	addeq	r1, r1, r5
 8007f56:	6021      	streq	r1, [r4, #0]
 8007f58:	e7ed      	b.n	8007f36 <_free_r+0x22>
 8007f5a:	461a      	mov	r2, r3
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	b10b      	cbz	r3, 8007f64 <_free_r+0x50>
 8007f60:	42a3      	cmp	r3, r4
 8007f62:	d9fa      	bls.n	8007f5a <_free_r+0x46>
 8007f64:	6811      	ldr	r1, [r2, #0]
 8007f66:	1855      	adds	r5, r2, r1
 8007f68:	42a5      	cmp	r5, r4
 8007f6a:	d10b      	bne.n	8007f84 <_free_r+0x70>
 8007f6c:	6824      	ldr	r4, [r4, #0]
 8007f6e:	4421      	add	r1, r4
 8007f70:	1854      	adds	r4, r2, r1
 8007f72:	42a3      	cmp	r3, r4
 8007f74:	6011      	str	r1, [r2, #0]
 8007f76:	d1e0      	bne.n	8007f3a <_free_r+0x26>
 8007f78:	681c      	ldr	r4, [r3, #0]
 8007f7a:	685b      	ldr	r3, [r3, #4]
 8007f7c:	6053      	str	r3, [r2, #4]
 8007f7e:	440c      	add	r4, r1
 8007f80:	6014      	str	r4, [r2, #0]
 8007f82:	e7da      	b.n	8007f3a <_free_r+0x26>
 8007f84:	d902      	bls.n	8007f8c <_free_r+0x78>
 8007f86:	230c      	movs	r3, #12
 8007f88:	6003      	str	r3, [r0, #0]
 8007f8a:	e7d6      	b.n	8007f3a <_free_r+0x26>
 8007f8c:	6825      	ldr	r5, [r4, #0]
 8007f8e:	1961      	adds	r1, r4, r5
 8007f90:	428b      	cmp	r3, r1
 8007f92:	bf04      	itt	eq
 8007f94:	6819      	ldreq	r1, [r3, #0]
 8007f96:	685b      	ldreq	r3, [r3, #4]
 8007f98:	6063      	str	r3, [r4, #4]
 8007f9a:	bf04      	itt	eq
 8007f9c:	1949      	addeq	r1, r1, r5
 8007f9e:	6021      	streq	r1, [r4, #0]
 8007fa0:	6054      	str	r4, [r2, #4]
 8007fa2:	e7ca      	b.n	8007f3a <_free_r+0x26>
 8007fa4:	b003      	add	sp, #12
 8007fa6:	bd30      	pop	{r4, r5, pc}
 8007fa8:	20001f28 	.word	0x20001f28

08007fac <sbrk_aligned>:
 8007fac:	b570      	push	{r4, r5, r6, lr}
 8007fae:	4e0e      	ldr	r6, [pc, #56]	; (8007fe8 <sbrk_aligned+0x3c>)
 8007fb0:	460c      	mov	r4, r1
 8007fb2:	6831      	ldr	r1, [r6, #0]
 8007fb4:	4605      	mov	r5, r0
 8007fb6:	b911      	cbnz	r1, 8007fbe <sbrk_aligned+0x12>
 8007fb8:	f000 fba6 	bl	8008708 <_sbrk_r>
 8007fbc:	6030      	str	r0, [r6, #0]
 8007fbe:	4621      	mov	r1, r4
 8007fc0:	4628      	mov	r0, r5
 8007fc2:	f000 fba1 	bl	8008708 <_sbrk_r>
 8007fc6:	1c43      	adds	r3, r0, #1
 8007fc8:	d00a      	beq.n	8007fe0 <sbrk_aligned+0x34>
 8007fca:	1cc4      	adds	r4, r0, #3
 8007fcc:	f024 0403 	bic.w	r4, r4, #3
 8007fd0:	42a0      	cmp	r0, r4
 8007fd2:	d007      	beq.n	8007fe4 <sbrk_aligned+0x38>
 8007fd4:	1a21      	subs	r1, r4, r0
 8007fd6:	4628      	mov	r0, r5
 8007fd8:	f000 fb96 	bl	8008708 <_sbrk_r>
 8007fdc:	3001      	adds	r0, #1
 8007fde:	d101      	bne.n	8007fe4 <sbrk_aligned+0x38>
 8007fe0:	f04f 34ff 	mov.w	r4, #4294967295
 8007fe4:	4620      	mov	r0, r4
 8007fe6:	bd70      	pop	{r4, r5, r6, pc}
 8007fe8:	20001f2c 	.word	0x20001f2c

08007fec <_malloc_r>:
 8007fec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ff0:	1ccd      	adds	r5, r1, #3
 8007ff2:	f025 0503 	bic.w	r5, r5, #3
 8007ff6:	3508      	adds	r5, #8
 8007ff8:	2d0c      	cmp	r5, #12
 8007ffa:	bf38      	it	cc
 8007ffc:	250c      	movcc	r5, #12
 8007ffe:	2d00      	cmp	r5, #0
 8008000:	4607      	mov	r7, r0
 8008002:	db01      	blt.n	8008008 <_malloc_r+0x1c>
 8008004:	42a9      	cmp	r1, r5
 8008006:	d905      	bls.n	8008014 <_malloc_r+0x28>
 8008008:	230c      	movs	r3, #12
 800800a:	603b      	str	r3, [r7, #0]
 800800c:	2600      	movs	r6, #0
 800800e:	4630      	mov	r0, r6
 8008010:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008014:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80080e8 <_malloc_r+0xfc>
 8008018:	f000 f868 	bl	80080ec <__malloc_lock>
 800801c:	f8d8 3000 	ldr.w	r3, [r8]
 8008020:	461c      	mov	r4, r3
 8008022:	bb5c      	cbnz	r4, 800807c <_malloc_r+0x90>
 8008024:	4629      	mov	r1, r5
 8008026:	4638      	mov	r0, r7
 8008028:	f7ff ffc0 	bl	8007fac <sbrk_aligned>
 800802c:	1c43      	adds	r3, r0, #1
 800802e:	4604      	mov	r4, r0
 8008030:	d155      	bne.n	80080de <_malloc_r+0xf2>
 8008032:	f8d8 4000 	ldr.w	r4, [r8]
 8008036:	4626      	mov	r6, r4
 8008038:	2e00      	cmp	r6, #0
 800803a:	d145      	bne.n	80080c8 <_malloc_r+0xdc>
 800803c:	2c00      	cmp	r4, #0
 800803e:	d048      	beq.n	80080d2 <_malloc_r+0xe6>
 8008040:	6823      	ldr	r3, [r4, #0]
 8008042:	4631      	mov	r1, r6
 8008044:	4638      	mov	r0, r7
 8008046:	eb04 0903 	add.w	r9, r4, r3
 800804a:	f000 fb5d 	bl	8008708 <_sbrk_r>
 800804e:	4581      	cmp	r9, r0
 8008050:	d13f      	bne.n	80080d2 <_malloc_r+0xe6>
 8008052:	6821      	ldr	r1, [r4, #0]
 8008054:	1a6d      	subs	r5, r5, r1
 8008056:	4629      	mov	r1, r5
 8008058:	4638      	mov	r0, r7
 800805a:	f7ff ffa7 	bl	8007fac <sbrk_aligned>
 800805e:	3001      	adds	r0, #1
 8008060:	d037      	beq.n	80080d2 <_malloc_r+0xe6>
 8008062:	6823      	ldr	r3, [r4, #0]
 8008064:	442b      	add	r3, r5
 8008066:	6023      	str	r3, [r4, #0]
 8008068:	f8d8 3000 	ldr.w	r3, [r8]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d038      	beq.n	80080e2 <_malloc_r+0xf6>
 8008070:	685a      	ldr	r2, [r3, #4]
 8008072:	42a2      	cmp	r2, r4
 8008074:	d12b      	bne.n	80080ce <_malloc_r+0xe2>
 8008076:	2200      	movs	r2, #0
 8008078:	605a      	str	r2, [r3, #4]
 800807a:	e00f      	b.n	800809c <_malloc_r+0xb0>
 800807c:	6822      	ldr	r2, [r4, #0]
 800807e:	1b52      	subs	r2, r2, r5
 8008080:	d41f      	bmi.n	80080c2 <_malloc_r+0xd6>
 8008082:	2a0b      	cmp	r2, #11
 8008084:	d917      	bls.n	80080b6 <_malloc_r+0xca>
 8008086:	1961      	adds	r1, r4, r5
 8008088:	42a3      	cmp	r3, r4
 800808a:	6025      	str	r5, [r4, #0]
 800808c:	bf18      	it	ne
 800808e:	6059      	strne	r1, [r3, #4]
 8008090:	6863      	ldr	r3, [r4, #4]
 8008092:	bf08      	it	eq
 8008094:	f8c8 1000 	streq.w	r1, [r8]
 8008098:	5162      	str	r2, [r4, r5]
 800809a:	604b      	str	r3, [r1, #4]
 800809c:	4638      	mov	r0, r7
 800809e:	f104 060b 	add.w	r6, r4, #11
 80080a2:	f000 f829 	bl	80080f8 <__malloc_unlock>
 80080a6:	f026 0607 	bic.w	r6, r6, #7
 80080aa:	1d23      	adds	r3, r4, #4
 80080ac:	1af2      	subs	r2, r6, r3
 80080ae:	d0ae      	beq.n	800800e <_malloc_r+0x22>
 80080b0:	1b9b      	subs	r3, r3, r6
 80080b2:	50a3      	str	r3, [r4, r2]
 80080b4:	e7ab      	b.n	800800e <_malloc_r+0x22>
 80080b6:	42a3      	cmp	r3, r4
 80080b8:	6862      	ldr	r2, [r4, #4]
 80080ba:	d1dd      	bne.n	8008078 <_malloc_r+0x8c>
 80080bc:	f8c8 2000 	str.w	r2, [r8]
 80080c0:	e7ec      	b.n	800809c <_malloc_r+0xb0>
 80080c2:	4623      	mov	r3, r4
 80080c4:	6864      	ldr	r4, [r4, #4]
 80080c6:	e7ac      	b.n	8008022 <_malloc_r+0x36>
 80080c8:	4634      	mov	r4, r6
 80080ca:	6876      	ldr	r6, [r6, #4]
 80080cc:	e7b4      	b.n	8008038 <_malloc_r+0x4c>
 80080ce:	4613      	mov	r3, r2
 80080d0:	e7cc      	b.n	800806c <_malloc_r+0x80>
 80080d2:	230c      	movs	r3, #12
 80080d4:	603b      	str	r3, [r7, #0]
 80080d6:	4638      	mov	r0, r7
 80080d8:	f000 f80e 	bl	80080f8 <__malloc_unlock>
 80080dc:	e797      	b.n	800800e <_malloc_r+0x22>
 80080de:	6025      	str	r5, [r4, #0]
 80080e0:	e7dc      	b.n	800809c <_malloc_r+0xb0>
 80080e2:	605b      	str	r3, [r3, #4]
 80080e4:	deff      	udf	#255	; 0xff
 80080e6:	bf00      	nop
 80080e8:	20001f28 	.word	0x20001f28

080080ec <__malloc_lock>:
 80080ec:	4801      	ldr	r0, [pc, #4]	; (80080f4 <__malloc_lock+0x8>)
 80080ee:	f7ff bf0f 	b.w	8007f10 <__retarget_lock_acquire_recursive>
 80080f2:	bf00      	nop
 80080f4:	20001f24 	.word	0x20001f24

080080f8 <__malloc_unlock>:
 80080f8:	4801      	ldr	r0, [pc, #4]	; (8008100 <__malloc_unlock+0x8>)
 80080fa:	f7ff bf0a 	b.w	8007f12 <__retarget_lock_release_recursive>
 80080fe:	bf00      	nop
 8008100:	20001f24 	.word	0x20001f24

08008104 <__ssputs_r>:
 8008104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008108:	688e      	ldr	r6, [r1, #8]
 800810a:	461f      	mov	r7, r3
 800810c:	42be      	cmp	r6, r7
 800810e:	680b      	ldr	r3, [r1, #0]
 8008110:	4682      	mov	sl, r0
 8008112:	460c      	mov	r4, r1
 8008114:	4690      	mov	r8, r2
 8008116:	d82c      	bhi.n	8008172 <__ssputs_r+0x6e>
 8008118:	898a      	ldrh	r2, [r1, #12]
 800811a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800811e:	d026      	beq.n	800816e <__ssputs_r+0x6a>
 8008120:	6965      	ldr	r5, [r4, #20]
 8008122:	6909      	ldr	r1, [r1, #16]
 8008124:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008128:	eba3 0901 	sub.w	r9, r3, r1
 800812c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008130:	1c7b      	adds	r3, r7, #1
 8008132:	444b      	add	r3, r9
 8008134:	106d      	asrs	r5, r5, #1
 8008136:	429d      	cmp	r5, r3
 8008138:	bf38      	it	cc
 800813a:	461d      	movcc	r5, r3
 800813c:	0553      	lsls	r3, r2, #21
 800813e:	d527      	bpl.n	8008190 <__ssputs_r+0x8c>
 8008140:	4629      	mov	r1, r5
 8008142:	f7ff ff53 	bl	8007fec <_malloc_r>
 8008146:	4606      	mov	r6, r0
 8008148:	b360      	cbz	r0, 80081a4 <__ssputs_r+0xa0>
 800814a:	6921      	ldr	r1, [r4, #16]
 800814c:	464a      	mov	r2, r9
 800814e:	f000 faeb 	bl	8008728 <memcpy>
 8008152:	89a3      	ldrh	r3, [r4, #12]
 8008154:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800815c:	81a3      	strh	r3, [r4, #12]
 800815e:	6126      	str	r6, [r4, #16]
 8008160:	6165      	str	r5, [r4, #20]
 8008162:	444e      	add	r6, r9
 8008164:	eba5 0509 	sub.w	r5, r5, r9
 8008168:	6026      	str	r6, [r4, #0]
 800816a:	60a5      	str	r5, [r4, #8]
 800816c:	463e      	mov	r6, r7
 800816e:	42be      	cmp	r6, r7
 8008170:	d900      	bls.n	8008174 <__ssputs_r+0x70>
 8008172:	463e      	mov	r6, r7
 8008174:	6820      	ldr	r0, [r4, #0]
 8008176:	4632      	mov	r2, r6
 8008178:	4641      	mov	r1, r8
 800817a:	f000 faab 	bl	80086d4 <memmove>
 800817e:	68a3      	ldr	r3, [r4, #8]
 8008180:	1b9b      	subs	r3, r3, r6
 8008182:	60a3      	str	r3, [r4, #8]
 8008184:	6823      	ldr	r3, [r4, #0]
 8008186:	4433      	add	r3, r6
 8008188:	6023      	str	r3, [r4, #0]
 800818a:	2000      	movs	r0, #0
 800818c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008190:	462a      	mov	r2, r5
 8008192:	f000 fad7 	bl	8008744 <_realloc_r>
 8008196:	4606      	mov	r6, r0
 8008198:	2800      	cmp	r0, #0
 800819a:	d1e0      	bne.n	800815e <__ssputs_r+0x5a>
 800819c:	6921      	ldr	r1, [r4, #16]
 800819e:	4650      	mov	r0, sl
 80081a0:	f7ff feb8 	bl	8007f14 <_free_r>
 80081a4:	230c      	movs	r3, #12
 80081a6:	f8ca 3000 	str.w	r3, [sl]
 80081aa:	89a3      	ldrh	r3, [r4, #12]
 80081ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081b0:	81a3      	strh	r3, [r4, #12]
 80081b2:	f04f 30ff 	mov.w	r0, #4294967295
 80081b6:	e7e9      	b.n	800818c <__ssputs_r+0x88>

080081b8 <_svfiprintf_r>:
 80081b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081bc:	4698      	mov	r8, r3
 80081be:	898b      	ldrh	r3, [r1, #12]
 80081c0:	061b      	lsls	r3, r3, #24
 80081c2:	b09d      	sub	sp, #116	; 0x74
 80081c4:	4607      	mov	r7, r0
 80081c6:	460d      	mov	r5, r1
 80081c8:	4614      	mov	r4, r2
 80081ca:	d50e      	bpl.n	80081ea <_svfiprintf_r+0x32>
 80081cc:	690b      	ldr	r3, [r1, #16]
 80081ce:	b963      	cbnz	r3, 80081ea <_svfiprintf_r+0x32>
 80081d0:	2140      	movs	r1, #64	; 0x40
 80081d2:	f7ff ff0b 	bl	8007fec <_malloc_r>
 80081d6:	6028      	str	r0, [r5, #0]
 80081d8:	6128      	str	r0, [r5, #16]
 80081da:	b920      	cbnz	r0, 80081e6 <_svfiprintf_r+0x2e>
 80081dc:	230c      	movs	r3, #12
 80081de:	603b      	str	r3, [r7, #0]
 80081e0:	f04f 30ff 	mov.w	r0, #4294967295
 80081e4:	e0d0      	b.n	8008388 <_svfiprintf_r+0x1d0>
 80081e6:	2340      	movs	r3, #64	; 0x40
 80081e8:	616b      	str	r3, [r5, #20]
 80081ea:	2300      	movs	r3, #0
 80081ec:	9309      	str	r3, [sp, #36]	; 0x24
 80081ee:	2320      	movs	r3, #32
 80081f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80081f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80081f8:	2330      	movs	r3, #48	; 0x30
 80081fa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80083a0 <_svfiprintf_r+0x1e8>
 80081fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008202:	f04f 0901 	mov.w	r9, #1
 8008206:	4623      	mov	r3, r4
 8008208:	469a      	mov	sl, r3
 800820a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800820e:	b10a      	cbz	r2, 8008214 <_svfiprintf_r+0x5c>
 8008210:	2a25      	cmp	r2, #37	; 0x25
 8008212:	d1f9      	bne.n	8008208 <_svfiprintf_r+0x50>
 8008214:	ebba 0b04 	subs.w	fp, sl, r4
 8008218:	d00b      	beq.n	8008232 <_svfiprintf_r+0x7a>
 800821a:	465b      	mov	r3, fp
 800821c:	4622      	mov	r2, r4
 800821e:	4629      	mov	r1, r5
 8008220:	4638      	mov	r0, r7
 8008222:	f7ff ff6f 	bl	8008104 <__ssputs_r>
 8008226:	3001      	adds	r0, #1
 8008228:	f000 80a9 	beq.w	800837e <_svfiprintf_r+0x1c6>
 800822c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800822e:	445a      	add	r2, fp
 8008230:	9209      	str	r2, [sp, #36]	; 0x24
 8008232:	f89a 3000 	ldrb.w	r3, [sl]
 8008236:	2b00      	cmp	r3, #0
 8008238:	f000 80a1 	beq.w	800837e <_svfiprintf_r+0x1c6>
 800823c:	2300      	movs	r3, #0
 800823e:	f04f 32ff 	mov.w	r2, #4294967295
 8008242:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008246:	f10a 0a01 	add.w	sl, sl, #1
 800824a:	9304      	str	r3, [sp, #16]
 800824c:	9307      	str	r3, [sp, #28]
 800824e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008252:	931a      	str	r3, [sp, #104]	; 0x68
 8008254:	4654      	mov	r4, sl
 8008256:	2205      	movs	r2, #5
 8008258:	f814 1b01 	ldrb.w	r1, [r4], #1
 800825c:	4850      	ldr	r0, [pc, #320]	; (80083a0 <_svfiprintf_r+0x1e8>)
 800825e:	f7f7 ffbf 	bl	80001e0 <memchr>
 8008262:	9a04      	ldr	r2, [sp, #16]
 8008264:	b9d8      	cbnz	r0, 800829e <_svfiprintf_r+0xe6>
 8008266:	06d0      	lsls	r0, r2, #27
 8008268:	bf44      	itt	mi
 800826a:	2320      	movmi	r3, #32
 800826c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008270:	0711      	lsls	r1, r2, #28
 8008272:	bf44      	itt	mi
 8008274:	232b      	movmi	r3, #43	; 0x2b
 8008276:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800827a:	f89a 3000 	ldrb.w	r3, [sl]
 800827e:	2b2a      	cmp	r3, #42	; 0x2a
 8008280:	d015      	beq.n	80082ae <_svfiprintf_r+0xf6>
 8008282:	9a07      	ldr	r2, [sp, #28]
 8008284:	4654      	mov	r4, sl
 8008286:	2000      	movs	r0, #0
 8008288:	f04f 0c0a 	mov.w	ip, #10
 800828c:	4621      	mov	r1, r4
 800828e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008292:	3b30      	subs	r3, #48	; 0x30
 8008294:	2b09      	cmp	r3, #9
 8008296:	d94d      	bls.n	8008334 <_svfiprintf_r+0x17c>
 8008298:	b1b0      	cbz	r0, 80082c8 <_svfiprintf_r+0x110>
 800829a:	9207      	str	r2, [sp, #28]
 800829c:	e014      	b.n	80082c8 <_svfiprintf_r+0x110>
 800829e:	eba0 0308 	sub.w	r3, r0, r8
 80082a2:	fa09 f303 	lsl.w	r3, r9, r3
 80082a6:	4313      	orrs	r3, r2
 80082a8:	9304      	str	r3, [sp, #16]
 80082aa:	46a2      	mov	sl, r4
 80082ac:	e7d2      	b.n	8008254 <_svfiprintf_r+0x9c>
 80082ae:	9b03      	ldr	r3, [sp, #12]
 80082b0:	1d19      	adds	r1, r3, #4
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	9103      	str	r1, [sp, #12]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	bfbb      	ittet	lt
 80082ba:	425b      	neglt	r3, r3
 80082bc:	f042 0202 	orrlt.w	r2, r2, #2
 80082c0:	9307      	strge	r3, [sp, #28]
 80082c2:	9307      	strlt	r3, [sp, #28]
 80082c4:	bfb8      	it	lt
 80082c6:	9204      	strlt	r2, [sp, #16]
 80082c8:	7823      	ldrb	r3, [r4, #0]
 80082ca:	2b2e      	cmp	r3, #46	; 0x2e
 80082cc:	d10c      	bne.n	80082e8 <_svfiprintf_r+0x130>
 80082ce:	7863      	ldrb	r3, [r4, #1]
 80082d0:	2b2a      	cmp	r3, #42	; 0x2a
 80082d2:	d134      	bne.n	800833e <_svfiprintf_r+0x186>
 80082d4:	9b03      	ldr	r3, [sp, #12]
 80082d6:	1d1a      	adds	r2, r3, #4
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	9203      	str	r2, [sp, #12]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	bfb8      	it	lt
 80082e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80082e4:	3402      	adds	r4, #2
 80082e6:	9305      	str	r3, [sp, #20]
 80082e8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80083b0 <_svfiprintf_r+0x1f8>
 80082ec:	7821      	ldrb	r1, [r4, #0]
 80082ee:	2203      	movs	r2, #3
 80082f0:	4650      	mov	r0, sl
 80082f2:	f7f7 ff75 	bl	80001e0 <memchr>
 80082f6:	b138      	cbz	r0, 8008308 <_svfiprintf_r+0x150>
 80082f8:	9b04      	ldr	r3, [sp, #16]
 80082fa:	eba0 000a 	sub.w	r0, r0, sl
 80082fe:	2240      	movs	r2, #64	; 0x40
 8008300:	4082      	lsls	r2, r0
 8008302:	4313      	orrs	r3, r2
 8008304:	3401      	adds	r4, #1
 8008306:	9304      	str	r3, [sp, #16]
 8008308:	f814 1b01 	ldrb.w	r1, [r4], #1
 800830c:	4825      	ldr	r0, [pc, #148]	; (80083a4 <_svfiprintf_r+0x1ec>)
 800830e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008312:	2206      	movs	r2, #6
 8008314:	f7f7 ff64 	bl	80001e0 <memchr>
 8008318:	2800      	cmp	r0, #0
 800831a:	d038      	beq.n	800838e <_svfiprintf_r+0x1d6>
 800831c:	4b22      	ldr	r3, [pc, #136]	; (80083a8 <_svfiprintf_r+0x1f0>)
 800831e:	bb1b      	cbnz	r3, 8008368 <_svfiprintf_r+0x1b0>
 8008320:	9b03      	ldr	r3, [sp, #12]
 8008322:	3307      	adds	r3, #7
 8008324:	f023 0307 	bic.w	r3, r3, #7
 8008328:	3308      	adds	r3, #8
 800832a:	9303      	str	r3, [sp, #12]
 800832c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800832e:	4433      	add	r3, r6
 8008330:	9309      	str	r3, [sp, #36]	; 0x24
 8008332:	e768      	b.n	8008206 <_svfiprintf_r+0x4e>
 8008334:	fb0c 3202 	mla	r2, ip, r2, r3
 8008338:	460c      	mov	r4, r1
 800833a:	2001      	movs	r0, #1
 800833c:	e7a6      	b.n	800828c <_svfiprintf_r+0xd4>
 800833e:	2300      	movs	r3, #0
 8008340:	3401      	adds	r4, #1
 8008342:	9305      	str	r3, [sp, #20]
 8008344:	4619      	mov	r1, r3
 8008346:	f04f 0c0a 	mov.w	ip, #10
 800834a:	4620      	mov	r0, r4
 800834c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008350:	3a30      	subs	r2, #48	; 0x30
 8008352:	2a09      	cmp	r2, #9
 8008354:	d903      	bls.n	800835e <_svfiprintf_r+0x1a6>
 8008356:	2b00      	cmp	r3, #0
 8008358:	d0c6      	beq.n	80082e8 <_svfiprintf_r+0x130>
 800835a:	9105      	str	r1, [sp, #20]
 800835c:	e7c4      	b.n	80082e8 <_svfiprintf_r+0x130>
 800835e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008362:	4604      	mov	r4, r0
 8008364:	2301      	movs	r3, #1
 8008366:	e7f0      	b.n	800834a <_svfiprintf_r+0x192>
 8008368:	ab03      	add	r3, sp, #12
 800836a:	9300      	str	r3, [sp, #0]
 800836c:	462a      	mov	r2, r5
 800836e:	4b0f      	ldr	r3, [pc, #60]	; (80083ac <_svfiprintf_r+0x1f4>)
 8008370:	a904      	add	r1, sp, #16
 8008372:	4638      	mov	r0, r7
 8008374:	f3af 8000 	nop.w
 8008378:	1c42      	adds	r2, r0, #1
 800837a:	4606      	mov	r6, r0
 800837c:	d1d6      	bne.n	800832c <_svfiprintf_r+0x174>
 800837e:	89ab      	ldrh	r3, [r5, #12]
 8008380:	065b      	lsls	r3, r3, #25
 8008382:	f53f af2d 	bmi.w	80081e0 <_svfiprintf_r+0x28>
 8008386:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008388:	b01d      	add	sp, #116	; 0x74
 800838a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800838e:	ab03      	add	r3, sp, #12
 8008390:	9300      	str	r3, [sp, #0]
 8008392:	462a      	mov	r2, r5
 8008394:	4b05      	ldr	r3, [pc, #20]	; (80083ac <_svfiprintf_r+0x1f4>)
 8008396:	a904      	add	r1, sp, #16
 8008398:	4638      	mov	r0, r7
 800839a:	f000 f879 	bl	8008490 <_printf_i>
 800839e:	e7eb      	b.n	8008378 <_svfiprintf_r+0x1c0>
 80083a0:	0800883c 	.word	0x0800883c
 80083a4:	08008846 	.word	0x08008846
 80083a8:	00000000 	.word	0x00000000
 80083ac:	08008105 	.word	0x08008105
 80083b0:	08008842 	.word	0x08008842

080083b4 <_printf_common>:
 80083b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083b8:	4616      	mov	r6, r2
 80083ba:	4699      	mov	r9, r3
 80083bc:	688a      	ldr	r2, [r1, #8]
 80083be:	690b      	ldr	r3, [r1, #16]
 80083c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80083c4:	4293      	cmp	r3, r2
 80083c6:	bfb8      	it	lt
 80083c8:	4613      	movlt	r3, r2
 80083ca:	6033      	str	r3, [r6, #0]
 80083cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80083d0:	4607      	mov	r7, r0
 80083d2:	460c      	mov	r4, r1
 80083d4:	b10a      	cbz	r2, 80083da <_printf_common+0x26>
 80083d6:	3301      	adds	r3, #1
 80083d8:	6033      	str	r3, [r6, #0]
 80083da:	6823      	ldr	r3, [r4, #0]
 80083dc:	0699      	lsls	r1, r3, #26
 80083de:	bf42      	ittt	mi
 80083e0:	6833      	ldrmi	r3, [r6, #0]
 80083e2:	3302      	addmi	r3, #2
 80083e4:	6033      	strmi	r3, [r6, #0]
 80083e6:	6825      	ldr	r5, [r4, #0]
 80083e8:	f015 0506 	ands.w	r5, r5, #6
 80083ec:	d106      	bne.n	80083fc <_printf_common+0x48>
 80083ee:	f104 0a19 	add.w	sl, r4, #25
 80083f2:	68e3      	ldr	r3, [r4, #12]
 80083f4:	6832      	ldr	r2, [r6, #0]
 80083f6:	1a9b      	subs	r3, r3, r2
 80083f8:	42ab      	cmp	r3, r5
 80083fa:	dc26      	bgt.n	800844a <_printf_common+0x96>
 80083fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008400:	1e13      	subs	r3, r2, #0
 8008402:	6822      	ldr	r2, [r4, #0]
 8008404:	bf18      	it	ne
 8008406:	2301      	movne	r3, #1
 8008408:	0692      	lsls	r2, r2, #26
 800840a:	d42b      	bmi.n	8008464 <_printf_common+0xb0>
 800840c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008410:	4649      	mov	r1, r9
 8008412:	4638      	mov	r0, r7
 8008414:	47c0      	blx	r8
 8008416:	3001      	adds	r0, #1
 8008418:	d01e      	beq.n	8008458 <_printf_common+0xa4>
 800841a:	6823      	ldr	r3, [r4, #0]
 800841c:	6922      	ldr	r2, [r4, #16]
 800841e:	f003 0306 	and.w	r3, r3, #6
 8008422:	2b04      	cmp	r3, #4
 8008424:	bf02      	ittt	eq
 8008426:	68e5      	ldreq	r5, [r4, #12]
 8008428:	6833      	ldreq	r3, [r6, #0]
 800842a:	1aed      	subeq	r5, r5, r3
 800842c:	68a3      	ldr	r3, [r4, #8]
 800842e:	bf0c      	ite	eq
 8008430:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008434:	2500      	movne	r5, #0
 8008436:	4293      	cmp	r3, r2
 8008438:	bfc4      	itt	gt
 800843a:	1a9b      	subgt	r3, r3, r2
 800843c:	18ed      	addgt	r5, r5, r3
 800843e:	2600      	movs	r6, #0
 8008440:	341a      	adds	r4, #26
 8008442:	42b5      	cmp	r5, r6
 8008444:	d11a      	bne.n	800847c <_printf_common+0xc8>
 8008446:	2000      	movs	r0, #0
 8008448:	e008      	b.n	800845c <_printf_common+0xa8>
 800844a:	2301      	movs	r3, #1
 800844c:	4652      	mov	r2, sl
 800844e:	4649      	mov	r1, r9
 8008450:	4638      	mov	r0, r7
 8008452:	47c0      	blx	r8
 8008454:	3001      	adds	r0, #1
 8008456:	d103      	bne.n	8008460 <_printf_common+0xac>
 8008458:	f04f 30ff 	mov.w	r0, #4294967295
 800845c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008460:	3501      	adds	r5, #1
 8008462:	e7c6      	b.n	80083f2 <_printf_common+0x3e>
 8008464:	18e1      	adds	r1, r4, r3
 8008466:	1c5a      	adds	r2, r3, #1
 8008468:	2030      	movs	r0, #48	; 0x30
 800846a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800846e:	4422      	add	r2, r4
 8008470:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008474:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008478:	3302      	adds	r3, #2
 800847a:	e7c7      	b.n	800840c <_printf_common+0x58>
 800847c:	2301      	movs	r3, #1
 800847e:	4622      	mov	r2, r4
 8008480:	4649      	mov	r1, r9
 8008482:	4638      	mov	r0, r7
 8008484:	47c0      	blx	r8
 8008486:	3001      	adds	r0, #1
 8008488:	d0e6      	beq.n	8008458 <_printf_common+0xa4>
 800848a:	3601      	adds	r6, #1
 800848c:	e7d9      	b.n	8008442 <_printf_common+0x8e>
	...

08008490 <_printf_i>:
 8008490:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008494:	7e0f      	ldrb	r7, [r1, #24]
 8008496:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008498:	2f78      	cmp	r7, #120	; 0x78
 800849a:	4691      	mov	r9, r2
 800849c:	4680      	mov	r8, r0
 800849e:	460c      	mov	r4, r1
 80084a0:	469a      	mov	sl, r3
 80084a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80084a6:	d807      	bhi.n	80084b8 <_printf_i+0x28>
 80084a8:	2f62      	cmp	r7, #98	; 0x62
 80084aa:	d80a      	bhi.n	80084c2 <_printf_i+0x32>
 80084ac:	2f00      	cmp	r7, #0
 80084ae:	f000 80d4 	beq.w	800865a <_printf_i+0x1ca>
 80084b2:	2f58      	cmp	r7, #88	; 0x58
 80084b4:	f000 80c0 	beq.w	8008638 <_printf_i+0x1a8>
 80084b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80084bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80084c0:	e03a      	b.n	8008538 <_printf_i+0xa8>
 80084c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80084c6:	2b15      	cmp	r3, #21
 80084c8:	d8f6      	bhi.n	80084b8 <_printf_i+0x28>
 80084ca:	a101      	add	r1, pc, #4	; (adr r1, 80084d0 <_printf_i+0x40>)
 80084cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80084d0:	08008529 	.word	0x08008529
 80084d4:	0800853d 	.word	0x0800853d
 80084d8:	080084b9 	.word	0x080084b9
 80084dc:	080084b9 	.word	0x080084b9
 80084e0:	080084b9 	.word	0x080084b9
 80084e4:	080084b9 	.word	0x080084b9
 80084e8:	0800853d 	.word	0x0800853d
 80084ec:	080084b9 	.word	0x080084b9
 80084f0:	080084b9 	.word	0x080084b9
 80084f4:	080084b9 	.word	0x080084b9
 80084f8:	080084b9 	.word	0x080084b9
 80084fc:	08008641 	.word	0x08008641
 8008500:	08008569 	.word	0x08008569
 8008504:	080085fb 	.word	0x080085fb
 8008508:	080084b9 	.word	0x080084b9
 800850c:	080084b9 	.word	0x080084b9
 8008510:	08008663 	.word	0x08008663
 8008514:	080084b9 	.word	0x080084b9
 8008518:	08008569 	.word	0x08008569
 800851c:	080084b9 	.word	0x080084b9
 8008520:	080084b9 	.word	0x080084b9
 8008524:	08008603 	.word	0x08008603
 8008528:	682b      	ldr	r3, [r5, #0]
 800852a:	1d1a      	adds	r2, r3, #4
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	602a      	str	r2, [r5, #0]
 8008530:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008534:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008538:	2301      	movs	r3, #1
 800853a:	e09f      	b.n	800867c <_printf_i+0x1ec>
 800853c:	6820      	ldr	r0, [r4, #0]
 800853e:	682b      	ldr	r3, [r5, #0]
 8008540:	0607      	lsls	r7, r0, #24
 8008542:	f103 0104 	add.w	r1, r3, #4
 8008546:	6029      	str	r1, [r5, #0]
 8008548:	d501      	bpl.n	800854e <_printf_i+0xbe>
 800854a:	681e      	ldr	r6, [r3, #0]
 800854c:	e003      	b.n	8008556 <_printf_i+0xc6>
 800854e:	0646      	lsls	r6, r0, #25
 8008550:	d5fb      	bpl.n	800854a <_printf_i+0xba>
 8008552:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008556:	2e00      	cmp	r6, #0
 8008558:	da03      	bge.n	8008562 <_printf_i+0xd2>
 800855a:	232d      	movs	r3, #45	; 0x2d
 800855c:	4276      	negs	r6, r6
 800855e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008562:	485a      	ldr	r0, [pc, #360]	; (80086cc <_printf_i+0x23c>)
 8008564:	230a      	movs	r3, #10
 8008566:	e012      	b.n	800858e <_printf_i+0xfe>
 8008568:	682b      	ldr	r3, [r5, #0]
 800856a:	6820      	ldr	r0, [r4, #0]
 800856c:	1d19      	adds	r1, r3, #4
 800856e:	6029      	str	r1, [r5, #0]
 8008570:	0605      	lsls	r5, r0, #24
 8008572:	d501      	bpl.n	8008578 <_printf_i+0xe8>
 8008574:	681e      	ldr	r6, [r3, #0]
 8008576:	e002      	b.n	800857e <_printf_i+0xee>
 8008578:	0641      	lsls	r1, r0, #25
 800857a:	d5fb      	bpl.n	8008574 <_printf_i+0xe4>
 800857c:	881e      	ldrh	r6, [r3, #0]
 800857e:	4853      	ldr	r0, [pc, #332]	; (80086cc <_printf_i+0x23c>)
 8008580:	2f6f      	cmp	r7, #111	; 0x6f
 8008582:	bf0c      	ite	eq
 8008584:	2308      	moveq	r3, #8
 8008586:	230a      	movne	r3, #10
 8008588:	2100      	movs	r1, #0
 800858a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800858e:	6865      	ldr	r5, [r4, #4]
 8008590:	60a5      	str	r5, [r4, #8]
 8008592:	2d00      	cmp	r5, #0
 8008594:	bfa2      	ittt	ge
 8008596:	6821      	ldrge	r1, [r4, #0]
 8008598:	f021 0104 	bicge.w	r1, r1, #4
 800859c:	6021      	strge	r1, [r4, #0]
 800859e:	b90e      	cbnz	r6, 80085a4 <_printf_i+0x114>
 80085a0:	2d00      	cmp	r5, #0
 80085a2:	d04b      	beq.n	800863c <_printf_i+0x1ac>
 80085a4:	4615      	mov	r5, r2
 80085a6:	fbb6 f1f3 	udiv	r1, r6, r3
 80085aa:	fb03 6711 	mls	r7, r3, r1, r6
 80085ae:	5dc7      	ldrb	r7, [r0, r7]
 80085b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80085b4:	4637      	mov	r7, r6
 80085b6:	42bb      	cmp	r3, r7
 80085b8:	460e      	mov	r6, r1
 80085ba:	d9f4      	bls.n	80085a6 <_printf_i+0x116>
 80085bc:	2b08      	cmp	r3, #8
 80085be:	d10b      	bne.n	80085d8 <_printf_i+0x148>
 80085c0:	6823      	ldr	r3, [r4, #0]
 80085c2:	07de      	lsls	r6, r3, #31
 80085c4:	d508      	bpl.n	80085d8 <_printf_i+0x148>
 80085c6:	6923      	ldr	r3, [r4, #16]
 80085c8:	6861      	ldr	r1, [r4, #4]
 80085ca:	4299      	cmp	r1, r3
 80085cc:	bfde      	ittt	le
 80085ce:	2330      	movle	r3, #48	; 0x30
 80085d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80085d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80085d8:	1b52      	subs	r2, r2, r5
 80085da:	6122      	str	r2, [r4, #16]
 80085dc:	f8cd a000 	str.w	sl, [sp]
 80085e0:	464b      	mov	r3, r9
 80085e2:	aa03      	add	r2, sp, #12
 80085e4:	4621      	mov	r1, r4
 80085e6:	4640      	mov	r0, r8
 80085e8:	f7ff fee4 	bl	80083b4 <_printf_common>
 80085ec:	3001      	adds	r0, #1
 80085ee:	d14a      	bne.n	8008686 <_printf_i+0x1f6>
 80085f0:	f04f 30ff 	mov.w	r0, #4294967295
 80085f4:	b004      	add	sp, #16
 80085f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085fa:	6823      	ldr	r3, [r4, #0]
 80085fc:	f043 0320 	orr.w	r3, r3, #32
 8008600:	6023      	str	r3, [r4, #0]
 8008602:	4833      	ldr	r0, [pc, #204]	; (80086d0 <_printf_i+0x240>)
 8008604:	2778      	movs	r7, #120	; 0x78
 8008606:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800860a:	6823      	ldr	r3, [r4, #0]
 800860c:	6829      	ldr	r1, [r5, #0]
 800860e:	061f      	lsls	r7, r3, #24
 8008610:	f851 6b04 	ldr.w	r6, [r1], #4
 8008614:	d402      	bmi.n	800861c <_printf_i+0x18c>
 8008616:	065f      	lsls	r7, r3, #25
 8008618:	bf48      	it	mi
 800861a:	b2b6      	uxthmi	r6, r6
 800861c:	07df      	lsls	r7, r3, #31
 800861e:	bf48      	it	mi
 8008620:	f043 0320 	orrmi.w	r3, r3, #32
 8008624:	6029      	str	r1, [r5, #0]
 8008626:	bf48      	it	mi
 8008628:	6023      	strmi	r3, [r4, #0]
 800862a:	b91e      	cbnz	r6, 8008634 <_printf_i+0x1a4>
 800862c:	6823      	ldr	r3, [r4, #0]
 800862e:	f023 0320 	bic.w	r3, r3, #32
 8008632:	6023      	str	r3, [r4, #0]
 8008634:	2310      	movs	r3, #16
 8008636:	e7a7      	b.n	8008588 <_printf_i+0xf8>
 8008638:	4824      	ldr	r0, [pc, #144]	; (80086cc <_printf_i+0x23c>)
 800863a:	e7e4      	b.n	8008606 <_printf_i+0x176>
 800863c:	4615      	mov	r5, r2
 800863e:	e7bd      	b.n	80085bc <_printf_i+0x12c>
 8008640:	682b      	ldr	r3, [r5, #0]
 8008642:	6826      	ldr	r6, [r4, #0]
 8008644:	6961      	ldr	r1, [r4, #20]
 8008646:	1d18      	adds	r0, r3, #4
 8008648:	6028      	str	r0, [r5, #0]
 800864a:	0635      	lsls	r5, r6, #24
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	d501      	bpl.n	8008654 <_printf_i+0x1c4>
 8008650:	6019      	str	r1, [r3, #0]
 8008652:	e002      	b.n	800865a <_printf_i+0x1ca>
 8008654:	0670      	lsls	r0, r6, #25
 8008656:	d5fb      	bpl.n	8008650 <_printf_i+0x1c0>
 8008658:	8019      	strh	r1, [r3, #0]
 800865a:	2300      	movs	r3, #0
 800865c:	6123      	str	r3, [r4, #16]
 800865e:	4615      	mov	r5, r2
 8008660:	e7bc      	b.n	80085dc <_printf_i+0x14c>
 8008662:	682b      	ldr	r3, [r5, #0]
 8008664:	1d1a      	adds	r2, r3, #4
 8008666:	602a      	str	r2, [r5, #0]
 8008668:	681d      	ldr	r5, [r3, #0]
 800866a:	6862      	ldr	r2, [r4, #4]
 800866c:	2100      	movs	r1, #0
 800866e:	4628      	mov	r0, r5
 8008670:	f7f7 fdb6 	bl	80001e0 <memchr>
 8008674:	b108      	cbz	r0, 800867a <_printf_i+0x1ea>
 8008676:	1b40      	subs	r0, r0, r5
 8008678:	6060      	str	r0, [r4, #4]
 800867a:	6863      	ldr	r3, [r4, #4]
 800867c:	6123      	str	r3, [r4, #16]
 800867e:	2300      	movs	r3, #0
 8008680:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008684:	e7aa      	b.n	80085dc <_printf_i+0x14c>
 8008686:	6923      	ldr	r3, [r4, #16]
 8008688:	462a      	mov	r2, r5
 800868a:	4649      	mov	r1, r9
 800868c:	4640      	mov	r0, r8
 800868e:	47d0      	blx	sl
 8008690:	3001      	adds	r0, #1
 8008692:	d0ad      	beq.n	80085f0 <_printf_i+0x160>
 8008694:	6823      	ldr	r3, [r4, #0]
 8008696:	079b      	lsls	r3, r3, #30
 8008698:	d413      	bmi.n	80086c2 <_printf_i+0x232>
 800869a:	68e0      	ldr	r0, [r4, #12]
 800869c:	9b03      	ldr	r3, [sp, #12]
 800869e:	4298      	cmp	r0, r3
 80086a0:	bfb8      	it	lt
 80086a2:	4618      	movlt	r0, r3
 80086a4:	e7a6      	b.n	80085f4 <_printf_i+0x164>
 80086a6:	2301      	movs	r3, #1
 80086a8:	4632      	mov	r2, r6
 80086aa:	4649      	mov	r1, r9
 80086ac:	4640      	mov	r0, r8
 80086ae:	47d0      	blx	sl
 80086b0:	3001      	adds	r0, #1
 80086b2:	d09d      	beq.n	80085f0 <_printf_i+0x160>
 80086b4:	3501      	adds	r5, #1
 80086b6:	68e3      	ldr	r3, [r4, #12]
 80086b8:	9903      	ldr	r1, [sp, #12]
 80086ba:	1a5b      	subs	r3, r3, r1
 80086bc:	42ab      	cmp	r3, r5
 80086be:	dcf2      	bgt.n	80086a6 <_printf_i+0x216>
 80086c0:	e7eb      	b.n	800869a <_printf_i+0x20a>
 80086c2:	2500      	movs	r5, #0
 80086c4:	f104 0619 	add.w	r6, r4, #25
 80086c8:	e7f5      	b.n	80086b6 <_printf_i+0x226>
 80086ca:	bf00      	nop
 80086cc:	0800884d 	.word	0x0800884d
 80086d0:	0800885e 	.word	0x0800885e

080086d4 <memmove>:
 80086d4:	4288      	cmp	r0, r1
 80086d6:	b510      	push	{r4, lr}
 80086d8:	eb01 0402 	add.w	r4, r1, r2
 80086dc:	d902      	bls.n	80086e4 <memmove+0x10>
 80086de:	4284      	cmp	r4, r0
 80086e0:	4623      	mov	r3, r4
 80086e2:	d807      	bhi.n	80086f4 <memmove+0x20>
 80086e4:	1e43      	subs	r3, r0, #1
 80086e6:	42a1      	cmp	r1, r4
 80086e8:	d008      	beq.n	80086fc <memmove+0x28>
 80086ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80086ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80086f2:	e7f8      	b.n	80086e6 <memmove+0x12>
 80086f4:	4402      	add	r2, r0
 80086f6:	4601      	mov	r1, r0
 80086f8:	428a      	cmp	r2, r1
 80086fa:	d100      	bne.n	80086fe <memmove+0x2a>
 80086fc:	bd10      	pop	{r4, pc}
 80086fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008702:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008706:	e7f7      	b.n	80086f8 <memmove+0x24>

08008708 <_sbrk_r>:
 8008708:	b538      	push	{r3, r4, r5, lr}
 800870a:	4d06      	ldr	r5, [pc, #24]	; (8008724 <_sbrk_r+0x1c>)
 800870c:	2300      	movs	r3, #0
 800870e:	4604      	mov	r4, r0
 8008710:	4608      	mov	r0, r1
 8008712:	602b      	str	r3, [r5, #0]
 8008714:	f7f8 f9e8 	bl	8000ae8 <_sbrk>
 8008718:	1c43      	adds	r3, r0, #1
 800871a:	d102      	bne.n	8008722 <_sbrk_r+0x1a>
 800871c:	682b      	ldr	r3, [r5, #0]
 800871e:	b103      	cbz	r3, 8008722 <_sbrk_r+0x1a>
 8008720:	6023      	str	r3, [r4, #0]
 8008722:	bd38      	pop	{r3, r4, r5, pc}
 8008724:	20001f20 	.word	0x20001f20

08008728 <memcpy>:
 8008728:	440a      	add	r2, r1
 800872a:	4291      	cmp	r1, r2
 800872c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008730:	d100      	bne.n	8008734 <memcpy+0xc>
 8008732:	4770      	bx	lr
 8008734:	b510      	push	{r4, lr}
 8008736:	f811 4b01 	ldrb.w	r4, [r1], #1
 800873a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800873e:	4291      	cmp	r1, r2
 8008740:	d1f9      	bne.n	8008736 <memcpy+0xe>
 8008742:	bd10      	pop	{r4, pc}

08008744 <_realloc_r>:
 8008744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008748:	4680      	mov	r8, r0
 800874a:	4614      	mov	r4, r2
 800874c:	460e      	mov	r6, r1
 800874e:	b921      	cbnz	r1, 800875a <_realloc_r+0x16>
 8008750:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008754:	4611      	mov	r1, r2
 8008756:	f7ff bc49 	b.w	8007fec <_malloc_r>
 800875a:	b92a      	cbnz	r2, 8008768 <_realloc_r+0x24>
 800875c:	f7ff fbda 	bl	8007f14 <_free_r>
 8008760:	4625      	mov	r5, r4
 8008762:	4628      	mov	r0, r5
 8008764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008768:	f000 f81b 	bl	80087a2 <_malloc_usable_size_r>
 800876c:	4284      	cmp	r4, r0
 800876e:	4607      	mov	r7, r0
 8008770:	d802      	bhi.n	8008778 <_realloc_r+0x34>
 8008772:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008776:	d812      	bhi.n	800879e <_realloc_r+0x5a>
 8008778:	4621      	mov	r1, r4
 800877a:	4640      	mov	r0, r8
 800877c:	f7ff fc36 	bl	8007fec <_malloc_r>
 8008780:	4605      	mov	r5, r0
 8008782:	2800      	cmp	r0, #0
 8008784:	d0ed      	beq.n	8008762 <_realloc_r+0x1e>
 8008786:	42bc      	cmp	r4, r7
 8008788:	4622      	mov	r2, r4
 800878a:	4631      	mov	r1, r6
 800878c:	bf28      	it	cs
 800878e:	463a      	movcs	r2, r7
 8008790:	f7ff ffca 	bl	8008728 <memcpy>
 8008794:	4631      	mov	r1, r6
 8008796:	4640      	mov	r0, r8
 8008798:	f7ff fbbc 	bl	8007f14 <_free_r>
 800879c:	e7e1      	b.n	8008762 <_realloc_r+0x1e>
 800879e:	4635      	mov	r5, r6
 80087a0:	e7df      	b.n	8008762 <_realloc_r+0x1e>

080087a2 <_malloc_usable_size_r>:
 80087a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087a6:	1f18      	subs	r0, r3, #4
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	bfbc      	itt	lt
 80087ac:	580b      	ldrlt	r3, [r1, r0]
 80087ae:	18c0      	addlt	r0, r0, r3
 80087b0:	4770      	bx	lr
	...

080087b4 <_init>:
 80087b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087b6:	bf00      	nop
 80087b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087ba:	bc08      	pop	{r3}
 80087bc:	469e      	mov	lr, r3
 80087be:	4770      	bx	lr

080087c0 <_fini>:
 80087c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087c2:	bf00      	nop
 80087c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087c6:	bc08      	pop	{r3}
 80087c8:	469e      	mov	lr, r3
 80087ca:	4770      	bx	lr
